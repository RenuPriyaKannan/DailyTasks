OBJECT Codeunit 50000 API Functions
{
  OBJECT-PROPERTIES
  {
    Date=30-06-22;
    Time=10:58:43;
    Modified=Yes;
    Version List=DFX Suite;
  }
  PROPERTIES
  {
    OnRun=VAR
            TestJson@100000000 : TextConst 'ENG={
                      "Action":{
          "Function": "CREATENEW"
                                 },
                                 "Records":[{
                                 "AttachedToType": "Client",
                                 "AttachedToNo": "CLI092",
                                 "LFEntryID": "1234",
                                 "FileName": "abc.txt",
                                 "DocDescription" : "Initial Deed",
                                 "LFDocType" : "",
                                 "LFDocSubType" : "",
                                 "LFUID" : "60000"
                                 }
                                 ]
                                 }';
            UpdateJSON@100000001 : TextConst 'ENU={
                      "Action":{
          "Function": "UPDATE"
          },
          "Records":[{
          "AttachedToType": "Client",
          "AttachedToNo": "CLI092",
          "LFEntryID": "12345",
          "FileName": "abcd.txt",
          "DocDescription" : "Deed",
          "LFDocType" : "",
          "LFDocSubType" : "",
          "LFUID" : "60000"
          }
          ]
          }';
            update@1000000000 : TextConst 'ENU={
                      "Action":{
          "Function": "UPDATE"
          },
          "Records":[{
          "AttachedToType": "Client",
          "AttachedToNo": "CLI092",
          "LFEntryID": "12347656",
          "FileName": "xyz.txt",
          "DocDescription" : "Deed",
          "LFDocType" : "",
          "LFDocSubType" : "",
          "LFUID" : "60000"
          }
          ]
          }';
            UPDATETEST@1000000001 : TextConst 'ENU={
                      "Action":{
          "Function": "UPDATE"
          },
          "Records":[{
          "AttachedToType": "Client",
          "AttachedToNo": "CL00004", 
          "LFEntryID": 40613,
                             "FileName": "abc-doc.txt",
                             "DocDescription" : "testLF-doc",
                             "LFDocType" : "CHAR",
                             "LFDocSubType" : "TEST"
                             }
                             ]
                             }';
            AgreementAttachedType@1000000002 : 'Prospect,Contact,Owner,,,Potential Client,,,Client,,,Entity,Intermediary,Resource';
            "Meeting Type"@1000000004 : ' ,Directors,Shareholders';
            Status@1000000003 : 'In Progress,Signed Off';
            Freeze@100000002 : ' ,Yes,No';
            RecordType@100000003 : 'Prospect,Client Owner,Client,Entity,Resource';
            LinkedTo@100000004 : ' ,Client,Entity,Prospect,Owner,Job,Bank,Loan,Agent,Property,Miscellaneous Asset,Yacht,Aviation,Intellectual Property,Life Assurance,Quoted Investment,Unquoted Investment,Potential Client,Borrowing and Lending,Portfolio,Payments/Receipts,Resource,Safe Custody,Introducer,Distribution,Addition';
          BEGIN
            MESSAGE('Licence');
            //CreateCounterparty('CLI0000001');
            //UpdateNavFromLF(update);
            //UpdateNavFromLF(UPDATETEST);
            //InsertAgreementRegister('RE001',AgreementAttachedType::Entity,'E00000008',TODAY,'12344',TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,2,'ttt');
            //InsertMeetingRegister('CLI0000004','WESTFIELD INTERNATIONAL INVESTMENT INC.',TODAY,000300T,"Meeting Type"::Shareholders,'',Status::"In Progress");
            //SignOffTrackingPeriod(RecordType::Entity,'E00000005','FATCA','US',010126D,311226D,TODAY,TODAY);
            //CreateUDF(LinkedTo::Entity,'E00000025','EMS_GUID','','E00000025',LinkedTo::" ",'',TODAY,TODAY,1);
            //CreateTWMPayment('0000020');
            //CancelTWMPayment('PY00000009');
            //ValidateTWMPayment('PY00000010');
          END;

  }
  CODE
  {
    VAR
      ClientManagementFunctions@100000000 : Codeunit 9068493;
      NavOneSystem@100000002 : Codeunit 9068249;
      DataPartitioningMgmtit@100000001 : Codeunit 9072480;
      NoSeriesManagement@1000000000 : Codeunit 396;
      JSONMgt@100000003 : Codeunit 5459;

    [External]
    PROCEDURE CreateClient@100000002(Name@100000000 : Text[50];ClientType@100000001 : Code[10];ClientFormalName@100000002 : Text[150];CurrencyCode@100000003 : Code[10];LegalCode@100000004 : Code[20];FirstPartitionCode@100000005 : Code[10];SecondPartitionCode@100000006 : Code[10];TrustDirector@100000007 : Code[20];RelationshipManager@100000008 : Code[20];AssistRelationshipManager@100000009 : Code[20];Administrator@100000010 : Code[20];Accountant@100000011 : Code[20];ClientActivityGroup@100000012 : Code[20];CreateFiscalYear@100000013 : Boolean;InserMailingAddress@100000014 : Boolean);
    VAR
      ClientRecTEMP@100000019 : TEMPORARY Record 9068500;
      ClientRec@100000015 : Record 9068500;
      ClientGLSetup@100000016 : Record 9068618;
      NewClientGLSetup@100000017 : Record 9068618;
      ClientTypeRec@100000018 : Record 9068501;
      NewClientSetup@100000020 : Codeunit 9068482;
      CreatedProperly@100000021 : Boolean;
    BEGIN
      ClientRecTEMP.INIT;
      ClientRecTEMP.Type := ClientType;
      ClientRecTEMP.Name := Name;
      ClientRecTEMP."Client Formal Name" := ClientFormalName;
      ClientRecTEMP."Currency Code" := CurrencyCode;
      ClientRecTEMP."Global Dimension 1 Code" := LegalCode;
      ClientRecTEMP."First Partition Code" := FirstPartitionCode;
      ClientRecTEMP."Second Partition Code" := SecondPartitionCode;
      ClientRecTEMP.ClientAnalysisA := TrustDirector;
      ClientRecTEMP.ClientAnalysisB := RelationshipManager;
      ClientRecTEMP.ClientAnalysisC := AssistRelationshipManager;
      ClientRecTEMP.ClientAnalysisD := Administrator;
      ClientRecTEMP.ClientAnalysisE := Accountant;
      ClientRecTEMP.ClientAnalysisF := ClientActivityGroup;
      ClientRec := ClientRecTEMP;

      NewClientSetup.CreateClient(ClientRec, CurrencyCode, InserMailingAddress,
        ClientRec."Global Dimension 2 Code", '') ;
    END;

    [External]
    PROCEDURE CreateEntity@1000000001(Name@1000000000 : Text[50];Name2@1000000001 : Text[50];DateOfBirth@1000000002 : Date;Nationality@1000000003 : Code[10];Profession@1000000004 : Code[10];Residence@1000000005 : Code[10];Personal_Corporate@1000000006 : 'Personal,Corporate';Jurisdiction@1000000007 : Code[10];CountryofIncorporation@1000000008 : Code[10];DateOfIncorporation@1000000011 : Date;CreateOwner@100000000 : Boolean;isBank@100000001 : Boolean) EntityCode : Code[20];
    VAR
      Entity@100000003 : Record 9068505;
      Owner@100000002 : Record 9068443;
    BEGIN

      IF Personal_Corporate = Personal_Corporate::Personal THEN
        IF (STRLEN(Name) < 2) THEN
          ERROR('Name must be at least 2 characters');
      // IF Personal_Corporate = Personal_Corporate::Corporate THEN
      //  IF (STRLEN(Name2) < 2) THEN
      //    ERROR('Name2 must be at least 2 characters');

      Entity.INIT;
      Entity.Name :=  Name;
      Entity."Name 2" := Name2;
      Entity.UpdateFormalName;
      Entity."Date of Birth" := DateOfBirth;
      Entity.Nationality := Nationality;
      Entity.Profession := Profession;
      Entity.Residence := Residence;
      CASE Personal_Corporate OF
        Personal_Corporate::Personal : Entity."Personal/Corporate" := Entity."Personal/Corporate"::Personal;
        Personal_Corporate::Corporate : Entity."Personal/Corporate":= Entity."Personal/Corporate"::Corporate;
      END;
      IF isBank THEN
        Entity."Entity Type" := Entity."Entity Type"::Bank;

      Entity.Jurisdiction := Jurisdiction;
      Entity."Country of Incorporation" := CountryofIncorporation;
      Entity."Date of incorp./formation" := DateOfIncorporation;
      Entity.INSERT(TRUE);

      IF CreateOwner THEN BEGIN
        Owner.INIT;
        Owner."Entity No." := Entity."Entity No.";
        Owner.INSERT(TRUE);

        Entity."Owner No." := Owner."No.";
        Entity.MODIFY;

        ClientManagementFunctions.UpdateOwnerFromEntity(Entity,FALSE);
      END;
      EXIT(EntityCode);
    END;

    [External]
    PROCEDURE CreateBankAccount@100000000(ClientNo@100000000 : Code[20];BankCode@100000001 : Code[20];Name@100000002 : Text[50];Name2@100000003 : Text[50];AccountInNameOf@100000004 : Text[150];BankAccountNo@100000005 : Text[30];PostingGroup@100000006 : Code[10];CurrencyCode@100000007 : Code[10];SortCode@100000008 : Text[20];SwiftCode@100000009 : Code[20];IBAN@100000010 : Code[50]);
    VAR
      ClientAccount@100000011 : Record 9068624;
    BEGIN
      ClientAccount.INIT;
      ClientAccount."Client No." := ClientNo;
      ClientAccount.VALIDATE("Bank Code",BankCode);
      ClientAccount.Name := Name;
      ClientAccount."Name 2" := Name2;
      ClientAccount."Account In Name Of" := AccountInNameOf;
      ClientAccount."Bank Account No." := BankAccountNo;
      ClientAccount.VALIDATE("Posting Group",PostingGroup);
      ClientAccount."Currency Code" := CurrencyCode;
      ClientAccount."Sort Code" := SortCode;
      ClientAccount."Swift Code" := SwiftCode;
      ClientAccount.IBAN := IBAN;
      ClientAccount.INSERT(TRUE);
    END;

    [External]
    PROCEDURE CreateContact@1000000014(Type@1000000000 : 'Company,Person';CompanyName@1000000001 : Text[100];FirstName@1000000002 : Text[50];Surname@1000000003 : Text[50];CompanyNo@1000000004 : Code[20]) ContactNo : Code[20];
    VAR
      ContactRec@1000000005 : Record 5050;
      RMSetup@1000000006 : Record 5079;
      NoSeriesMgt@1000000007 : Codeunit 396;
      "No."@100000000 : Code[20];
    BEGIN
      CLEAR("No.");

      CASE Type OF
        Type::Company : BEGIN
          IF ContactRec.INSERT(TRUE) THEN
            "No." := ContactRec."No.";
          ContactRec."Company Name" := CompanyName;
          ContactRec."Company No." := ContactRec."No.";
          ContactRec.MODIFY;
        END;
        Type::Person : BEGIN
           ContactRec.INIT;
          ContactRec.VALIDATE("First Name",FirstName);
          ContactRec.VALIDATE(Surname,Surname);
          ContactRec.VALIDATE(Type,Type);
          ContactRec.VALIDATE("Company No.",CompanyNo);
          IF ContactRec.INSERT(TRUE) THEN
           "No." := ContactRec."No.";
        END;
      END;

      EXIT("No.");
    END;

    [External]
    PROCEDURE ShowInvoice@1000000000(DocumentNo@1000000000 : Code[20];FilePath@1000000003 : Text) PDFFileName : Text;
    VAR
      ClientInvoice@1000000001 : Record 9068453;
      ClientInvoiceTemplate2@1000000002 : Report 9072674;
      SalesInvoiceHeader@1000000004 : Record 112;
    BEGIN
      IF SalesInvoiceHeader.GET(DocumentNo) THEN
        IF NOT ClientInvoice.GET(SalesInvoiceHeader."Billing Guide Number") THEN
          EXIT;

      IF FilePath = '' THEN
        EXIT;

      PDFFileName :=  FilePath + FORMAT(CREATEGUID);
      PDFFileName := DELCHR(PDFFileName,'=','{-}');
      PDFFileName += '.pdf';
      ClientInvoiceTemplate2.SETTABLEVIEW(ClientInvoice);
      ClientInvoiceTemplate2.SAVEASPDF(PDFFileName);

      EXIT(PDFFileName);
    END;

    [External]
    PROCEDURE GetBillingGuideNo@1000000007(DocumentNo@1000000000 : Code[20]) BillingGuiideNo : Code[20];
    VAR
      SalesInvoiceHeader@1000000001 : Record 112;
    BEGIN

      IF SalesInvoiceHeader.GET(DocumentNo) THEN
        EXIT(SalesInvoiceHeader."Billing Guide Number");
    END;

    [External]
    PROCEDURE VistraPayment@1000000002(ClientNo@1000000000 : Code[20];InvoiceNo@1000000001 : Code[20];PaymentDate@1000000002 : Date;CurrencyCode@1000000003 : Code[10];TotalAmount@1000000004 : Decimal;BenefName@1000000005 : Text[150];BenefAddress@1000000006 : Text[50];BenefAddress2@1000000007 : Text[50];BenefBankName@1000000008 : Text[70];BenefBankAddress@1000000009 : Text[140];BenefBankAccountNo@1000000010 : Text[34]) ReturnError : Text;
    VAR
      ClientRec@1000000011 : Record 9068500;
      TWMPayments@1000000012 : Record 9072144;
      TWMPaymentsExtension@1000000013 : Record 9072145;
      TWMBankingIntegrationSetup@1000000014 : Record 9072130;
      TWMPaymentsCU@1000000015 : Codeunit 9072130;
    BEGIN

      IF NOT ClientRec.GET(ClientNo) THEN
        ERROR('Client not found');

      TWMPayments.INIT;
      TWMPayments."Document Type" := TWMPayments."Document Type"::Payment;
      TWMBankingIntegrationSetup.GET;
       TWMBankingIntegrationSetup.TESTFIELD("Payment Reference Nos.");
       TWMPayments.Reference := NoSeriesManagement.GetNextNo(TWMBankingIntegrationSetup."Payment Reference Nos.", TODAY, TRUE);
       TWMPayments."No. Series" := TWMBankingIntegrationSetup."Payment Reference Nos.";
      TWMPayments.INSERT(TRUE);

      // TWMPayments.CreateExtendedFields;
      // TWMPayments.CreateAuthSelection;
      // TWMPaymentsCU.CreateJnlTemplates(TWMPayments);
      // TWMPaymentsCU.UpdateJournals(TWMPayments);

      TWMPayments."Internal / External" := TWMPayments."Internal / External"::"External Payment";
      TWMPayments.VALIDATE("External Payment Type", TWMPayments."External Payment Type"::SWIFT);
      TWMPayments.VALIDATE("From Client",ClientRec."Client No.");
      TWMPayments.VALIDATE("Value Date",PaymentDate);
      TWMPayments.VALIDATE("To Currency",CurrencyCode);
      TWMPayments.VALIDATE("Payment Amount",TotalAmount);
      TWMPayments."Payments Details" := InvoiceNo;
      TWMPayments.VALIDATE("Beneficiary Customer",BenefName);
      TWMPayments.VALIDATE("Beneficiarys Bank Line 1",BenefBankName);
      TWMPayments."Beneficiarys Bank Line 2" := BenefBankAddress;
      TWMPayments."Beneficiary Account Number" := BenefBankAccountNo;
      TWMPayments.Status := TWMPayments.Status::"Enter Details";
      TWMPayments.MODIFY;

      IF TWMPaymentsExtension.GET(TWMPayments.Reference) THEN BEGIN
        TWMPaymentsExtension."Beneficiary Address" := BenefAddress;
        TWMPaymentsExtension."Beneficiary Address 2" := BenefAddress2;
        TWMPaymentsExtension.MODIFY;
      END;
    END;

    [External]
    PROCEDURE LinkDocument@1000000003(Type@1000000000 : ' ,Client,Entity,Prospect,Intermediary,Client Owner,Resource,,Dimension,,,External Bank Payment,,,,Potential Client,Custom1';Name@1000000001 : Text[50];FileNamePath@1000000014 : Text[500];DocumentType@1000000003 : Code[10];DocumentSubType@1000000004 : Code[20];DocumentDate@1000000005 : Date;Subject@1000000006 : Text[150];DocumentExpiryDate@1000000007 : Date;AdditionalInformation@1000000008 : Text[100]);
    VAR
      ClientRec@1000000002 : Record 9068500;
      EntityRec@1000000015 : Record 9068505;
      CorrespondenceStore@1000000011 : Record 9068660;
      DocumentFolderSetup@1000000010 : Record 9068662;
      DocumentandMailManagement@1000000009 : Codeunit 9068511;
      DocType@1000000012 : Code[50];
      TempCode@1000000013 : Code[20];
      No_@1000000016 : Code[20];
    BEGIN
      DocumentFolderSetup.GET;
      IF DocumentFolderSetup."External Doc Management System" <> DocumentFolderSetup."External Doc Management System"::"Internal Navision" THEN
        ERROR('Link Document supports only Internal Navision DMS');

      CASE Type OF
        Type::Client : BEGIN
          ClientRec.SETFILTER(Name,'%1','@*' + Name + '*');
          IF NOT ClientRec.FINDFIRST THEN
            ERROR('Client not found');
          No_ := ClientRec."Client No.";
        END;
        Type::Entity : BEGIN
          EntityRec.SETFILTER(Name,'%1','@*' + Name + '*');
          IF NOT EntityRec.FINDFIRST THEN
            ERROR('Entity not found');
          No_ := EntityRec."Entity No.";
        END;
        ELSE ERROR('Not coded');
      END;
      CorrespondenceStore.Type := Type;
      CorrespondenceStore."No." := No_;
      CorrespondenceStore.Name := ReturnEntityName(Type,No_);
      CorrespondenceStore.Subject := Subject;
      IF DocumentType <> '' THEN BEGIN
        CorrespondenceStore."Document Type" := DocumentType;
        CorrespondenceStore."Document Sub Type" := DocumentSubType;
      END ELSE
        CorrespondenceStore."Document Type" := 'Migrated';

      CorrespondenceStore."Document Date" := DocumentDate;
      CorrespondenceStore."Additional Information" := AdditionalInformation;
      CorrespondenceStore."Document Expiry Date" := DocumentExpiryDate;
      CorrespondenceStore."Document Inserted Date" := TODAY;
      CorrespondenceStore."Document Inserted By" := USERID;
      CorrespondenceStore."Last Accessed Via Navision" := TODAY;
      CorrespondenceStore."Last Accessed By" := USERID;
      CorrespondenceStore.ID := DocumentandMailManagement."Get Next Document Number"(Type,No_);
      CorrespondenceStore."Document GUID" := CREATEGUID;
      DocumentandMailManagement."Get File Details From FullPath"(FileNamePath,CorrespondenceStore."MS Office Doc Type",CorrespondenceStore.FileName,
                                  CorrespondenceStore.FilePath);
      //CorrespondenceStore.FilePath := FilePath;
      //CorrespondenceStore.FileName := FileName;
      CorrespondenceStore.INSERT;
    END;

    [External]
    PROCEDURE UpdateDocumentType@1000000006(Type@1000000000 : ' ,Client,Entity,Prospect,Intermediary,Client Owner,Resource,,Dimension,,,External Bank Payment,,,,Potential Client,Custom1';Name@1000000006 : Text[50];FileNamePath@1000000014 : Text[500];DocumentType@1000000003 : Code[10];DocumentSubType@1000000004 : Code[20]);
    VAR
      ClientRec@1000000008 : Record 9068500;
      EntityRec@1000000007 : Record 9068505;
      CorrespondenceStore@1000000011 : Record 9068660;
      DocumentFolderSetup@1000000010 : Record 9068662;
      DocumentandMailManagement@1000000009 : Codeunit 9068511;
      DocType@1000000012 : Code[10];
      TempCode@1000000013 : Code[20];
      FileName@1000000002 : Text[250];
      FilePath@1000000005 : Text[250];
      No_@1000000001 : Code[20];
    BEGIN
      // DocumentFolderSetup.GET;
      // IF DocumentFolderSetup."External Doc Management System" <> DocumentFolderSetup."External Doc Management System"::"Internal Navision" THEN
      //  ERROR('Link Document supports only Internal Navision DMS');

      CASE Type OF
        Type::Client : BEGIN
          ClientRec.SETFILTER(Name,'%1','@*' + Name + '*');
          IF NOT ClientRec.FINDFIRST THEN
            ERROR('Client not found');
          No_ := ClientRec."Client No.";
        END;
        Type::Entity : BEGIN
          EntityRec.SETFILTER(Name,'%1','@*' + Name + '*');
          IF NOT EntityRec.FINDFIRST THEN
            ERROR('Entity not found');
          No_ := EntityRec."Entity No.";
        END;
        ELSE ERROR('Not coded');
      END;

      DocumentandMailManagement."Get File Details From FullPath"(FileNamePath,DocType,FileName,
                                  FilePath);


      CorrespondenceStore.SETRANGE(Type,Type);
      CorrespondenceStore.SETRANGE("No.",No_);
      CorrespondenceStore.SETRANGE(FileName,FileName);
      CorrespondenceStore.SETRANGE(FilePath,FilePath);
      IF CorrespondenceStore.FINDFIRST THEN BEGIN
        CorrespondenceStore."Document Type" := DocumentType;
        CorrespondenceStore."Document Sub Type" := DocumentSubType;
        CorrespondenceStore.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ReturnEntityName@1000000010(Type@1000000007 : ' ,Client,Entity,Prospect,Intermediary,Client Owner,Resource,,Dimension,,,External Bank Payment,,,,Potential Client,Custom1';No_@1000000006 : Code[20]) : Text;
    VAR
      Client@1000000000 : Record 9068500;
      Entity@1000000001 : Record 9068505;
      Prospect@1000000002 : Record 9068440;
      Intermediary@1000000003 : Record 9068447;
      Owner@1000000004 : Record 9068443;
      PotentialClient@1000000005 : Record 9068732;
    BEGIN
      IF Type = Type::Client THEN BEGIN
        IF Client.GET(No_) THEN
          EXIT(Client."Search Name");
      END ELSE IF Type = Type::Prospect THEN BEGIN
        IF Prospect.GET(No_) THEN
          EXIT(Prospect."Search Name");
      END ELSE IF Type = Type::"Client Owner" THEN BEGIN
        IF Owner.GET(No_) THEN
          EXIT(Owner."Search Name");
      END ELSE IF Type = Type::Entity THEN BEGIN
        IF Entity.GET(No_) THEN
          EXIT(Entity."Search Name");
      END ELSE IF Type = Type::"Potential Client" THEN BEGIN
        IF PotentialClient.GET(No_) THEN
          EXIT(PotentialClient."Search Name");
      END ELSE IF Type = Type::Intermediary THEN BEGIN
        IF Intermediary.GET(No_) THEN
          EXIT(Intermediary."Search Name");
      END;
    END;

    [External]
    PROCEDURE PrepareCLENList@1000000004(UserID@1000000000 : Code[50];TableName@1000000001 : Code[10]);
    VAR
      ClientRec@1000000002 : Record 9068500;
      EntityRec@1000000003 : Record 9068505;
      PartitioningRestrictions@1000000004 : Record 9072487;
      PartitionedClientEntity@1000000005 : Record 50000;
      Resource@1000000006 : Record 156;
    BEGIN
      Resource.SETRANGE("Login User ID",UserID);
      IF Resource.ISEMPTY THEN
        EXIT;


      CASE TableName OF
        'CL' : BEGIN
          PartitioningRestrictions.SETRANGE("User ID",UserID);
          PartitioningRestrictions.SETRANGE("Table Name",PartitioningRestrictions."Table Name"::Client);

          PartitionedClientEntity.SETRANGE("Table Name",'CL');
          PartitionedClientEntity.SETRANGE("USER ID",UserID);

          IF ClientRec.FINDSET THEN REPEAT
            PartitionedClientEntity.SETRANGE("Client No._Entity No.",ClientRec."Client No.");
            IF PartitionedClientEntity.ISEMPTY THEN BEGIN
              PartitioningRestrictions.SETRANGE("Primary Key",ClientRec."Client No.");
              IF PartitioningRestrictions.ISEMPTY THEN BEGIN
                PartitionedClientEntity.INIT;
                PartitionedClientEntity."Table Name" := 'CL';
                PartitionedClientEntity."USER ID" := UserID;
                PartitionedClientEntity."Client No._Entity No." := ClientRec."Client No.";
                PartitionedClientEntity."First Partition Code" := ClientRec."First Partition Code";
                PartitionedClientEntity."First Partition Code" := ClientRec."Second Partition Code";
                PartitionedClientEntity."Client Name" := ClientRec.Name;
                PartitionedClientEntity."CL Country of Incorporation" := ClientRec."Country of Incorporation";
                PartitionedClientEntity."CL Date of Incorporation" := ClientRec."Date of Incorporation";
                PartitionedClientEntity."Registered Number" := ClientRec."Registered Number";
                ClientRec.CALCFIELDS("Currency Code");
                PartitionedClientEntity."Currency Code" := ClientRec."Currency Code";
                PartitionedClientEntity."Administrative Office" := ClientRec."Administrative Office";
                PartitionedClientEntity."Registered Office" := ClientRec."Registered Office";
                PartitionedClientEntity."Global Dimension 1 Code" := ClientRec."Global Dimension 1 Code";
                PartitionedClientEntity.ClientAnalysisA := ClientRec.ClientAnalysisA;
                PartitionedClientEntity.ClientAnalysisB := ClientRec.ClientAnalysisB;
                PartitionedClientEntity.ClientAnalysisC := ClientRec.ClientAnalysisC;
                PartitionedClientEntity.ClientAnalysisD := ClientRec.ClientAnalysisD;
                PartitionedClientEntity.ClientAnalysisE := ClientRec.ClientAnalysisE;
                PartitionedClientEntity.ClientAnalysisF := ClientRec.ClientAnalysisF;
                PartitionedClientEntity.INSERT;
              END;
            END;
          UNTIL ClientRec.NEXT = 0;
        END;
        'EN' : BEGIN
          PartitioningRestrictions.SETRANGE("User ID",UserID);
          PartitioningRestrictions.SETRANGE("Table Name",PartitioningRestrictions."Table Name"::Entity);

          PartitionedClientEntity.SETRANGE("Table Name",'EN');
          PartitionedClientEntity.SETRANGE("USER ID",UserID);

          IF EntityRec.FINDSET THEN REPEAT
            PartitionedClientEntity.SETRANGE("Client No._Entity No.",EntityRec."Entity No.");
            IF PartitionedClientEntity.ISEMPTY THEN BEGIN
              PartitioningRestrictions.SETRANGE("Primary Key",EntityRec."Entity No.");
              IF PartitioningRestrictions.ISEMPTY THEN BEGIN
                PartitionedClientEntity.INIT;
                PartitionedClientEntity."Table Name" := 'EN';
                PartitionedClientEntity."USER ID" := UserID;
                PartitionedClientEntity."Client No._Entity No." := EntityRec."Entity No.";
                PartitionedClientEntity."EN Name" := EntityRec.Name;
                PartitionedClientEntity."Date of Birth" := EntityRec."Date of Birth";
                PartitionedClientEntity.Nationality := EntityRec.Nationality;
                PartitionedClientEntity.Profession := EntityRec.Profession;
                PartitionedClientEntity.Residence := EntityRec.Residence;
                PartitionedClientEntity.Title := EntityRec.Title;
                PartitionedClientEntity."Name 2" := EntityRec."Name 2";
                PartitionedClientEntity."Entity Type" := EntityRec."Entity Type";
                PartitionedClientEntity."Marital Status" := EntityRec."Marital Status";
                PartitionedClientEntity.Gender := EntityRec.Gender;
                PartitionedClientEntity.Initials := EntityRec.Initials;
                PartitionedClientEntity."Personal/Corporate" := EntityRec."Personal/Corporate";
                PartitionedClientEntity."EN Country of Incorporation" := EntityRec."Country of Incorporation";
                PartitionedClientEntity."EN Jurisdiction" := EntityRec.Jurisdiction;
                PartitionedClientEntity.INSERT;
              END;
            END;
          UNTIL EntityRec.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE GetClientType@1000000005(pClientCode@1000000000 : Code[20]) ClType : Code[30];
    VAR
      ClientRec@1000000001 : Record 9068500;
    BEGIN
      IF ClientRec.GET(pClientCode) THEN BEGIN
        ClientRec.CALCFIELDS("Client Type Type");
        ClType :=  FORMAT(ClientRec."Client Type Type");
        EXIT(ClType);
      END;
    END;

    [External]
    PROCEDURE CreateCustomer@1000000008(Name@1000000014 : Text[50];ClientType@1000000013 : Code[10];SearchName@1000000012 : Text[150];CurrencyCode@1000000011 : Code[10];LegalCode@1000000010 : Code[20];FirstPartitionCode@1000000009 : Code[10];SecondPartitionCode@1000000008 : Code[10];TrustDirector@1000000007 : Code[20];RelationshipManager@1000000006 : Code[20];AssistRelationshipManager@1000000005 : Code[20];Administrator@1000000004 : Code[20];Accountant@1000000003 : Code[20];ClientActivityGroup@1000000002 : Code[20];CreateFiscalYear@1000000001 : Boolean;InserMailingAddress@1000000000 : Boolean);
    VAR
      CustRecTEMP@1000000028 : TEMPORARY Record 18;
      CustRec@1000000027 : Record 18;
      CustGLSetup@1000000026 : Record 98;
      NewCustGLSetup@1000000025 : Record 98;
      ClientTypeRec@1000000024 : Record 9068501;
      CreatedProperly@1000000022 : Boolean;
    BEGIN
      CustRecTEMP.INIT;
      //CustRecTEMP.Type := ClientType;
      CustRecTEMP.Name := Name;
      CustRecTEMP."Search Name" := SearchName;
      CustRecTEMP."Currency Code" := CurrencyCode;
      CustRecTEMP."Global Dimension 1 Code" := LegalCode;
      CustRecTEMP."First Partition Code" := FirstPartitionCode;
      CustRecTEMP."Second Partition Code" := SecondPartitionCode;
      CustRecTEMP.ClientAnalysisA := TrustDirector;
      CustRecTEMP.ClientAnalysisB := RelationshipManager;
      CustRecTEMP.ClientAnalysisC := AssistRelationshipManager;
      CustRecTEMP.ClientAnalysisD := Administrator;
      CustRecTEMP.ClientAnalysisE := Accountant;
      CustRecTEMP.ClientAnalysisF := ClientActivityGroup;
      CustRec := CustRecTEMP;
      CustRec.INSERT(TRUE);

      //NewClientSetup.CreateClient(CustRec, CurrencyCode, InserMailingAddress,
        //CustRec."Global Dimension 2 Code", '') ;
    END;

    [External]
    PROCEDURE UpdateEntity@1000000012(EntityNo@1000000043 : Text;Type@1000000042 : Text[50];Personal_Corporate@1000000041 : 'Personal,Corporate';Name@1000000040 : Text[50];Name2@1000000039 : Text[50];AnonimisedName@1000000038 : Text[50];Initials@1000000037 : Text[50];SearchName@1000000036 : Text[50];Gender@1000000035 : ',Male,Female';PEP@1000000034 : Boolean;EP@1000000033 : Boolean;Classification@1000000032 : Text[50];"Externa ReferenceNo"@1000000031 : Text[50];Passportnumber@1000000030 : Text[50];Passportcountryofissue@1000000029 : Text[50];"Passport/IDIssueDate"@1000000028 : Date;Passportexpirydate@1000000027 : Date;"Passport/IDNumber(2)"@1000000026 : Text[50];"Passport/IDCountry(2)"@1000000025 : Text[50];"Passport/IDIssueDate(2)"@1000000024 : Date;"Passport/IDExpiryDate(2)"@1000000023 : Date;DateofBirth@1000000022 : Date;Nationality@1000000021 : Text[50];BankSwiftCode@1000000020 : Text[50];BankSortCode@1000000019 : Text[50];Inactive@1000000018 : Boolean;NINumber@1000000017 : Text[50];Profession@1000000016 : Text[50];"OwnerNo."@1000000015 : Text[50];Manager@1000000014 : Text[50];Administrator@1000000013 : Text[50];FirstPartitionCode@1000000012 : Text[50];FormalName@1000000011 : Text[50];LastRiskAssessmentDate@1000000010 : Date;NextRiskAssessmentDueDate@1000000009 : Date;CurrentRiskRating@1000000008 : Text[50];CurrentRiskWeight@1000000007 : Integer;Address1@1000000006 : Text[50];Address2@1000000005 : Text[50];Address3@1000000004 : Text[50];City@1000000003 : Text[50];PostCode@1000000002 : Text[50];County@1000000001 : Text[50];CountryCode@1000000000 : Text[50]);
    VAR
      Entity@1000000044 : Record 9068505;
    BEGIN
      Entity.RESET;
      Entity.SETRANGE("Entity No.",EntityNo);
      IF Entity.FINDFIRST THEN BEGIN
        Entity.Type := Type;
        Entity."Personal/Corporate" := Personal_Corporate;
        Entity.Name :=  Name;
        Entity."Name 2" := Name2;
        Entity.UpdateFormalName;
        Entity."Anonimised Name" := AnonimisedName;
        Entity.Initials := Initials;
        Entity."Search Name" := SearchName;
        Entity.Gender := Gender;
        Entity.PEP := PEP;
        Entity.EP := EP;
        Entity.Classification := Classification;
        Entity."External Reference No" := "Externa ReferenceNo";
        Entity."Passport number" := Passportnumber;
        Entity."Passport country of issue" := Passportcountryofissue;
        Entity."Passport/ID Issue Date" := "Passport/IDIssueDate";
        Entity."Passport expiry date" := Passportexpirydate;
        Entity."Passport/ID Number (2)" := "Passport/IDNumber(2)";
        Entity."Passport/ID Country (2)" := "Passport/IDCountry(2)";
        Entity."Passport/ID Issue Date (2)" := "Passport/IDIssueDate(2)";
        Entity."Passport/ID Expiry Date (2)" := "Passport/IDExpiryDate(2)";
        Entity."Date of Birth" := DateofBirth;
        Entity.Nationality := Nationality;
        Entity."Bank Swift Code" := BankSwiftCode;
        Entity."Bank Sort Code" := BankSortCode;
        Entity.Inactive :=Inactive;
        Entity."NI Number" := NINumber;
        Entity.Profession := Profession;
        Entity."Owner No." := "OwnerNo.";
        Entity.Profession := Profession;
        Entity.Manager := Manager;
        Entity.Administrator := Administrator;
        Entity."First Partition Code" := FirstPartitionCode;
        Entity."Formal Name" := FormalName;
        Entity."Last Risk Assessment Date" := LastRiskAssessmentDate;
        Entity."Next Risk Assessment Due Date" := NextRiskAssessmentDueDate;
        Entity."Current Risk Rating" := CurrentRiskRating;
        Entity."Current Risk Weight" := CurrentRiskWeight;
        Entity."Address 1" := Address1;
        Entity."Address 2" := Address2;
        Entity."Address 3" := Address3;
        Entity.City := City;
        Entity."Post Code" := PostCode;
        Entity.County := County;
        Entity."Country Code" := CountryCode;

        //Entity.Residence := Residence;
        //CASE Personal_Corporate OF
        //Personal_Corporate::Personal : Entity."Personal/Corporate" := Entity."Personal/Corporate"::Personal;
        // Personal_Corporate::Corporate : Entity."Personal/Corporate":= Entity."Personal/Corporate"::Corporate;
        //END;

      //  Entity.Jurisdiction := Jurisdiction;
       // Entity."Country of Incorporation" := CountryofIncorporation;
       // Entity."Date of incorp./formation" := DateOfIncorporation;

        Entity.MODIFY(TRUE);
      END;
    END;

    [External]
    PROCEDURE UpdateOwner@1000000011(Owner_Type@1000000000 : 'Corporate,Personal';No@1000000001 : Text[50];Type@1000000002 : Text[50];Surname@1000000003 : Text[50];Forename_s@1000000004 : Text[50];Anonimised_Name@1000000005 : Text[50];Director@1000000006 : Text[50];Status_Code@1000000007 : Text[50];Currency_Code@1000000008 : Text[50];Search_Name@1000000009 : Text[50];Last_Review_Completed@1000000010 : Date;Next_Review_Due@1000000011 : Date;Closed@1000000012 : Boolean;Formal_Name@1000000013 : Text[50];External_Reference_No@1000000014 : Text[50]);
    VAR
      Owner@1000000015 : Record 9068443;
    BEGIN
      Owner.RESET;
      Owner.SETRANGE("No.",No);
      Owner.SETRANGE("Owner Type",Owner_Type);
      IF Owner.FINDFIRST THEN BEGIN
        Owner.Type := Type;
        //Owner.VALIDATE(owner.Surname,Surname);
        Owner.Surname := Surname;
        Owner."Forename(s)" := Forename_s;
        Owner."Anonimised Name" := Anonimised_Name;
        Owner.Director := Director;
        Owner."Status Code" := Status_Code;
        Owner."Currency Code" := Currency_Code;
        Owner."Search Name" := Search_Name;
        Owner."Last Review Completed" := Last_Review_Completed;
        Owner."Next Review Due" := Next_Review_Due;
        Owner.Closed := Closed;
        Owner."Formal Name" := Formal_Name;
        Owner."External Reference No." := External_Reference_No;
        Owner.MODIFY(TRUE);
      END
    END;

    [External]
    PROCEDURE isEntityPEP@1000000009(pEntityNo@1000000000 : Code[20]) : Boolean;
    VAR
      EntityRec@1000000001 : Record 9068505;
    BEGIN
      IF EntityRec.GET(pEntityNo) AND EntityRec.PEP THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE PrepareClientDetails@1000000013(WSID@1000000000 : Text[100]);
    VAR
      ClientRec@1000000001 : Record 9068500;
      ClientDetails@1000000002 : Record 50001;
      TaxDetails@1000000003 : Record 9068793;
      i@1000000004 : Integer;
    BEGIN
      ClientRec.RESET;
      ClientRec.SETRANGE(Name,WSID);
      IF ClientRec.FINDFIRST THEN BEGIN
      //IF ClientRec.GET(pClientNo) THEN BEGIN
        ClientDetails.SETRANGE(WSID,WSID);
        ClientDetails.DELETEALL;


        ClientDetails.INIT;

        TaxDetails.SETRANGE("Record Type",TaxDetails."Record Type"::Client);
        TaxDetails.SETRANGE("Record No.",ClientRec."Client No.");
        IF TaxDetails.FINDSET THEN BEGIN
          i := 1;
          REPEAT
          ClientDetails."Client No." := ClientRec."Client No.";
          ClientDetails."Entry No." := i;
          ClientDetails.Type := ClientRec.Type;
          ClientDetails.Name := ClientRec.Name;
          ClientDetails."Proper law":= ClientRec."Proper law";
          ClientDetails.Jurisdiction:= ClientRec.Jurisdiction;
          ClientDetails."Tax Status" := ClientRec."Tax Status";
          ClientDetails.WSID := ClientRec.Name;
          ClientDetails."FATCA Account Classification" := ClientRec."FATCA Account Classification";
          ClientDetails."CRS Account Classification" := ClientRec."CRS Account Classification";


            ClientDetails."Tax Code" := TaxDetails."Tax Code";
            ClientDetails."Tax Return Country Code" := TaxDetails."Tax Return Country Code";
            ClientDetails."TIN Type" := TaxDetails."TIN Type";
            ClientDetails.TIN := TaxDetails.TIN;
            ClientDetails."Tax Category" := TaxDetails."Tax Category";
            //ClientDetails."Entry No." := i;
            ClientDetails.INSERT;
            i += 1;

          UNTIL TaxDetails.NEXT = 0;

        END ELSE BEGIN
          ClientDetails."Client No." := ClientRec."Client No.";
          ClientDetails."Entry No." := i;
          ClientDetails.Type := ClientRec.Type;
          ClientDetails.Name := ClientRec.Name;
          ClientDetails."Proper law":= ClientRec."Proper law";
          ClientDetails.Jurisdiction:= ClientRec.Jurisdiction;
          ClientDetails."Tax Status" := ClientRec."Tax Status";
          ClientDetails."FATCA Account Classification" := ClientRec."FATCA Account Classification";
          ClientDetails."CRS Account Classification" := ClientRec."CRS Account Classification";
          ClientDetails.WSID := ClientRec.Name;
          ClientDetails.INSERT;
        END;
        //ClientDetails.INSERT;
      END;
    END;

    [External]
    PROCEDURE PrepareEntityDetails@1000000015(WSID@1000000000 : Text[100]);
    VAR
      EntityRec@1000000001 : Record 9068505;
      EntityDetails@1000000002 : Record 50002;
      TaxDetails@1000000003 : Record 9068793;
      i@1000000004 : Integer;
      TempWSID@1000000005 : Text[100];
    BEGIN
      EntityRec.RESET;
      //TempWSID := 'Mr ' + WSID;
      EntityRec.SETFILTER("Formal Name",'%1','*' + WSID + '*');
      IF EntityRec.FINDFIRST THEN BEGIN
      //IF EntityRec.GET(pEntityNo) THEN BEGIN
        EntityDetails.SETRANGE(WSID,WSID);
        EntityDetails.DELETEALL;

        EntityDetails.INIT;

        TaxDetails.SETRANGE("Record Type",TaxDetails."Record Type"::Entity);
        TaxDetails.SETRANGE("Record No.",EntityRec."Entity No.");

        IF TaxDetails.FINDSET THEN BEGIN
          i := 1;
         REPEAT
            EntityDetails."Entity No." := EntityRec."Entity No.";
            EntityDetails."Entry No." := i;
            EntityDetails.Name := EntityRec.Name;
            EntityDetails."Name 2" := EntityRec."Name 2";
            EntityDetails."Personal/Corporate":= EntityRec."Personal/Corporate";
            EntityDetails.Jurisdiction:= EntityRec.Jurisdiction;
            EntityDetails.Residence := EntityRec.Residence;
            EntityDetails."Passport number" := EntityRec."Passport number";
            EntityDetails."Passport country of issue" := EntityRec."Passport country of issue";
            EntityDetails."Passport/ID Issue Date" := EntityRec."Passport/ID Issue Date";
            EntityDetails."Passport expiry date" := EntityRec."Passport expiry date";
            EntityDetails."Passport/ID Number (2)" := EntityRec."Passport/ID Number (2)";
            EntityDetails."Passport/ID Country (2)" := EntityRec."Passport/ID Country (2)";
            EntityDetails."Passport/ID Issue Date (2)" := EntityRec."Passport/ID Issue Date (2)";
            EntityDetails."Passport/ID Expiry Date (2)" := EntityRec."Passport/ID Expiry Date (2)";
            EntityDetails.WSID := EntityRec."Name 2" + ' ' + EntityRec.Name;

            EntityDetails."FATCA Classification" := EntityRec."FATCA Classification";
            EntityDetails."CRS Classification" := EntityRec."CRS Classification";



            EntityDetails."Tax Code" := TaxDetails."Tax Code";
            EntityDetails."Tax Return Country Code" := TaxDetails."Tax Return Country Code";
            EntityDetails."TIN Type" := TaxDetails."TIN Type";
            EntityDetails.TIN := TaxDetails.TIN;
            EntityDetails."Tax Category" := TaxDetails."Tax Category";
           // EntityDetails."Entry No." := i;
            EntityDetails.INSERT;
            i += 1;

          UNTIL TaxDetails.NEXT = 0;

        END ELSE BEGIN
            EntityDetails."Entity No." := EntityRec."Entity No.";
            EntityDetails."Entry No." := i;
            EntityDetails.Name := EntityRec.Name;
            EntityDetails."Name 2" := EntityRec."Name 2";
            EntityDetails."Personal/Corporate":= EntityRec."Personal/Corporate";
            EntityDetails.Jurisdiction:= EntityRec.Jurisdiction;
            EntityDetails.Residence := EntityRec.Residence;
            EntityDetails."Passport number" := EntityRec."Passport number";
            EntityDetails."Passport country of issue" := EntityRec."Passport country of issue";
            EntityDetails."Passport/ID Issue Date" := EntityRec."Passport/ID Issue Date";
            EntityDetails."Passport expiry date" := EntityRec."Passport expiry date";
            EntityDetails."Passport/ID Number (2)" := EntityRec."Passport/ID Number (2)";
            EntityDetails."Passport/ID Country (2)" := EntityRec."Passport/ID Country (2)";
            EntityDetails."Passport/ID Issue Date (2)" := EntityRec."Passport/ID Issue Date (2)";
            EntityDetails."Passport/ID Expiry Date (2)" := EntityRec."Passport/ID Expiry Date (2)";
            EntityDetails.WSID := EntityRec."Name 2" + ' ' + EntityRec.Name;

            EntityDetails."FATCA Classification" := EntityRec."FATCA Classification";
            EntityDetails."CRS Classification" := EntityRec."CRS Classification";

          EntityDetails.INSERT;
        END;
        //EntityDetails.INSERT;
      END;
    END;

    [EventSubscriber(Table,9068655,OnBeforeModifyEvent)]
    LOCAL PROCEDURE ONBeforeMODIFYClientAccTracker@1000000016(VAR Rec@1000000000 : Record 9068655;VAR xRec@1000000001 : Record 9068655;RunTrigger@1000000002 : Boolean);
    BEGIN
      xRec := Rec; //For Modification "Field x Completed By" UserID change
    END;

    PROCEDURE ContactIntegration@100000003(VAR Contact@100000000 : Record 5050);
    VAR
      HttpClient@100000022 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      DFXSetup@100000021 : Record 50006;
      HttpWebReqMgt@100000020 : Codeunit 1297;
      URL@100000019 : Text;
      JSON@100000018 : Text;
      TempBlob@100000017 : Record 99008535;
      InStr@100000016 : InStream;
      HttpResponseMsg@100000015 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpStatusCode@100000014 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000013 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      ApiResult@100000012 : Text;
      JObject@100000011 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";
      JSONMgt@100000010 : Codeunit 5459;
      body@100000009 : Text;
      JsonObject@100000008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      RecRef@100000007 : RecordRef;
      RecContact@100000006 : Record 5050;
      XMLParas@100000005 : Record 1235;
      OutStr@100000004 : OutStream;
      Country@100000003 : Record 9;
      TempContact@100000002 : Record 5050;
      TempBlob1@100000001 : Record 99008535;
    BEGIN
      DFXSetup.FINDFIRST;
      IF NOT DFXSetup."Create/Update Contact" THEN
        EXIT;
      URL := DFXSetup."Update URL" + Contact."E-Mail" + DFXSetup."Hapi Key";
      HttpWebReqMgt.Initialize(URL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"properties": [');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"property": "firstname",');
      OutStr.WRITETEXT('"value": "' + Contact."First Name" + '"');
      OutStr.WRITETEXT('},');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"property": "lastname",');
      OutStr.WRITETEXT('"value": "' + Contact.Surname + '"');
      OutStr.WRITETEXT('},');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"property": "website",');
      OutStr.WRITETEXT('"value": "http://hubspot.com"');
      OutStr.WRITETEXT('},');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"property": "company",');
      OutStr.WRITETEXT('"value": "' + Contact."Company Name" + '"');
      OutStr.WRITETEXT('},');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"property": "phone",');
      OutStr.WRITETEXT('"value": "' + Contact."Phone No."+ '"');
      OutStr.WRITETEXT('},');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"property": "address",');
      OutStr.WRITETEXT('"value": "' + Contact.Address +'"');
      OutStr.WRITETEXT('},');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"property": "city",');
      OutStr.WRITETEXT('"value": "' + Contact.City + '"');
      OutStr.WRITETEXT('},');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"property": "state",');
      OutStr.WRITETEXT('"value": ""');
      OutStr.WRITETEXT('},');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"property": "zip",');
      OutStr.WRITETEXT('"value": "' + Contact."Post Code" + '"');
      OutStr.WRITETEXT('}');
      OutStr.WRITETEXT(']');
      OutStr.WRITETEXT('}');

      HttpWebReqMgt.AddBodyBlob(TempBlob);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      RecContact.RESET;
      RecContact.COPY(Contact);
      RecRef.OPEN(5050);
      RecRef.GET(RecContact.RECORDID);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
      ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
      JSONMgt.InitializeFromString(ApiResult);
      JSONMgt.SelectTokenFromRoot('govtRequestDTO');
      JSON:=JSONMgt.GetValue('Irn');
      JSONMgt.GetValueAndSetToRecFieldNo(RecRef,'Irn',16627);
      RecRef.MODIFY;
      END
    END;

    [EventSubscriber(Table,5050,OnAfterOnModify,"",Skip,Skip)]
    PROCEDURE SubscriberUpdateContact@100000001(VAR Contact@100000000 : Record 5050;xContact@100000001 : Record 5050);
    VAR
      HttpClient@100000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      DFXSetup@100000003 : Record 50006;
      HttpWebReqMgt@100000004 : Codeunit 1297;
      URL@100000005 : Text;
      JSON@100000006 : Text;
      TempBlob@100000007 : Record 99008535;
      InStr@100000008 : InStream;
      HttpResponseMsg@100000009 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpStatusCode@100000010 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      ApiResult@100000012 : Text;
      JObject@100000013 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";
      JSONMgt@100000014 : Codeunit 5459;
      body@100000015 : Text;
      JsonObject@100000016 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      RecRef@100000017 : RecordRef;
      RecContact@100000018 : Record 5050;
      XMLParas@100000019 : Record 1235;
      OutStr@100000020 : OutStream;
      Country@100000021 : Record 9;
      TempContact@100000022 : Record 5050;
      TempBlob1@100000023 : Record 99008535;
    BEGIN
      {
      IF Contact."E-Mail" = '' THEN
        EXIT;

      ContactIntegration(Contact);
       }
    END;

    LOCAL PROCEDURE OAuthValidationContact@100000008() APIToken : Text;
    VAR
      HttpClient@100000000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      HttpResponse@100000001 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpContent@100000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      HttpHeaders@100000003 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpHeaders";
      Url@100000004 : Text;
      JsonObj@100000005 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";
      JsonToken@100000006 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JToken";
      Token@100000007 : Text;
      ClientID@100000008 : Text;
      Secret@100000009 : Text[250];
      BaseTxt@100000010 : Text[1024];
      APITokenLocal@100000011 : Text;
      HttpWebReqMgt@100000012 : Codeunit 1297;
      APPID@100000013 : Text;
      TempBlob@100000014 : TEMPORARY Record 99008535;
      istream@100000015 : InStream;
      HttpStatusCode@100000017 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000016 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      ApiResult@100000019 : Text;
      JObject@100000018 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";
      JSONMgt@100000020 : Codeunit 5459;
      JSON@100000021 : Text;
    BEGIN
      Url := 'https://app.hubspot.com/oauth/';
      ClientID := 'ba701976-f6ed-47c7-9b9a-695142dede5c';
      Secret := 'c09eccbe-441a-4d08-83c3-87820c44b2df';
      APPID := '238597';
      //https://app.hubspot.com/oauth/authorize?client_id=ba701976-f6ed-47c7-9b9a-695142dede5c&redirect_uri=https://app.hubspot.com/&scope=contacts

      //https://app.hubspot.com/oauth/authorize?client_id=ba701976-f6ed-47c7-9b9a-695142dede5c&redirect_uri=https://app.hubspot.com/&scope=contacts


      BaseTxt := Url + 'authorize?client_id=' + ClientID + '&redirect_uri=https://app.hubspot.com/&scope=contacts';
      //'&client_secret=' + lSecret + '&scope=https://graph.microsoft.com/.default';
      //HttpContent.clear();
      //HttpContent.WriteFrom(BaseTxt);
      //HttpHeaders.init;
      //HttpHeaders.Clear();
      //HttpContent.GetHeaders(HttpHeaders);
      //HttpHeaders.Remove('Content-Type');
      //HttpHeaders.Add('Content-Type', 'application/x-www-form-urlencoded');
      //HttpContent.GetHeaders(HttpHeaders);
      //if HttpClient.Post(Url, HttpContent, HttpResponse) then begin
        //HttpResponse.Content.ReadAs(Token);
        //JsonObj.ReadFrom(Token);
        //JsonObj.Get('access_token', lJsonToken);
       // JsonToken.WriteTo(APITokenLocal);
       // APITokenLocal := DELCHR(APITokenLocal, '=', '"');
       // MESSAGE(APITokenLocal);
       // EXIT(APITokenLocal);

      //end
      //else
        //error('API Token Request failed');
        Url := 'https://app.hubspot.com/238597/oauth2/token';
        ClientID := 'ba701976-f6ed-47c7-9b9a-695142dede5c';
      Secret := 'c09eccbe-441a-4d08-83c3-87820c44b2df';
      APPID := '238597';
      //https://app.hubspot.com/oauth/authorize?client_id=ba701976-f6ed-47c7-9b9a-695142dede5c&redirect_uri=https://app.hubspot.com/&scope=contacts

      //https://app.hubspot.com/oauth/authorize?client_id=ba701976-f6ed-47c7-9b9a-695142dede5c&redirect_uri=https://app.hubspot.com/&scope=contacts


      //BaseTxt := Url + 'authorize?client_id=' + ClientID + '&redirect_uri=https://app.hubspot.com/&scope=contacts';



      BaseTxt := 'grant_type=client_credentials'+ '&client_id=' + ClientID + '&client_secret=' + Secret + '&redirect_uri=https://app.hubspot.com/&scope=contacts';

      BaseTxt := 'https://app.hubspot.com/oauth/authorize?client_id=ba701976-f6ed-47c7-9b9a-695142dede5c' + ClientID + '&client_secret=' + Secret + '&redirect_uri=https://app.hubspot.com/&scope=contacts';

      BaseTxt := 'https://app.hubspot.com/oauth/authorize?client_id=ba701976-f6ed-47c7-9b9a-695142dede5c&redirect_uri=https://app.hubspot.com/&scope=contacts';

      BaseTxt := 'https://mytenant.onmicrosoft.com/fbff8dbb-5212-4e05-ba78-54078da0fa62';


      //BaseTxt :='https://app.hubspot.com/oauth/authorize' + '?client_id=${encodeURIComponent(ba701976-f6ed-47c7-9b9a-695142dede5c)}' + '&scope=${encodeURIComponent(contacts)}' + '&redirect_uri=${encodeURIComponent(https://app.hubspot.com)}';

      TempBlob.WriteAsText(BaseTxt, TEXTENCODING::UTF8);
      TempBlob.Blob.CREATEINSTREAM(istream, TEXTENCODING::UTF8);
      //MESSAGE(FORMAT(istream));

      HttpWebReqMgt.Initialize(BaseTxt);
      HttpWebReqMgt.SetMethod := 'POST';
      HttpWebReqMgt.SetContentType('application/x-www-form-urlencodee');
      //HttpWebReqMgt.ContentLength := BaseTxt;

      IF HttpWebReqMgt.GetResponse(istream,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);
        JSONMgt.SelectTokenFromRoot('govtRequestDTO');
        JSON:=JSONMgt.GetValue('');
      END;

      MESSAGE(JSON);
        {
      IF FORMAT(HttpWebResponse.StatusCode) = 'OK' THEN
      BEGIN
        StreamReader := StreamReader.StreamReader(HttpWebResponse.GetResponseStream);
        JSonString := StreamReader.ReadToEnd;

        lResponse.Content().ReadAs(Token);
                  lJsonObj.ReadFrom(Token);
                  lJsonObj.Get('access_token', lJsonToken);
                  lJsonToken.WriteTo(APITokenLocal);
                  APITokenLocal := DelChr(APITokenLocal, '=', '"');
                  Exit(APITokenLocal);
        }
    END;

    LOCAL PROCEDURE SetRequestStream@100000004(VAR HttpWebRequest@100000000 : DotNet "'System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.WebRequestHandler";VAR String@100000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.StringNormalizationExtensions");
    BEGIN
      {
      StreamWriter := StreamWriter.StreamWriter(HttpWebRequest.GetRequestStream);
      StreamWriter.Write(String);
      StreamWriter.Close;
      StreamWriter.Dispose;
      }
    END;

    [EventSubscriber(Table,156,OnAfterModifyEvent)]
    PROCEDURE "ONModifyResourceNo."@100000006(VAR Rec@100000000 : Record 156;VAR xRec@100000001 : Record 156;RunTrigger@100000002 : Boolean);
    VAR
      DFXSetup@100000005 : Record 50006;
      Resource@100000004 : Record 156;
      SalesPerson@100000003 : Record 13;
    BEGIN
      IF Rec."Resource Group No." =  xRec."Resource Group No." THEN
        EXIT;

      DFXSetup.GET;

      Resource.SETRANGE("No.",DFXSetup."Resource Group No.");
      IF Resource.FINDFIRST THEN BEGIN
        IF SalesPerson.GET(Resource."No.") THEN
          EXIT;
        SalesPerson.INIT;
        SalesPerson.Code := Resource."No.";
        SalesPerson.Name := COPYSTR(Resource."Name 2"+ ' '+ Resource.Name,1,MAXSTRLEN(SalesPerson.Name));
        SalesPerson.INSERT;
      END;
    END;

    [External]
    PROCEDURE UpdateNavFromLF@100000005(LFMsg_Payload@1000000000 : Text) : Text;
    VAR
      FunctionName@1000000002 : Code[20];
      TotalCount@1000000003 : Integer;
      RecordsToParse@1000000004 : Integer;
    BEGIN
      IF NOT JSONMgt.InitializeFromString(LFMsg_Payload) THEN
        ERROR('Failed to Initialize JSON payload please ensure it''s correctly formed. https://jsonlint.com/');

      IF NOT JSONMgt.SelectTokenFromRoot('Action') THEN
        ERROR('The Node Action has not been defined. Please refer to the JSON documentation');

      FunctionName := JSONMgt.GetValue('Function');

      IF NOT JSONMgt.SelectTokenFromRoot('Records') THEN
        ERROR('The Node Records has not been defined. Please refer to the JSON documentation');

      CLEARLASTERROR;

      TotalCount := JSONMgt.GetCount;
      FOR RecordsToParse := 0 TO TotalCount DO
        IF JSONMgt.SelectItemFromRoot('Records', RecordsToParse) THEN
          CASE UPPERCASE(FORMAT(FunctionName)) OF
            'UPDATE'     :ParseLFUpdate(JSONMgt.WriteObjectToString, UPPERCASE(FunctionName));

           END;

      EXIT('SUCCESS');
    END;

    LOCAL PROCEDURE ParseLFUpdate@100000010(Json@1000000000 : Text;Function@1000000003 : Code[20]) : Boolean;
    VAR
      RecordRef@1000000002 : RecordRef;
      LFMessagesTemp@1000000004 : TEMPORARY Record 9069241;
    BEGIN
      IF NOT JSONMgt.InitializeFromString(Json) THEN
        EXIT(FALSE);

      WITH LFMessagesTemp DO BEGIN
        CLEAR(LFMessagesTemp);
        RecordRef.GETTABLE(LFMessagesTemp);
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'AttachedToType', FIELDNO("Attached To Type"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'AttachedToNo', FIELDNO("Attached To No"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'LFEntryID', FIELDNO("LaserFiche Entry ID"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'FileName', FIELDNO("File Name"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'DocDescription', FIELDNO("Document Description"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'LFDocType', FIELDNO("LaserFiche Document Type"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'LFDocSubType', FIELDNO("LaserFiche Document Sub Type"));
        RecordRef.SETTABLE(LFMessagesTemp);
        AddLFMessageRecord(LFMessagesTemp, "Function");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetNAVDocType@100000012(LFDoctype@1000000000 : Text[150]) : Code[10];
    VAR
      LFDocTypeRecord@1000000001 : Record 9069244;
    BEGIN
      LFDocTypeRecord.SETRANGE("LaserFiche Doc Type", LFDoctype);
      IF LFDocTypeRecord.FINDFIRST THEN
        EXIT(LFDocTypeRecord."NAV Doc Type");

      EXIT('');
    END;

    LOCAL PROCEDURE GetNAVDocSubType@1000000019(LFDocType@1000000000 : Text[150];LFDocSubType@1000000001 : Text[150]) : Code[20];
    VAR
      LFDocSubTypeRecord@1000000002 : Record 9069245;
    BEGIN
      LFDocSubTypeRecord.SETRANGE("LaserFiche Doc Type", LFDocType);
      LFDocSubTypeRecord.SETRANGE("LaserFiche Sub Doc Type", LFDocSubType);
      IF LFDocSubTypeRecord.FINDFIRST THEN
        EXIT(LFDocSubTypeRecord."NAV Doc Sub Type");

      EXIT('');
    END;

    LOCAL PROCEDURE AddLFMessageRecord@100000011(LaserFicheTemp@1000000000 : Record 9069241;Function@1000000002 : Code[20]);
    VAR
      LFMessages@1000000001 : Record 9069241;
    BEGIN
      LFMessages.INIT;
      LFMessages.TRANSFERFIELDS(LaserFicheTemp);
      LFMessages."Company Name" := COMPANYNAME;
      LFMessages."Inserted By" := USERID;
      LFMessages."Inserted Date" := TODAY;
      LFMessages."Document Type" := GetNAVDocType(LFMessages."LaserFiche Document Type");
      LFMessages."Document Sub Type" := GetNAVDocSubType(LFMessages."LaserFiche Document Type", LFMessages."LaserFiche Document Sub Type");

      CASE "Function" OF
          'CREATENEW' : LFMessages."LaserFiche Status" := LFMessages."LaserFiche Status"::New;
          'UPDATE'    : LFMessages."LaserFiche Status" := LFMessages."LaserFiche Status"::Update;
          'DELETE'    : LFMessages."LaserFiche Status" := LFMessages."LaserFiche Status"::Deleted;
        END;

      IF LFMessages.INSERT(TRUE) THEN
          UpdateIntoCorrespondenceStore(LFMessages);
    END;

    LOCAL PROCEDURE UpdateIntoCorrespondenceStore@1000000023(LFMsg@1000000000 : Record 9069241);
    VAR
      CorrespondenceStore@1000000001 : Record 9068660;
      DocMgmntCU@1000000002 : Codeunit 9068511;
      DocType@1000000003 : Code[10];
    BEGIN
      CorrespondenceStore.RESET;
      CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFMsg."LaserFiche Entry ID");
      IF CorrespondenceStore.FINDFIRST THEN
        BEGIN
            CorrespondenceStore."No." := LFMsg."Attached To No";
            CorrespondenceStore."Document Type" := LFMsg."Document Type";
            CorrespondenceStore."Document Sub Type" := LFMsg."Document Sub Type";
            CorrespondenceStore."LaserFiche Entry ID" := LFMsg."LaserFiche Entry ID";
            CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
            CorrespondenceStore."Document Inserted By" := 'LASERFICHE';
            CorrespondenceStore."Document Date" := TODAY;
            CorrespondenceStore.FileName := LFMsg."File Name";
            CorrespondenceStore.Subject := LFMsg."Document Description";
            CorrespondenceStore."MS Office Doc Type" := LFMsg."File Type";

            IF LFMsg."Attached To Type" = LFMsg."Attached To Type"::Client THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
            IF LFMsg."Attached To Type" = LFMsg."Attached To Type"::Entity THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
            IF LFMsg."Attached To Type" = LFMsg."Attached To Type"::Resource THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
            IF LFMsg."Attached To Type" = LFMsg."Attached To Type"::"Client Owner" THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

            //CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");

            IF GetDocType(LFMsg."File Name", DocType) THEN
              CorrespondenceStore."MS Office Doc Type" := DocType;


            IF CorrespondenceStore.MODIFY(TRUE) THEN BEGIN
              UploadedToLaserFiche(LFMsg."Entry No", LFMsg."LaserFiche Entry ID",'UPDATE');
              END
        END;
    END;

    PROCEDURE UploadedToLaserFiche@1000000020(EntryNo@1000000000 : Integer;LFUID@1000000002 : Integer;Mode@1000000005 : Code[10]);
    VAR
      LFMessages@1000000001 : Record 9069241;
      LaserFicheMessArchive@1000000003 : Record 9069242;
      CorrespondenceStore@1000000004 : Record 9068660;
    BEGIN
      IF LFMessages.GET(EntryNo) THEN BEGIN
        LFMessages.Status := LFMessages.Status::Uploaded;
        LFMessages."LaserFiche Entry ID"  := LFUID;
        LFMessages.MODIFY;
      END;

      IF Mode = 'UPDATE' THEN BEGIN
        CorrespondenceStore.SETRANGE("Document GUID",LFMessages."NAV Document GUID");
        IF CorrespondenceStore.FINDFIRST THEN BEGIN
           CorrespondenceStore."LaserFiche Entry ID" := LFMessages."LaserFiche Entry ID";
           CorrespondenceStore.MODIFY;

           LaserFicheMessArchive.INIT;
           LaserFicheMessArchive.TRANSFERFIELDS(LFMessages);
           LaserFicheMessArchive.Status := LaserFicheMessArchive.Status::Success;
           LaserFicheMessArchive.INSERT(TRUE);

           LFMessages.DELETE;
        END
      END ELSE BEGIN
             LaserFicheMessArchive.INIT;
             LaserFicheMessArchive.TRANSFERFIELDS(LFMessages);
             LaserFicheMessArchive.Status := LaserFicheMessArchive.Status::Success;
             LaserFicheMessArchive.INSERT(TRUE);

             LFMessages.DELETE;
           END;
    END;

    LOCAL PROCEDURE GetDocType@100000013(FileName@1000000000 : Text;VAR Type@1000000001 : Code[10]) Success : Boolean;
    VAR
      L@1000000003 : Integer;
      P@1000000002 : Integer;
    BEGIN
      L := STRLEN (FileName);
      IF L < 5 THEN EXIT;
      P := L;
      REPEAT
        P := P - 1;
      UNTIL (COPYSTR(FileName,P,1) = '.') OR (P = 1);
      IF (P = 1) OR ((L - P) >10) THEN
        EXIT(FALSE);
      Type := COPYSTR(FileName,P,(L-(P-1)));
    END;

    [External]
    PROCEDURE UpdatePassports@1000000017(EntityNumber@1000000002 : Code[20];FirstSecond@1000000000 : 'First,Second';PassportNumber@1000000001 : Text[50];IssueDate@1000000003 : Date;ExpiryDate@1000000004 : Date;CountryIssued@1000000005 : Code[10]);
    VAR
      EntityRec@1000000006 : Record 9068505;
    BEGIN
      IF NOT EntityRec.GET(EntityNumber) THEN
        EXIT;

      CASE FirstSecond OF
        FirstSecond::First : BEGIN
          EntityRec."Passport number" := PassportNumber;
          EntityRec."Passport/ID Issue Date" := IssueDate;
          EntityRec."Passport expiry date" := ExpiryDate;
          EntityRec."Passport country of issue" := CountryIssued;
        END;
        FirstSecond::Second : BEGIN
          EntityRec."Passport/ID Number (2)" := PassportNumber;
          EntityRec."Passport/ID Issue Date (2)" := IssueDate;
          EntityRec."Passport/ID Expiry Date (2)" := ExpiryDate;
          EntityRec."Passport/ID Country (2)" := CountryIssued;
        END;
      END;

      EntityRec.MODIFY;
    END;

    [External]
    PROCEDURE InsertAgreementRegister@1000000018(AgreementCode@1000000002 : Code[20];AgreementAttachedType@1000000003 : 'Prospect,Contact,Owner,,,Potential Client,,,Client,,,Entity,Intermediary,Resource';"AttachedToNo."@1000000004 : Code[20];DateofAgreement@1000000005 : Date;Barcode@100000000 : Text;Agreement_Caption_1@100000001 : Boolean;Agreement_Caption_2@100000002 : Boolean;Agreement_Caption_3@100000004 : Boolean;Agreement_Caption_4@100000003 : Boolean;Agreement_Caption_5@100000006 : Boolean;Agreement_Caption_6@100000008 : Boolean;Agreement_Caption_7@100000007 : Boolean;Agreement_Caption_8@100000005 : Boolean;Agreement_Caption_9@100000010 : Boolean;Agreement_Caption_10@100000009 : Boolean;Freeze_Concent@100000011 : ' ,Yes,No';Exception@100000012 : Text);
    VAR
      AgreementSetup@1000000001 : Record 9070210;
      AgreementRegister@1000000000 : Record 9070211;
    BEGIN
      AgreementSetup.RESET;
      AgreementSetup.SETRANGE("Agreement Code",AgreementCode);
      AgreementSetup.SETRANGE("Agreement Attached Type",AgreementAttachedType);
      IF AgreementSetup.FINDFIRST THEN
        BEGIN
          AgreementRegister."Agreement Code" := AgreementSetup."Agreement Code";
          AgreementRegister."Agreement Attached Type" := AgreementSetup."Agreement Attached Type";
          AgreementRegister.VALIDATE("Attached To No.", "AttachedToNo.");
          AgreementRegister."Date of Agreement" := DateofAgreement;
          AgreementRegister.Barcode := Barcode;
          AgreementRegister."Agreement Caption 1" := Agreement_Caption_1;
          AgreementRegister."Agreement Caption 2" := Agreement_Caption_2;
          AgreementRegister."Agreement Caption 3" := Agreement_Caption_3;
          AgreementRegister."Agreement Caption 4" := Agreement_Caption_4;
          AgreementRegister."Agreement Caption 5" := Agreement_Caption_5;
          AgreementRegister."Agreement Caption 6" := Agreement_Caption_6;
          AgreementRegister."Agreement Caption 7" := Agreement_Caption_7;
          AgreementRegister."Agreement Caption 8" := Agreement_Caption_8;
          AgreementRegister."Agreement Caption 9" := Agreement_Caption_9;
          AgreementRegister."Agreement Caption 10" := Agreement_Caption_10;
          AgreementRegister."Freeze Concent" := Freeze_Concent;
          AgreementRegister.Exception := Exception;
          AgreementRegister.INSERT;
        END
      ELSE
      ERROR('AgreementSetup does not contain the specified AgreementCode (%1) and AttachedType (%2)',AgreementCode,AgreementAttachedType);
    END;

    [External]
    PROCEDURE StartWorkflow@1000000024(WorkflowCode@1000000005 : Code[20];AttachedToNo@1000000004 : Code[20];AttachedToType@1000000000 : ' ,Client,Prospect,Client Owner,Intermediary,Entity,Resource';Responsible@1000000003 : Code[20];AdditionalDescription@1000000016 : Text[250]);
    VAR
      WorkflowBlueprint@1000000002 : Record 9073640;
      TWMWorkflow@1000000007 : Record 9073608;
      TWMWorkflow2@1000000014 : Record 9073608;
      ClientRec@1000000012 : Record 9068500;
      ClientTypeRec@1000000013 : Record 9068501;
      Resource@1000000010 : Record 156;
      WorkflowResource@1000000011 : Record 9073591;
      CompletedWorkflow@1000000015 : Record 9073645;
      WorkflowManagement@1000000006 : Codeunit 9073581;
      StartWorkflow@1000000008 : Codeunit 9073590;
      WorkflowSetup@1000000009 : Record 9073592;
      CreateBlueprint@1000000001 : Codeunit 9073601;
    BEGIN

      WorkflowSetup.GET(WorkflowCode);
      WorkflowBlueprint.SETRANGE("Workflow Code",WorkflowCode);
      IF NOT WorkflowBlueprint.FINDLAST THEN BEGIN
        CreateBlueprint.ShadowActivity(WorkflowSetup);
        COMMIT;
        WorkflowBlueprint.FINDLAST;
      END;

      IF Responsible <> '' THEN
        Resource.GET(Responsible);

      WorkflowResource.GET(Resource."No.");

      IF WorkflowBlueprint."Only one per Attached to Type" THEN BEGIN
        TWMWorkflow.SETCURRENTKEY("Workflow Code","Attached To No.");
        TWMWorkflow.SETRANGE("Attached To Type", WorkflowBlueprint."Attached To Type");
        TWMWorkflow.SETRANGE("Workflow Code", WorkflowBlueprint."Workflow Code");
        TWMWorkflow.SETRANGE("Attached To No.",AttachedToNo);
        IF TWMWorkflow.FINDFIRST THEN
          ERROR('There is already a ''%1'' process in progress for %2 %3. Only one can be in progress at a time.',
            WorkflowBlueprint.Description, WorkflowBlueprint."Attached To Type", AttachedToNo);
      END;

      TWMWorkflow.INIT;
      TWMWorkflow."Template Version No." := WorkflowBlueprint."Version No.";
      TWMWorkflow."Start Date" := TODAY;
      TWMWorkflow.Author := Resource."No.";
      TWMWorkflow."Created On" := TODAY;
      TWMWorkflow."Created At" := TIME;
      TWMWorkflow."Workflow Code" := WorkflowCode;
      TWMWorkflow.Description := WorkflowSetup.Description;
      TWMWorkflow."Abort Allowed" := WorkflowBlueprint."Abort Allowed";
      TWMWorkflow."Attached To Type" := AttachedToType;
      TWMWorkflow.VALIDATE("Attached To No.",AttachedToNo);
      TWMWorkflow."Workflow Type" := WorkflowSetup."Workflow Type";
      TWMWorkflow."Additional Description" := AdditionalDescription;

      IF WorkflowBlueprint."Med Importance Update" <> 0 THEN BEGIN
        TWMWorkflow."Medium Importance Update At" := StartWorkflow.CalculateUpdateDate(
          WorkflowBlueprint."Medium Unit of Measure", WorkflowBlueprint."Med Importance Update");
      END;

      IF WorkflowBlueprint."High Importance Update" <> 0 THEN BEGIN
        TWMWorkflow."High Importance Update At" := StartWorkflow.CalculateUpdateDate(
          WorkflowBlueprint."High Unit of Measure", WorkflowBlueprint."High Importance Update");
      END;

      IF AttachedToType = AttachedToType::Client THEN
        IF ClientRec.GET(AttachedToNo) THEN BEGIN
          TWMWorkflow."Client Type" := ClientRec.Type;
          IF ClientTypeRec.GET(ClientRec.Type) THEN
            TWMWorkflow."Client Type Class" := ClientTypeRec.Type;
        END;

      TWMWorkflow.Responsible := Resource."No.";

      TWMWorkflow."Work Type Code" := WorkflowBlueprint."Work Type Code";

      TWMWorkflow."Date Enabled":= TODAY;
      IF TWMWorkflow2.FINDLAST  THEN
        TWMWorkflow."Entry No." := TWMWorkflow2."Entry No." + 1
      ELSE
        TWMWorkflow."Entry No." := 1;

      IF CompletedWorkflow.FINDLAST THEN
        IF CompletedWorkflow."Entry No." >= TWMWorkflow."Entry No." THEN
          TWMWorkflow."Entry No." := CompletedWorkflow."Entry No." + 1;

      TWMWorkflow.INSERT;

      StartWorkflow.CreateFirstEvents(TWMWorkflow);
    END;

    [External]
    PROCEDURE CreateUDF@1000000021(LinkedTo@1000000000 : ' ,Client,Entity,Prospect,Owner,Job,Bank,Loan,Agent,Property,Miscellaneous Asset,Yacht,Aviation,Intellectual Property,Life Assurance,Quoted Investment,Unquoted Investment,Potential Client,Borrowing and Lending,Portfolio,Payments/Receipts,Resource,Safe Custody,Introducer,Distribution,Addition';LinkedToNo@1000000001 : Code[20];UDFCode@1000000002 : Code[20];Data@1000000003 : Text[250];EntityNo@1000000004 : Code[20];SubLinkedTo@1000000005 : ' ,Bank,Loan,Agent,Property,Miscellaneous Asset,Yacht,Aviation,Intellectual Property,Life Assurance,Quoted Investment,Unquoted Investment,Potential Client,Borrowing and Lending,Portfolio,Payments/Receipts,Resource,Safe Custody,Distribution,Addition';SubLinkedToNo@1000000006 : Code[20];EffectiveFrom@1000000007 : Date;EffectiveTo@1000000008 : Date;SortOrder@1000000009 : Integer);
    VAR
      UserDefinedField@1000000010 : Record 9068255;
      UserDefinedFieldData@1000000011 : Record 9068256;
      Owner@1000000012 : Record 9068443;
      Prospect@1000000013 : Record 9068440;
      Entity@1000000014 : Record 9068505;
    BEGIN
      UserDefinedField.SETRANGE(Code,UDFCode);
      IF UserDefinedField.FINDFIRST THEN;
      IF UserDefinedField.ISEMPTY THEN
        ERROR('UDF Code not found');

      UserDefinedFieldData.INIT;
      UserDefinedFieldData.VALIDATE(Code,UserDefinedField.Code);

      IF EntityNo <> '' THEN BEGIN
         IF NOT Entity.GET(EntityNo) THEN
           ERROR('Entity is not found');

        UserDefinedFieldData."Entity No." := EntityNo;

        Owner.SETRANGE("Entity No.",EntityNo);
        IF Owner.FINDFIRST THEN BEGIN
          UserDefinedFieldData."Linked To" := UserDefinedFieldData."Linked To"::Owner;
          UserDefinedFieldData."Linked To No." := Owner."No.";
        END;
        Prospect.SETRANGE("Entity No.",EntityNo);
        IF Prospect.FINDFIRST THEN BEGIN
          UserDefinedFieldData."Linked To" := UserDefinedFieldData."Linked To"::Prospect;
          UserDefinedFieldData."Linked To No." := Prospect."No.";
        END;
        IF UserDefinedFieldData."Linked To No." = '' THEN BEGIN
          UserDefinedFieldData."Linked To" := UserDefinedFieldData."Linked To"::Entity;
          UserDefinedFieldData."Linked To No." := EntityNo;
        END;
      END ELSE BEGIN
        CASE LinkedTo OF
          LinkedTo::Owner : BEGIN
            Owner.RESET;
            IF Owner.GET(LinkedToNo) THEN BEGIN
              UserDefinedFieldData."Linked To" := UserDefinedFieldData."Linked To"::Owner;
              UserDefinedFieldData."Linked To No." := Owner."No.";
              UserDefinedFieldData."Entity No." := Owner."Entity No.";
            END;
          END;
          LinkedTo::Prospect : BEGIN
            Prospect.RESET;
            IF Prospect.GET(LinkedToNo) THEN BEGIN
              UserDefinedFieldData."Linked To" := UserDefinedFieldData."Linked To"::Prospect;
              UserDefinedFieldData."Linked To No." := Prospect."No.";
              UserDefinedFieldData."Entity No." := Prospect."Entity No.";
            END;
          END;
        END;
      END;

      IF UserDefinedFieldData."Linked To No." = '' THEN
        ERROR('Linked To No. is not found');
      UserDefinedFieldData.VALIDATE("Sub Linked to",SubLinkedTo);
      UserDefinedFieldData.VALIDATE("Sub Linked To No.",SubLinkedToNo);
      UserDefinedFieldData.INSERT(TRUE);
      UserDefinedFieldData.VALIDATE(Data,Data);
      IF SortOrder <> 0 THEN
        UserDefinedFieldData."Sort Order" := SortOrder;
      UserDefinedFieldData."Effective From" := EffectiveFrom;
      UserDefinedFieldData."Effective To" := EffectiveTo;
      UserDefinedFieldData.MODIFY(TRUE);
    END;

    [External]
    PROCEDURE InsertMeetingRegister@1000000022(ClientNo@1000000000 : Code[20];ClientName@1000000001 : Text[150];MeetingDate@1000000002 : Date;MeetingTime@1000000003 : Time;MeetingType@1000000004 : ' ,Directors,Shareholders';MeetingAddress@1000000005 : Code[10];Status@1000000006 : 'In Progress,Signed Off') "Meeting No." : Integer;
    VAR
      MeetingRegister@1000000007 : Record 9070258;
      No@1000000008 : Integer;
      DocMgmntCU@1000000009 : Codeunit 9068511;
      Type@1000000010 : ' ,Client,Entity,Prospect,Intermediary,Client Owner,Resource,,Dimension,,,External Bank Payment,,,,Potential Client';
      MeetingRegister2@1000000011 : Record 9070258;
      ClientRec@1000000012 : Record 9068500;
    BEGIN
      MeetingRegister.RESET;
      MeetingRegister.INIT;

      IF ClientNo <> '' THEN
         MeetingRegister.VALIDATE("Client No.",ClientNo)
      ELSE BEGIN
       ClientRec.SETFILTER(Name,'%1','@*' + ClientName + '*');
        IF ClientRec.FINDFIRST THEN
          MeetingRegister.VALIDATE("Client No.",ClientRec."Client No.");
      END;

      MeetingRegister."Meeting Date" := MeetingDate;
      MeetingRegister."Meeting Time" := MeetingTime;
      MeetingRegister."Meeting Type" := MeetingType;
      MeetingRegister.VALIDATE("Meeting Address",MeetingAddress);
      MeetingRegister.Status := Status;

      IF MeetingRegister.INSERT(TRUE) THEN
        EXIT(MeetingRegister."Meeting No.");
    END;

    [External]
    PROCEDURE SignOffTrackingPeriod@100000007(RecordType@100000004 : 'Prospect,Client Owner,Client,Entity,Resource';RecordNo@100000005 : Code[20];TaxCode@100000006 : Code[20];TaxReturnCountry@100000007 : Code[10];TaxReturnStartDate@100000008 : Date;TaxReturnEndDate@100000009 : Date;SignOffDate@100000021 : Date;ClosingDate@100000011 : Date) : Boolean;
    VAR
      NewEntryNo@100000000 : Integer;
      TaxTrackerMgt@100000001 : Codeunit 9068539;
      TempDate@100000002 : Date;
      SignOffDateMandatory@100000003 : Boolean;
      CheckSignoff@100000010 : Boolean;
      Text0001@100000018 : TextConst 'ENU=You do not have permission (%1) to sign off periods.';
      Text0002@100000017 : TextConst 'ENU=Are you sure you want to close the tracking period for this %1?';
      Text0003@100000016 : TextConst 'ENU=Please specify Period Closing Date.';
      Text0004@100000015 : TextConst 'ENU=There is already a completed Tax period on the %1.\ Do you wish to continue?';
      Text0005@100000014 : TextConst 'ENU=Cancelled';
      Text0006@100000013 : TextConst 'ENU=There is already a completed Tax period after the %1';
      Text0007@100000012 : TextConst 'ENU=Do you wish to create a new period?';
      SIGNOFFPERMISSION@100000019 : TextConst 'ENU=_CM-TAXTRACK SIGNOF';
      TaxTrackerCheck@100000020 : Record 9068801 SECURITYFILTERING(Filtered);
      Text0009@100000022 : TextConst 'ENU=There is already a Signed-Off Tracker with the same Tax Period';
      Text0008@100000023 : TextConst 'ENU=Tax Period is now closed. A new tax period based upon the old one has been created.';
      TaxTracker@100000024 : Record 9068801 SECURITYFILTERING(Filtered);
      NewTaxTracker@100000025 : Record 9068801 SECURITYFILTERING(Filtered);
      SubstanceRegister@100000026 : Record 9070255;
    BEGIN

      IF SignOffDate = 0D THEN
        ERROR('Please Specify signoff date');



      IF ClosingDate = 0D THEN
         ERROR(Text0003);

      TaxTrackerCheck.RESET;
      TaxTrackerCheck.SETRANGE("Record Type",RecordType);
      TaxTrackerCheck.SETRANGE("Record No.", RecordNo);
      TaxTrackerCheck.SETRANGE("Tax Code",TaxCode );
      TaxTrackerCheck.SETRANGE("Tax Return Country",TaxReturnCountry);
      TaxTrackerCheck.SETRANGE("Tax Return Start Date",TaxReturnStartDate);
      TaxTrackerCheck.SETRANGE("Tax Return End Date",TaxReturnEndDate);
      TaxTrackerCheck.SETRANGE("Tracker Period Status", TaxTrackerCheck."Tracker Period Status"::"Signed Off");
      IF TaxTrackerCheck.FINDFIRST THEN
        ERROR(Text0009);


      TaxTracker.RESET;
      TaxTracker.SETRANGE("Record Type",RecordType);
      TaxTracker.SETRANGE("Record No.", RecordNo);
      TaxTracker.SETRANGE("Tax Code",TaxCode );
      TaxTracker.SETRANGE("Tax Return Country",TaxReturnCountry);
      TaxTracker.SETRANGE("Tax Return Start Date",TaxReturnStartDate);
      TaxTracker.SETRANGE("Tax Return End Date",TaxReturnEndDate);
      IF TaxTracker.FINDFIRST THEN BEGIN
        TaxTracker."Tax Period Completed Date" := ClosingDate;
        TaxTracker."Tracker Period Status" := TaxTracker."Tracker Period Status" ::"Signed Off";
        TaxTracker."Period Closed by" := USERID;
        IF TaxTracker.MODIFY THEN BEGIN
         SignOffTaxTrackerCard(TaxTracker);
          IF CreateNewPeriod(TaxTracker,NewTaxTracker) THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE);

        END
      END ELSE
        ERROR('Tax Tracker Record not found');
    END;

    PROCEDURE CreateNewPeriod@100000014(PreviousTracker@1000000000 : Record 9068801 SECURITYFILTERING(Filtered);VAR TaxTracker@1000000002 : Record 9068801) : Boolean;
    VAR
      FrequencyFormula@1040000 : Text[5];
    BEGIN
      WITH PreviousTracker DO BEGIN
        //DO a check do we already have the next period
        TaxTracker.INIT;
        TaxTracker.TRANSFERFIELDS ( PreviousTracker );
        TaxTracker."Entry No." := 0;
        TaxTracker."Field 1" := 0D;
        TaxTracker."Field 2" := 0D;
        TaxTracker."Field 3" := 0D;
        TaxTracker."Field 4" := 0D;
        TaxTracker."Field 5" := 0D;
        TaxTracker."Field 6" := 0D;
        TaxTracker."Field 7" := 0D;
        TaxTracker."Field 8" := 0D;
        TaxTracker."Field 9" := 0D;
        TaxTracker."Field 10" := 0D;
        TaxTracker."Field 11" := 0D;
        TaxTracker."Field 12" := 0D;
        TaxTracker."Field 13" := 0D;
        TaxTracker."Field 14" := 0D;
        TaxTracker."Field 15" := 0D;
        TaxTracker."Field 16" := 0D;
        TaxTracker."Field 17" := 0D;
        TaxTracker."Tax Return Start Date" := 0D;
        TaxTracker."Tax Return End Date"   := 0D;
        TaxTracker."Tax Period Completed Date" := 0D;
        TaxTracker."Period Closed by" := '';
        TaxTracker."Tracker Period Status" := TaxTracker."Tracker Period Status"::"In Progress";
        TaxTracker."Tracker Status" := 0;

        FrequencyFormula := PreviousTracker.GetFrequencyCalcFormula(PreviousTracker.Frequency);

        IF FrequencyFormula <> '' THEN BEGIN
          IF PreviousTracker."Tax Return Start Date" <> 0D THEN
            TaxTracker."Tax Return Start Date" := CALCDATE(FrequencyFormula,PreviousTracker."Tax Return Start Date");
          IF PreviousTracker."Tax Return End Date" <> 0D THEN
            TaxTracker."Tax Return End Date" := CALCDATE(FrequencyFormula,PreviousTracker."Tax Return End Date");
          IF PreviousTracker."Filing Date" <> 0D THEN
            TaxTracker."Filing Date" := CALCDATE(FrequencyFormula,PreviousTracker."Filing Date");
        END;

        IF TaxTracker.INSERT(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE SignOffTaxTrackerCard@1000000051(TaxTracker@1000000000 : Record 9068801);
    VAR
      SubstanceSetup@1000000003 : Record 9070256;
      SubstanceRegister@1000000004 : Record 9070255;
    BEGIN
      SubstanceSetup.GET;
      IF TaxTracker."Tax Return Country" <> SubstanceSetup."Jersey Country Code" THEN
        EXIT;

      IF TaxTracker."Tax Code" <> SubstanceSetup."Company Tax Return Tax Code" THEN
        EXIT;

      IF TaxTracker."Record Type" <> TaxTracker."Record Type"::Client THEN
        EXIT;

      IF TaxTracker."Substance Entry No." = 0 THEN
        EXIT;

      IF SubstanceRegister.GET(TaxTracker."Record No.", TaxTracker."Substance Entry No.") THEN BEGIN
        IF (TaxTracker."Tax Return Start Date" <> SubstanceRegister."Period Start") OR
          (TaxTracker."Tax Return End Date" <> SubstanceRegister."Period End") THEN
          MESSAGE('Tax Tracker and linked Substance record period dates do not match. Substance Card will not be updated.')
        ELSE BEGIN
               IF SubstanceRegister.Status <> SubstanceRegister.Status::Completed THEN BEGIN
                  SubstanceRegister.Status := SubstanceRegister.Status::Completed;
                  SubstanceRegister.MODIFY;
               END;
             END;
      END;
    END;

    [External]
    PROCEDURE CreateTWMPayment@100000009(ClientNo@100000000 : Code[20]) Reference : Text;
    VAR
      TWMPayments@100000001 : Record 9072144;
      Client@100000002 : Record 9068500;
    BEGIN
      TWMPayments.INIT;
      TWMPayments.Reference := '';
      Client.RESET;
      Client.GET(ClientNo);
      //IF Client.GET(ClientNo) THEN BEGIN
        TWMPayments."From Client" := Client."Client No.";
        TWMPayments."Document Type" := TWMPayments."Document Type"::Payment;
        TWMPayments."From Bank Account Option" := TWMPayments."From Bank Account Option"::Client;
        IF TWMPayments.INSERT(TRUE) THEN
            EXIT(TWMPayments.Reference)
      //END ELSE
        //ERROR('Client %1 not found',ClientNo);
    END;

    [External]
    PROCEDURE CancelTWMPayment@100000023("Payment Reference"@100000000 : Code[35]) Result : Boolean;
    VAR
      TWMPayments@100000001 : Record 9072144;
    BEGIN
      TWMPayments.GET("Payment Reference");
      IF TWMPayments.Status = TWMPayments.Status::"Payment Sent" THEN BEGIN
        IF TWMPayments.CancelPayment(FALSE,FALSE) THEN
          EXIT(FALSE);
      END ELSE BEGIN
        IF TWMPayments.CancelPayment(TRUE,FALSE) THEN
          EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE ValidateTWMPayment@100000024("Payment Reference"@100000000 : Code[35]) Result : Boolean;
    VAR
      RecTWMPayments@100000001 : Record 9072144;
      CUTWMPayments@100000002 : Codeunit 9072130;
      ErrorCount@100000003 : Integer;
    BEGIN
      RecTWMPayments.GET("Payment Reference");
      ErrorCount := CUTWMPayments.UpdateValidatePayFileFields(RecTWMPayments);

      MESSAGE(FORMAT(ErrorCount));
      IF ErrorCount = 0 THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
      //END ELSE
       // ERROR('Payment %1 Do not EXISTS',"Payment Reference");
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50001 DFX Permission
{
  OBJECT-PROPERTIES
  {
    Date=09-04-21;
    Time=11:18:58;
    Modified=Yes;
    Version List=DFX Suite;
  }
  PROPERTIES
  {
    OnRun=VAR
            PermissionTypeTemp@100000000 : 'Read,Modify,Insert,Delete';
          BEGIN
            Result := GetUserPermission('DATAFABRICX\renupriya',403,PermissionTypeTemp::Read);
            MESSAGE(FORMAT(Result));
          END;

  }
  CODE
  {
    VAR
      Result@1000000000 : Boolean;

    [External]
    PROCEDURE GetUserPermission@100000000(User_ID@100000001 : Code[50];TableId@100000000 : Integer;PermissionType@100000002 : 'Read,Modify,Insert,Delete') : Boolean;
    VAR
      User@100000003 : Record 2000000120;
      Resource@100000004 : Record 156;
      DFXUserPermission@100000005 : Record 50009;
      DFXUser@100000006 : Record 50010;
      FirstPartition@100000007 : Code[20];
      SecondPartition@100000008 : Code[20];
      Permission@100000009 : Record 2000000005;
      ALLObj@100000010 : Record 2000000038;
      DFXUserPermission1@100000011 : Record 50009;
    BEGIN
      User.SETRANGE("User Name",User_ID);
      IF User.FINDFIRST THEN BEGIN
        IF GetInternalUserPermission(User_ID,TableId,PermissionType) THEN
          EXIT(TRUE) //Internal User
      END ELSE BEGIN
        IF GetExternalUserPermission(User_ID,TableId,PermissionType) THEN
          EXIT(FALSE); //External User
      END;
    END;

    LOCAL PROCEDURE GetInternalUserPermission@100000002(User_ID@100000014 : Code[50];TableId@100000013 : Integer;PermissionType@100000012 : 'Read,Modify,Insert,Delete') : Boolean;
    VAR
      User@100000009 : Record 2000000120;
      Resource@100000008 : Record 156;
      DFXUserPermission@100000007 : Record 50009;
      DFXUser@100000006 : Record 50010;
      FirstPartition@100000005 : Code[20];
      SecondPartition@100000004 : Code[20];
      Permission@100000003 : Record 2000000005;
      ALLObj@100000002 : Record 2000000038;
      DFXUserPermission1@100000001 : Record 50009;
      AccessControl@100000010 : Record 2000000053;
      TenantPermission@100000011 : Record 2000000166;
    BEGIN
      User.RESET;
      User.SETRANGE("User Name",User_ID);
      IF User.FINDFIRST THEN BEGIN
        AccessControl.RESET;
        AccessControl.SETRANGE("User Security ID",User."User Security ID");
        IF AccessControl.FINDFIRST THEN
          BEGIN
          Permission.RESET;
          Permission.SETRANGE("Role ID",AccessControl."Role ID");
          Permission.SETRANGE("Object Type",Permission."Object Type"::"Table Data");
          Permission.SETRANGE("Object ID",TableId);
          IF Permission.FINDSET THEN
            EXIT(TRUE);

            {
          REPEAT
              DFXUserPermission.INIT;
              DFXUserPermission."User ID" := User_ID;
              DFXUserPermission."User Security ID" := User."User Security ID";
              DFXUserPermission."Windows Security ID":= User."Windows Security ID";
              DFXUserPermission."BC User" := TRUE;
              DFXUserPermission."Role ID" := AccessControl."Role ID";
              DFXUserPermission."Object Type" := Permission."Object Type";
              DFXUserPermission."Object ID" := Permission."Object ID";
              DFXUserPermission."Object Name" := Permission."Object Name";
              DFXUserPermission."Read Permission" := DFXUserPermission."Read Permission"::"  ";
              DFXUserPermission."Modify Permission" := DFXUserPermission."Modify Permission"::"  ";
              DFXUserPermission."Insert Permission" := DFXUserPermission."Insert Permission"::"  ";
              DFXUserPermission."Delete Permission" := DFXUserPermission."Delete Permission"::"  ";
              CASE PermissionType OF
                PermissionType::Read:
                  DFXUserPermission."Read Permission" := Permission."Read Permission";
                PermissionType::Modify:
                  DFXUserPermission."Modify Permission" := Permission."Modify Permission";
                PermissionType::Insert:
                  DFXUserPermission."Insert Permission" := Permission."Insert Permission";
                PermissionType::Delete:
                  DFXUserPermission."Delete Permission" := Permission."Delete Permission";
             END;
              DFXUserPermission."Security Filter" := Permission."Security Filter";
              DFXUserPermission.INSERT(TRUE);
            UNTIL Permission.NEXT = 0;
          }

          TenantPermission.RESET;
          TenantPermission.SETRANGE("Role ID",AccessControl."Role ID");
          TenantPermission.SETRANGE("Object Type",Permission."Object Type"::"Table Data");
          TenantPermission.SETRANGE("Object ID",TableId);
          IF TenantPermission.FINDSET THEN
            EXIT(TRUE);
            {
            REPEAT
              DFXUserPermission.INIT;
              DFXUserPermission."User ID" := User_ID;
              DFXUserPermission."User Security ID" := User."User Security ID";
              DFXUserPermission."Windows Security ID":= User."Windows Security ID";
              DFXUserPermission."Role ID" := AccessControl."Role ID";
              DFXUserPermission."BC User" := TRUE;
              DFXUserPermission."Object Type" := TenantPermission."Object Type";
              DFXUserPermission."Object ID" := TenantPermission."Object ID";
              DFXUserPermission."Object Name" := TenantPermission."Object Name";
              DFXUserPermission."Read Permission" := DFXUserPermission."Read Permission"::"  ";
              DFXUserPermission."Modify Permission" := DFXUserPermission."Modify Permission"::"  ";
              DFXUserPermission."Insert Permission" := DFXUserPermission."Insert Permission"::"  ";
              DFXUserPermission."Delete Permission" := DFXUserPermission."Delete Permission"::"  ";
              CASE PermissionType OF
                PermissionType::Read:
                  DFXUserPermission."Read Permission" := TenantPermission."Read Permission";
                PermissionType::Modify:
                  DFXUserPermission."Modify Permission" := TenantPermission."Modify Permission";
                PermissionType::Insert:
                  DFXUserPermission."Insert Permission" := TenantPermission."Insert Permission";
                PermissionType::Delete:
                  DFXUserPermission."Delete Permission" := TenantPermission."Delete Permission";
              END;
              DFXUserPermission."Security Filter" := TenantPermission."Security Filter";
              DFXUserPermission.INSERT(TRUE);

            UNTIL TenantPermission.NEXT = 0;
            }
            IF AccessControl."Role ID" = 'SUPER' THEN
              EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE GetExternalUserPermission@100000001(User_ID@100000002 : Code[50];TableId@100000001 : Integer;PermissionType@100000000 : 'Read,Modify,Insert,Delete') : Boolean;
    VAR
      User@100000011 : Record 2000000120;
      Resource@100000010 : Record 156;
      DFXUserPermission@100000009 : Record 50009;
      DFXUser@100000008 : Record 50010;
      FirstPartition@100000007 : Code[20];
      SecondPartition@100000006 : Code[20];
      Permission@100000005 : Record 2000000005;
      ALLObj@100000004 : Record 2000000038;
      DFXUserPermission1@100000003 : Record 50009;
    BEGIN
      DFXUserPermission.RESET;
      DFXUserPermission.SETRANGE("User ID",User_ID);
      IF DFXUserPermission.FINDFIRST THEN
        EXIT(TRUE);
        {
        BEGIN
          DFXUserPermission.INIT;
          DFXUserPermission."User ID" := User_ID;
          DFXUserPermission."BC User" := FALSE;
          DFXUserPermission."Object Type" := DFXUserPermission."Object Type"::"Table Data";
          DFXUserPermission."Object ID" := TableId;
          DFXUserPermission."Object Name" := DFXUserPermission."Object Name";
          DFXUserPermission."Read Permission" := DFXUserPermission."Read Permission"::"  ";
          DFXUserPermission."Modify Permission" := DFXUserPermission."Modify Permission"::"  ";
          DFXUserPermission."Insert Permission" := DFXUserPermission."Insert Permission"::"  ";
          DFXUserPermission."Delete Permission" := DFXUserPermission."Delete Permission"::"  ";
          CASE PermissionType OF
            PermissionType::Read:
              DFXUserPermission."Read Permission" := DFXUserPermission."Read Permission"::Yes;
            PermissionType::Modify:
              DFXUserPermission."Modify Permission" := DFXUserPermission."Modify Permission"::Yes;
            PermissionType::Insert:
              DFXUserPermission."Insert Permission" := DFXUserPermission."Insert Permission"::Yes;
            PermissionType::Delete:
              DFXUserPermission."Delete Permission" := DFXUserPermission."Delete Permission"::Yes;
          END;
          DFXUserPermission."Security Filter" := DFXUserPermission."Security Filter";
          DFXUserPermission.INSERT(TRUE);
        END;
        }
    END;

    [External]
    PROCEDURE GetUserFirstPartitions@100000003(User_ID@100000000 : Code[50]) FirstPartitionCodes : Text[500];
    VAR
      DFXUser@100000001 : Record 50010;
    BEGIN
      IF DFXUser.GET(User_ID) THEN
        EXIT(DFXUser."First Partition Code");
    END;

    [External]
    PROCEDURE GetUserSecondPartitions@100000005(User_ID@100000000 : Code[50]) SecondPartitionCodes : Text[500];
    VAR
      DFXUser@100000001 : Record 50010;
    BEGIN
      IF DFXUser.GET(User_ID) THEN
        EXIT(DFXUser."Second Partition Code");
    END;

    PROCEDURE CreateDFXPartioning@100000007();
    VAR
      Resource@100000000 : Record 156;
      DFXUser@100000001 : Record 50010;
      BusinessGroupRole@100000002 : Record 9068252;
      Counter@100000003 : Integer;
      Counter1@100000004 : Integer;
      BusinessGroupRole1@100000005 : Record 9068252;
    BEGIN
      IF Resource.FINDFIRST THEN REPEAT
        IF Resource."Login User ID" <> '' THEN BEGIN
          DFXUser.INIT;
          DFXUser."User ID" := Resource."Login User ID";
          DFXUser."Resource No." := Resource."No.";
          DFXUser."BC User" := TRUE;
          IF Resource."Partition Group" <> '' THEN BEGIN
            BusinessGroupRole.SETRANGE("Business Group Code",Resource."Partition Group");
            BusinessGroupRole.SETRANGE("Table No.",DATABASE::Client);
            BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"First Partition");
            IF BusinessGroupRole.FINDSET THEN BEGIN
              Counter := 0;
              REPEAT
                IF Counter = 0 THEN
                  DFXUser."First Partition Code" := BusinessGroupRole.Role
                ELSE
                  DFXUser."First Partition Code" := DFXUser."First Partition Code" + '|' + BusinessGroupRole.Role;
                Counter += 1;
              UNTIL BusinessGroupRole.NEXT = 0;
            END;
            BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"Second Partition");
            IF BusinessGroupRole.FINDSET THEN BEGIN
              Counter := 0;
              REPEAT
                IF Counter = 0 THEN
                  DFXUser."Second Partition Code" := BusinessGroupRole.Role
                ELSE
                  DFXUser."Second Partition Code" := DFXUser."First Partition Code" + '|' + BusinessGroupRole.Role;
                Counter += 1;
              UNTIL BusinessGroupRole.NEXT = 0;
            END;
          END;
          IF DFXUser.INSERT THEN;
        END;
      UNTIL Resource.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50002 DFX Subscription
{
  OBJECT-PROPERTIES
  {
    Date=09-03-21;
    Time=19:50:50;
    Modified=Yes;
    Version List=DFX Suite;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Table,5050,OnAfterModifyEvent)]
    PROCEDURE ContactOnAfterModify_HS_Contacts@100000001(VAR Rec@100000001 : Record 5050;VAR xRec@100000002 : Record 5050;RunTrigger@100000003 : Boolean);
    VAR
      HSContacts@100000000 : Record 50011;
    BEGIN
      IF NOT Rec."Exclude from Segment" THEN BEGIN
        HSContacts.SETRANGE("No.",Rec."No.");
        IF NOT HSContacts.FINDFIRST THEN BEGIN
          HSContacts."No." := Rec."No.";
          HSContacts.Name := Rec.Name;
          HSContacts.City := Rec.City;
          HSContacts."Name 2" := Rec."Name 2";
          HSContacts."Phone No." := Rec."Phone No." ;
          HSContacts."Country/Region Code" := Rec."Country/Region Code";
          HSContacts."E-Mail" := Rec."E-Mail" ;
          HSContacts."Date Created" := TODAY;
          HSContacts.UpdateStatus := HSContacts.UpdateStatus::Insert ;
          HSContacts.INSERT;
        END
        ELSE BEGIN
          HSContacts."No." := Rec."No.";
          HSContacts.Name := Rec.Name;
          HSContacts.City := Rec.City;
          HSContacts."Name 2" := Rec."Name 2";
          HSContacts."Phone No." := Rec."Phone No.";
          HSContacts."Country/Region Code" := Rec."Country/Region Code";
          HSContacts."E-Mail" := Rec."E-Mail";
          HSContacts."Date Updated" := TODAY;
          HSContacts.UpdateStatus := HSContacts.UpdateStatus::Update;
          HSContacts.MODIFY;
        END;
      END;
    END;

    [EventSubscriber(Table,5050,OnAfterDeleteEvent)]
    PROCEDURE ContactOnAfterDelete_HS_Contacts@100000000(VAR Rec@100000000 : Record 5050;RunTrigger@100000001 : Boolean);
    VAR
      HSContacts@100000002 : Record 50011;
    BEGIN
      HSContacts.RESET;
      HSContacts.SETRANGE("No.",Rec."No.");
      IF HSContacts.FINDFIRST THEN BEGIN
      IF NOT Rec."Exclude from Segment" THEN BEGIN
        HSContacts."No." := Rec."No.";
        HSContacts.Name := Rec.Name;
        HSContacts.City :=Rec.City;
        HSContacts."Name 2" := Rec."Name 2";
        HSContacts."Phone No." := Rec."Phone No." ;
        HSContacts."Country/Region Code" := Rec."Country/Region Code";
        HSContacts."E-Mail" := Rec."E-Mail";
        //HSContacts."Date Created" := TODAY;
       // HSContacts."Date Updated" := TODAY;
        HSContacts.UpdateStatus := HSContacts.UpdateStatus::Delete;
        HSContacts.MODIFY;
      END;
      END
      ELSE IF NOT HSContacts.FINDFIRST THEN BEGIN
          HSContacts."No." := Rec."No.";
          HSContacts.Name := Rec.Name;
          HSContacts.City := Rec.City;
          HSContacts."Name 2" := Rec."Name 2";
          HSContacts."Phone No." := Rec."Phone No." ;
          HSContacts."Country/Region Code" := Rec."Country/Region Code";
          HSContacts."E-Mail" := Rec."E-Mail" ;
          HSContacts."Date Created" := TODAY;
          HSContacts.UpdateStatus := HSContacts.UpdateStatus::Delete ;
          HSContacts.INSERT;
        END
        ELSE BEGIN
          HSContacts."No." := Rec."No.";
          HSContacts.Name := Rec.Name;
          HSContacts.City := Rec.City;
          HSContacts."Name 2" := Rec."Name 2";
          HSContacts."Phone No." := Rec."Phone No.";
          HSContacts."Country/Region Code" := Rec."Country/Region Code";
          HSContacts."E-Mail" := Rec."E-Mail";
          HSContacts."Date Updated" := TODAY;
          HSContacts.UpdateStatus := HSContacts.UpdateStatus::Delete;
          HSContacts.MODIFY;
        END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50003 DFX WebService
{
  OBJECT-PROPERTIES
  {
    Date=22-03-21;
    Time=15:39:05;
    Modified=Yes;
    Version List=DFX Suite;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateWebServiceCustom;
            CreateWebService(ObjectTypeTemp::Page,9068930,'ClientLookup');
            CreateWebService(ObjectTypeTemp::Page,9068572,'ClientEntities');
            CreateWebService(ObjectTypeTemp::Page,9068573,'EntityHistory');
            CreateWebService(ObjectTypeTemp::Page,9069346,'DocsandCorrespondence');
            CreateWebService(ObjectTypeTemp::Page,9068820,'ClientPowerOfAttorneyList');
            CreateWebService(ObjectTypeTemp::Page,9068639,'SafeCustodyRegister');
            CreateWebService(ObjectTypeTemp::Page,9068552,'TaxRegister');
            CreateWebService(ObjectTypeTemp::Page,9070259,'MeetingRegisterList');
            CreateWebService(ObjectTypeTemp::Page,9068716,'ClientAcc.List');
            CreateWebService(ObjectTypeTemp::Page,9068627,'ClientPortfolioList');
            CreateWebService(ObjectTypeTemp::Page,9068607,'ClientInvestmentList');
            CreateWebService(ObjectTypeTemp::Page,9068614,'ClientAssetList');
            CreateWebService(ObjectTypeTemp::Page,9068667,'ClientCustomerList');
            CreateWebService(ObjectTypeTemp::Page,9068670,'ClientVendorList');
            CreateWebService(ObjectTypeTemp::Page,25,'CustomerLedgerEntries');
            CreateWebService(ObjectTypeTemp::Page,21,'CustomersList');
            CreateWebService(ObjectTypeTemp::Page,26,'Vendor');
            CreateWebService(ObjectTypeTemp::Page,371,'BankAccountList');
          END;

  }
  CODE
  {
    VAR
      ObjectTypeTemp@100000000 : ',,,,,Codeunit,,,Page,Query';
      FiltersString@100000001 : Text;

    [External]
    PROCEDURE CreateWebService@100000000(pObjectType@100000010 : ',,,,,Codeunit,,,Page,Query';pObjectID@100000011 : Integer;pServiceName@100000012 : Text);
    VAR
      WebServiceAggregate@100000000 : TEMPORARY Record 9900;
      WebService@100000001 : Record 2000000076;
    BEGIN
      WebService.RESET;
      WebService.SETRANGE("Service Name",pServiceName);
      IF NOT WebService.FINDFIRST THEN BEGIN
        WebServiceAggregate.INIT;
        WebServiceAggregate."Object Type" := WebServiceAggregate."Object Type"::Page;
        WebServiceAggregate."Object ID" := pObjectID;
        WebServiceAggregate."Service Name" := pServiceName;
        WebServiceAggregate."All Tenants" := TRUE;
        WebServiceAggregate.Published := TRUE;
        WebServiceAggregate.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateWebServiceCustom@100000006();
    VAR
      WebServiceAggregate@100000008 : TEMPORARY Record 9900;
      AllObj@100000007 : Record 2000000038;
      ServiceNameTemp@100000006 : Text;
      WebService@100000000 : Record 2000000076;
    BEGIN
      AllObj.RESET;
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::Page);
      AllObj.SETFILTER("Object ID",'%1..%2',50000,59999);
      IF AllObj.FINDSET THEN
        REPEAT
          CLEAR(ServiceNameTemp);
          ServiceNameTemp := DELCHR(AllObj."Object Name",'=');
          IF ServiceNameTemp <> '' THEN BEGIN
              WebService.RESET;
              WebService.SETRANGE("Service Name",ServiceNameTemp);
              IF NOT WebService.FINDFIRST THEN BEGIN
                WebServiceAggregate.INIT;
                WebServiceAggregate."Object Type" := WebServiceAggregate."Object Type"::Page;
                WebServiceAggregate."Object ID" := AllObj."Object ID";
                WebServiceAggregate."Service Name" := ServiceNameTemp;
                WebServiceAggregate."All Tenants" := TRUE;
                WebServiceAggregate.Published := TRUE;
                WebServiceAggregate.INSERT(TRUE);
              END;
          END;
      UNTIL AllObj.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50004 DFX DMSLite
{
  OBJECT-PROPERTIES
  {
    Date=13-07-22;
    Time=18:46:03;
    Modified=Yes;
    Version List=NAVLITE;
  }
  PROPERTIES
  {
    OnRun=VAR
            FunctionType@1000000000 : ',CreateNew,Update,Delete';
            AttachedToType@1000000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
            handtest@1000000003 : TextConst 'ENU="{
                      ""Action"":{
          ""Function"": ""HANDSHAKE""},
                                     ""Records"":[{
                                     ""EntryNo"":""26"",
                                                 ""LFUID"":""29239""
                                                           }
                                                           ]
                                                           } "';
            Createtest@1000000002 : TextConst 'ENU={
                      "Action":{
          "Function": "CREATENEW"
          },
          "Records":[{
          "AttachedToType": "Client",
          "AttachedToNo": "CLI092",
          "LFEntryID": "12347656",
          "FileName": "abcd.txt",
          "DocDescription" : "test",
          "LFDocType" : "CLREP",
          "LFDocSubType" : "STATE",
          "LFUID" : "60000"
          }
          ]
          }';
            StrCon@1000000004 : Text;
            StrCheck@1000000005 : Text;
            Return@100000000 : Boolean;
          BEGIN
            MESSAGE('Success');
            //LinkDocument(AttachedToType::Client,'CL00001',
            //HandShake(40797,'processed');
            //UpdateDocStroreFromExternal(AttachedToType::Entity,'E00000002',2973002,'','Documents','','sampledoc','Accounting','Distribution Movements',FunctionType::CreateNew,'LF',160821D,020221D,'','')
            //UnlinkDocument(AttachedToType::Client,'CLI0000001',12121,'Asset','ASS003');
            //Return := HandShake(AttachedToType::Client,'CLI0000003','WALTER TRUST','sample.txt',45450);
            //MESSAGE(FORMAT(Return));

            //UpdateDFXDocStroreFromExternal(AttachedToType::Entity,'E00000016',388,'','27-05-22 14:03 - 1 (6).txt','','','R01. Relationship Maintenance','C27. Relationship Correspondence',FunctionType::CreateNew,'LF',TODAY,TODAY,'','',TODAY,'Test');
          END;

  }
  CODE
  {
    VAR
      DocMgmntCU@100000000 : Codeunit 9068511;

    PROCEDURE NumberUpation@1000000001(Type@1000000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';No@1000000000 : Text;Name@1000000004 : Text) Number : Text;
    VAR
      ClientRec@1000000003 : Record 9068500;
      EntityRec@1000000002 : Record 9068505;
    BEGIN
      IF No <> '' THEN BEGIN
        CASE Type OF
              Type::Client : BEGIN
              ClientRec.RESET;
              IF ClientRec.GET(No) THEN
                No := ClientRec."Client No.";
              END;
              Type::Entity : BEGIN
              EntityRec.RESET;
              IF EntityRec.GET(No) THEN
                No := EntityRec."Entity No.";
              END
        END;
      END ELSE
        CASE Type OF
              Type::Client : BEGIN
                ClientRec.RESET;
                ClientRec.SETFILTER(Name,'%1','@*' + Name + '*');
                IF ClientRec.FINDFIRST THEN
                No := ClientRec."Client No.";
              END;
              Type::Entity : BEGIN
                EntityRec.RESET;
                EntityRec.SETFILTER(Name,'%1','@*' + Name + '*');
                IF EntityRec.FINDFIRST THEN
                No := EntityRec."Entity No.";
              END
        END;
      EXIT(No);
    END;

    [External]
    PROCEDURE UpdateDocStroreFromExternal@1000000011(AttachedToType@1000000000 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@1000000001 : Code[20];LFEntryID@1000000002 : Integer;FilePath@1000000011 : Text[250];FileName@1000000003 : Text;FileType@1000000010 : Code[10];DocDescription@1000000004 : Text[150];ExtDocType@1000000005 : Text[150];ExtDocSubType@1000000006 : Text[150];Function@1000000009 : ',CreateNew,Update,Delete';ExternalDMS@1000000016 : Text;CreationDate@1000000018 : Date;ModifiedDate@1000000017 : Date;LinkType@1000000019 : Text;NavAttribute@1000000020 : Text;DocumentDate@100000006 : Date;FreeText@100000007 : Text);
    VAR
      CorrespondenceStore@1000000007 : Record 9068660;
      DocMgmntCU@1000000008 : Codeunit 9068511;
      No@1000000012 : Text;
      FunctionType@1000000013 : ',CreateNew,Update,Delete';
      DocType@1000000014 : Text;
      DocSubType@1000000015 : Text;
      ID@100000000 : Text;
      Owner@100000001 : Record 9068443;
      Intermediary@100000002 : Record 9068447;
      Prospect@100000003 : Record 9068440;
      Entity@100000004 : Record 9068505;
      CorrespondenceStore2@100000005 : Record 9068660;
    BEGIN
      CLEAR(No);
      CLEAR(DocType);
      CLEAR(DocSubType);

      No := NumberUpation(AttachedToType,AttachedToNo,'');

      IF "Function" = FunctionType::CreateNew THEN
      BEGIN
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF NOT CorrespondenceStore.FINDFIRST THEN BEGIN
            CorrespondenceStore.INIT;
            CorrespondenceStore."No." := No;
            CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
           // CorrespondenceStore."Document Inserted Date" := TODAY;//remove
            CorrespondenceStore."Document Inserted By" := FORMAT(ExternalDMS);
            CorrespondenceStore.FilePath := FilePath;
            CorrespondenceStore.FileName := FileName;
            CorrespondenceStore."MS Office Doc Type" := FileType;
            CorrespondenceStore.Subject := DocDescription;
            CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
            CorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            CorrespondenceStore.Meta_Date_1 := CreationDate;//T
            CorrespondenceStore.Meta_Date_2 := ModifiedDate;//T;
            CorrespondenceStore.Meta_Text_1 := FreeText;
            CorrespondenceStore."Document Date" := DocumentDate;//T;
            ID :=  CorrespondenceStore.ID;

           { DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code
      }

            DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;


            IF AttachedToType = AttachedToType::Client THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

            CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");


            IF CorrespondenceStore.INSERT(TRUE) THEN BEGIN

                  IF AttachedToType = AttachedToType::Entity THEN BEGIN
                    EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                    EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                    EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

                  END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                    Unlink(AttachedToType,AttachedToNo,ID);
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                  END ELSE
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

            END;

      END
          ELSE
          ERROR('Entry already exists');
      END
      ELSE IF "Function" = FunctionType::Update THEN
      BEGIN
            CorrespondenceStore.SETRANGE("No.",No);
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF CorrespondenceStore.FINDFIRST THEN BEGIN
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_1 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


             {DocType := GetDocType(ExtDocType);
              DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;}

              IF AttachedToType = AttachedToType::Client THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
              IF AttachedToType = AttachedToType::Entity THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
              IF AttachedToType = AttachedToType::Resource THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
              IF AttachedToType = AttachedToType::"Client Owner" THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

              IF CorrespondenceStore.MODIFY THEN BEGIN
                IF AttachedToType = AttachedToType::Entity THEN BEGIN
                  EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                  EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                  EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

                  END ELSE
                IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                END ELSE
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

              END
           END
           ELSE IF NOT CorrespondenceStore.FINDFIRST THEN BEGIN
            CorrespondenceStore.INIT;
            CorrespondenceStore."No." := No;
            CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
            CorrespondenceStore."Document Inserted By" := ExternalDMS;
            CorrespondenceStore.FilePath := FilePath;
            CorrespondenceStore.FileName := FileName;
            CorrespondenceStore."MS Office Doc Type" := FileType;
            CorrespondenceStore.Subject := DocDescription;
            CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
            CorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            CorrespondenceStore.Meta_Date_1 := CreationDate;
            CorrespondenceStore.Meta_Date_2 := ModifiedDate;
            CorrespondenceStore.Meta_Text_1 := FreeText;
            CorrespondenceStore."Document Date" := DocumentDate;

            DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


            {DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;}


            IF AttachedToType = AttachedToType::Client THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

            CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");


            IF CorrespondenceStore.INSERT(TRUE) THEN BEGIN


              IF AttachedToType = AttachedToType::Entity THEN BEGIN
                EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

              END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
               END ELSE
                LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);
            END;
      END
      END
      ELSE IF "Function" = FunctionType::Delete THEN BEGIN
              CorrespondenceStore.RESET;
              CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
              IF CorrespondenceStore.FINDSET THEN BEGIN
              REPEAT
                CorrespondenceStore.DELETE
              UNTIL CorrespondenceStore.NEXT = 0;
              END ELSE
                ERROR('Entry Does not exist');

          END;
    END;

    LOCAL PROCEDURE GetNAVDocType@1000000016(ExtDoctype@1000000000 : Text[150]) : Code[10];
    VAR
      ExternalDocTypeRec@1000000001 : Record 50007;
    BEGIN
      ExternalDocTypeRec.SETRANGE("External Doc Type", ExtDoctype);
      IF ExternalDocTypeRec.FINDFIRST THEN
        EXIT(ExternalDocTypeRec."NAV Doc Type");

      EXIT('');
    END;

    LOCAL PROCEDURE GetNAVDocSubType@1000000019(ExtDocType@1000000000 : Text[150];ExtDocSubType@1000000001 : Text[150]) : Code[20];
    VAR
      ExternalDocSubTypeRec@1000000002 : Record 50008;
    BEGIN
      ExternalDocSubTypeRec.SETRANGE("External Doc Type", ExtDocType);
      ExternalDocSubTypeRec.SETRANGE("External Sub Doc Type", ExtDocSubType);
      IF ExternalDocSubTypeRec.FINDFIRST THEN
        EXIT(ExternalDocSubTypeRec."NAV Doc Sub Type");

      EXIT('');
    END;

    LOCAL PROCEDURE GetDocType@100000003(ExtDoctype@1000000000 : Text[150]) : Text;
    VAR
      CorrespondenceDocType@100000000 : Record 9068657;
    BEGIN
      CorrespondenceDocType.RESET;
      CorrespondenceDocType.SETRANGE(Type,ExtDoctype);
      IF CorrespondenceDocType.FINDFIRST THEN
        EXIT(CorrespondenceDocType.Type);

      EXIT('');
    END;

    LOCAL PROCEDURE GetDocSubType@100000002(ExtDocType@1000000000 : Text[150];ExtDocSubType@1000000001 : Text[150]) : Text;
    VAR
      DocumentTypeSubType@100000000 : Record 9068463;
    BEGIN
      DocumentTypeSubType.RESET;
      DocumentTypeSubType.SETRANGE("Document Type Description",ExtDocType);
      DocumentTypeSubType.SETRANGE("Document Sub Type Description",ExtDocSubType);
      IF DocumentTypeSubType.FINDFIRST THEN
        EXIT(DocumentTypeSubType."Document Sub Type Description");

      EXIT('');
    END;

    [External]
    PROCEDURE LinkDocument@1000000000(AttachedToType@1000000017 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@1000000004 : Code[20];LFEntryID@1000000003 : Integer;LinkType@1000000016 : Text;NAVAttribute@1000000005 : Text);
    VAR
      CorrespondenceStoreLink@1000000002 : Record 9069078;
      CorrespondenceStoreLink2@1000000001 : Record 9069078;
      CorrespondenceStore@1000000000 : Record 9068660;
      LinkTypeFilter@1000000006 : Text;
      LinkCodeFilter@1000000007 : Text;
      NoFilter@1000000008 : Text;
      StrCon@1000000010 : Text;
      ClientAccount@1000000009 : Record 9068624;
      ClientAsset@1000000011 : Record 9068546;
      ClientPortfolio@1000000012 : Record 9068565;
      ClientInvestment@1000000013 : Record 9068542;
      ClientCustomer@1000000014 : Record 9068602;
      ClientVendor@1000000015 : Record 9068604;
      LinkCode@100000000 : Text;
    BEGIN
      IF NAVAttribute <> '' THEN BEGIN
        IF LinkType <> '' THEN
        BEGIN

      IF NAVAttribute = 'TBD' THEN
        LinkType := '';

          CASE AttachedToType OF
          AttachedToType::Client :
            CorrespondenceStore.SETFILTER(Type,'Client');
          AttachedToType::Entity:
            CorrespondenceStore.SETFILTER(Type,'Entity');
          AttachedToType::Intermediary:
            CorrespondenceStore.SETFILTER(Type,'Intermediary');
          AttachedToType::"Client Owner" :
            CorrespondenceStore.SETFILTER(Type,'Client Owner');
          AttachedToType::"Potential Client":
            CorrespondenceStore.SETFILTER(Type,'Potential Client');
          AttachedToType::Prospect :
            CorrespondenceStore.SETFILTER(Type,'Prospect');
          AttachedToType::Resource :
            CorrespondenceStore.SETFILTER(Type,'Resource');
          END;

          CorrespondenceStore.SETFILTER("No.",AttachedToNo);
          CorrespondenceStore.SETRANGE("Temporary",FALSE);

          StrCon := CONVERTSTR(NAVAttribute,'-',',');
          LinkCodeFilter := SELECTSTR(1,StrCon);


           IF LinkType = 'Account' THEN BEGIN
             LinkCode := DELSTR(LinkCodeFilter,3);
             IF LinkCode = 'BK' THEN
               LinkTypeFilter := 'Bank'
             ELSE IF LinkCode = 'LN' THEN
               LinkTypeFilter := 'Loan'
          END
          ELSE IF LinkType = 'Invoice' THEN
              LinkTypeFilter := 'Client Invoice'
          ELSE IF LinkType = 'Payment' THEN
              LinkTypeFilter := ''
          ELSE
              LinkTypeFilter := LinkType;

          //CorrespondenceStore.SETRANGE("Corresp. Store Link Exists",FALSE);
          CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
          CorrespondenceStore.FILTERGROUP(0);

          IF CorrespondenceStore.FINDFIRST THEN BEGIN

            IF CorrespondenceStore.ID <> '' THEN BEGIN
              CorrespondenceStoreLink2.INIT;
              CorrespondenceStoreLink2.Type        := CorrespondenceStore.Type;
              CorrespondenceStoreLink2."No."       := CorrespondenceStore."No.";

              IF (LinkTypeFilter = 'Yacht') OR (LinkTypeFilter = 'Property') OR (LinkTypeFilter = 'Aviation') OR (LinkTypeFilter = 'Intellectual Property')
              OR (LinkTypeFilter = 'Life Assurance') OR (LinkTypeFilter = 'Miscellaneous Asset') THEN BEGIN
                  EVALUATE(CorrespondenceStoreLink2."Link Type",'Asset');
              END ELSE
              EVALUATE(CorrespondenceStoreLink2."Link Type",LinkTypeFilter);

              CorrespondenceStoreLink2."Link Code" := LinkCodeFilter;
              CorrespondenceStoreLink2.VALIDATE(ID,CorrespondenceStore.ID);
              CorrespondenceStoreLink2."External DMS Status" := CorrespondenceStoreLink2."External DMS Status"::Processed;
              CorrespondenceStoreLink.RESET;
              CorrespondenceStoreLink.SETRANGE(Type,CorrespondenceStoreLink2.Type);
              CorrespondenceStoreLink.SETRANGE("No.",CorrespondenceStoreLink2."No.");
              CorrespondenceStoreLink.SETRANGE("Link Type",CorrespondenceStoreLink2."Link Type");
              CorrespondenceStoreLink.SETRANGE("Link Code",CorrespondenceStoreLink2."Link Code");
              CorrespondenceStoreLink.SETRANGE("Correspondence Store Type",CorrespondenceStoreLink2."Correspondence Store Type");
              CorrespondenceStoreLink.SETRANGE(ID,CorrespondenceStoreLink2.ID);
              IF NOT CorrespondenceStoreLink.FINDFIRST THEN
                CorrespondenceStoreLink2.INSERT(TRUE)
              ELSE
                CorrespondenceStoreLink2.MODIFY(TRUE);

      END;
      END
      END; {ELSE
            ERROR('Link Type is Empty');
          END ELSE
          ERROR('NAVAttribute is Empty');
          }
      END;
    END;

    [External]
    PROCEDURE HandShakeStatus@1000000002(LFEntryID@1000000000 : Integer;Status@1000000002 : Text);
    VAR
      CorrespondenceStore@1000000001 : Record 9068660;
    BEGIN
      CorrespondenceStore.RESET;
      CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
      IF CorrespondenceStore.FINDFIRST THEN BEGIN
        CorrespondenceStore."Additional Information" := Status;
        IF CorrespondenceStore."Additional Information" <> 'Processed' THEN
          CorrespondenceStore.MODIFY
        ELSE IF CorrespondenceStore."Additional Information" = 'Processed' THEN
          ERROR('Entry already processed');
      END
    END;

    [External]
    PROCEDURE UnlinkDocument@100000001(AttachedToType@100000005 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@100000004 : Code[20];LFEntryID@100000011 : Integer;LinkType@100000002 : Text;NAVAttribute@100000001 : Text);
    VAR
      CorrespondenceStoreLink@100000000 : Record 9069078;
      LinkTypeFilter@100000008 : Text;
      LinkCodeFilter@100000007 : Text;
      LinkCode@100000006 : Text;
      StrCon@100000009 : Text;
      LinkTypeOption@100000010 : ' ,Asset,Safe Custody,Bank,Loan,Agent,Investment,Client Entity,Client Entity History,Customer,Vendor,Portfolio,Transaction Monitoring,Interaction,Activity,Business Rule,Client Invoice,Meeting';
      CorrespondenceStore@100000003 : Record 9068660;
      ID@100000012 : Code[10];
    BEGIN
      //IF AttachedToType = AttachedToType::Client THEN
      IF NAVAttribute <> '' THEN BEGIN
        IF LinkType <> '' THEN
        BEGIN
          StrCon := CONVERTSTR(NAVAttribute,'-',',');
          LinkCodeFilter := SELECTSTR(1,StrCon);


          IF LinkType = 'Account' THEN BEGIN
            LinkCode := DELSTR(LinkCodeFilter,3);
            IF LinkCode = 'BK' THEN
              LinkTypeFilter := 'Bank'
            ELSE IF LinkCode = 'LN' THEN
               LinkTypeFilter := 'Loan'
          END ELSE
            LinkTypeFilter := LinkType;

          CASE LinkTypeFilter OF
            'Bank' :
              LinkTypeOption := LinkTypeOption::Bank;
            'Asset' :
              LinkTypeOption := LinkTypeOption::Asset;
            'Loan':
              LinkTypeOption := LinkTypeOption::Loan;
            'Portfolio' :
              LinkTypeOption := LinkTypeOption::Portfolio;
            'Investment' :
              LinkTypeOption := LinkTypeOption::Investment;
            'Agent' :
              LinkTypeOption := LinkTypeOption::Agent;
            'Meeting' :
              LinkTypeOption := LinkTypeOption::Meeting;
          END;

          CorrespondenceStore.RESET;

          CASE AttachedToType OF
          AttachedToType::Client :
            CorrespondenceStore.SETFILTER(Type,'Client');
          AttachedToType::Entity:
            CorrespondenceStore.SETFILTER(Type,'Entity');
          AttachedToType::Intermediary:
            CorrespondenceStore.SETFILTER(Type,'Intermediary');
          AttachedToType::"Client Owner" :
            CorrespondenceStore.SETFILTER(Type,'Client Owner');
          AttachedToType::"Potential Client" :
            CorrespondenceStore.SETFILTER(Type,'Potential Client');
          AttachedToType::Prospect :
            CorrespondenceStore.SETFILTER(Type,'Prospect');
          AttachedToType::Resource :
            CorrespondenceStore.SETFILTER(Type,'Resource');
          END;

          CorrespondenceStore.SETFILTER("No.",AttachedToNo);
          CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
          IF CorrespondenceStore.FINDFIRST THEN
            ID := CorrespondenceStore.ID;

          CorrespondenceStoreLink.RESET;
          CorrespondenceStoreLink.SETRANGE("No.",AttachedToNo);
          CorrespondenceStoreLink.SETRANGE(Type,CorrespondenceStoreLink.Type::Client);
          CorrespondenceStoreLink.SETRANGE("Link Type",LinkTypeOption);
          CorrespondenceStoreLink.SETRANGE("Link Code",LinkCodeFilter);
         // CorrespondenceStoreLink.SETRANGE("Correspondence Store Type",CorrespondenceStoreLink."Correspondence Store Type"::"0");
          CorrespondenceStoreLink.SETRANGE(ID,ID);
          IF CorrespondenceStoreLink.FINDFIRST THEN
            CorrespondenceStoreLink.DELETE
          ELSE
            ERROR('Record not found');
        END ELSE
            ERROR('Link Type is Empty');
          END ELSE
          ERROR('NAVAttribute is Empty');
    END;

    LOCAL PROCEDURE CheckEntryIDExist@100000000(AttachedToType@100000003 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@100000002 : Code[20];LFEntryID@100000001 : Integer) Exists : Boolean;
    VAR
      CorrespondenceStore@100000000 : Record 9068660;
      ID@100000004 : Text;
    BEGIN
      CorrespondenceStore.RESET;
      CorrespondenceStore.SETFILTER(Type,'Client');
      CorrespondenceStore.SETFILTER("No.",AttachedToNo);
      CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
      IF CorrespondenceStore.FINDFIRST THEN
        ID := CorrespondenceStore.ID;

      IF ID <> '' THEN
        Exists := TRUE
      ELSE
        Exists := FALSE;

      EXIT(Exists);
    END;

    LOCAL PROCEDURE Unlink@100000008(AttachedToType@1000000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@1000000000 : Code[20];ID@100000001 : Text);
    VAR
      CorrespondenceStoreLink@100000000 : Record 9069078;
    BEGIN
      CorrespondenceStoreLink.RESET;
      CorrespondenceStoreLink.SETFILTER(Type,'Client');
      CorrespondenceStoreLink.SETFILTER("No.",AttachedToNo);
      CorrespondenceStoreLink.SETRANGE(ID,ID);
      IF CorrespondenceStoreLink.FINDFIRST THEN
        CorrespondenceStoreLink.DELETE
      //ELSE
       //ERROR('Record not found');
    END;

    [External]
    PROCEDURE HandShake@100000020(AttachedToType@100000002 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@100000001 : Code[50];NAme@100000005 : Text;FileName@100000000 : Text;LFEntyId@100000003 : Integer) Success : Boolean;
    VAR
      CorrespondenceStore@100000004 : Record 9068660;
    BEGIN
      CASE AttachedToType OF
          AttachedToType::Client :
            CorrespondenceStore.SETFILTER(Type,'Client');
          AttachedToType::Entity:
            CorrespondenceStore.SETFILTER(Type,'Entity');
          AttachedToType::Intermediary:
            CorrespondenceStore.SETFILTER(Type,'Intermediary');
          AttachedToType::"Client Owner" :
            CorrespondenceStore.SETFILTER(Type,'Client Owner');
          AttachedToType::"Potential Client":
            CorrespondenceStore.SETFILTER(Type,'Potential Client');
          AttachedToType::Prospect :
            CorrespondenceStore.SETFILTER(Type,'Prospect');
          AttachedToType::Resource :
            CorrespondenceStore.SETFILTER(Type,'Resource');
          END;

      CorrespondenceStore.SETRANGE("No.",AttachedToNo);
      CorrespondenceStore.SETRANGE(FileName,FileName);
      CorrespondenceStore.FINDFIRST;
      IF CorrespondenceStore."LaserFiche Entry ID" = 0 THEN BEGIN
        CorrespondenceStore."LaserFiche Entry ID" := LFEntyId;
        IF CorrespondenceStore.MODIFY THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;

    END;

    LOCAL PROCEDURE EntityOwnerLink@100000009(AttachedToNo@100000018 : Code[20];LFEntryID@100000017 : Integer;FilePath@100000016 : Text[250];FileName@100000015 : Text;FileType@100000014 : Code[10];DocDescription@100000013 : Text[150];ExtDocType@100000012 : Text[150];ExtDocSubType@100000011 : Text[150];ExternalDMS@100000009 : Text;CreationDate@100000008 : Date;ModifiedDate@100000007 : Date;DocumentDate@100000020 : Date;FreeText@100000010 : Text);
    VAR
      Owner@100000006 : Record 9068443;
      Entity@100000005 : Record 9068505;
      AttachedToType@100000004 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000003 : Record 9068660;
      CorrespondenceStore2@100000002 : Record 9068660;
      ID@100000000 : Text;
      DocType@100000001 : Text;
      DocSubType@100000019 : Text;
    BEGIN
      Entity.GET(AttachedToNo);
      IF Entity."Owner No." <> ''  THEN
        BEGIN
          Owner.RESET;
          Owner.SETRANGE("No.",Entity."Owner No.");
          IF Owner.FINDFIRST THEN BEGIN
            CorrespondenceStore.RESET;
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::"Client Owner");
            CorrespondenceStore.SETRANGE("No.",Owner."No.");
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF CorrespondenceStore.FINDFIRST THEN BEGIN
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_1 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.MODIFY(TRUE);
              END
              ELSE BEGIN
              CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";
              CorrespondenceStore."No." := Owner."No.";
              CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_1 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");

              CorrespondenceStore.INSERT(TRUE);
              END
          END
        END
    END;

    LOCAL PROCEDURE EntityProspectLink@100000019(AttachedToNo@100000011 : Code[20];LFEntryID@100000010 : Integer;FilePath@100000009 : Text[250];FileName@100000008 : Text;FileType@100000007 : Code[10];DocDescription@100000006 : Text[150];ExtDocType@100000005 : Text[150];ExtDocSubType@100000004 : Text[150];ExternalDMS@100000002 : Text;CreationDate@100000001 : Date;ModifiedDate@100000000 : Date;DocumentDate@100000020 : Date;FreeText@100000003 : Text);
    VAR
      Prospect@100000019 : Record 9068440;
      Entity@100000018 : Record 9068505;
      AttachedToType@100000017 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000016 : Record 9068660;
      CorrespondenceStore2@100000015 : Record 9068660;
      ID@100000014 : Text;
      DocType@100000013 : Text;
      DocSubType@100000012 : Text;
    BEGIN
      Entity.GET(AttachedToNo);
      IF Entity."Prospect No." <> ''  THEN
        BEGIN
          Prospect.RESET;
          Prospect.SETRANGE("No.",Entity."Prospect No.");
          IF Prospect.FINDFIRST THEN BEGIN
            CorrespondenceStore.RESET;
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Prospect);
            CorrespondenceStore.SETRANGE("No.",Prospect."No.");
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF CorrespondenceStore.FINDFIRST THEN BEGIN
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_1 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.MODIFY(TRUE);
              END
              ELSE BEGIN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Prospect;
              CorrespondenceStore."No." := Prospect."No.";
              CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_1 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");

              CorrespondenceStore.INSERT(TRUE);
              END
          END
        END
    END;

    LOCAL PROCEDURE EntityIntermediaryLink@100000021(AttachedToNo@100000011 : Code[20];LFEntryID@100000010 : Integer;FilePath@100000009 : Text[250];FileName@100000008 : Text;FileType@100000007 : Code[10];DocDescription@100000006 : Text[150];ExtDocType@100000005 : Text[150];ExtDocSubType@100000004 : Text[150];ExternalDMS@100000002 : Text;CreationDate@100000001 : Date;ModifiedDate@100000000 : Date;DocumentDate@100000020 : Date;FreeText@100000003 : Text);
    VAR
      Entity@100000018 : Record 9068505;
      AttachedToType@100000017 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000016 : Record 9068660;
      CorrespondenceStore2@100000015 : Record 9068660;
      ID@100000014 : Text;
      DocType@100000013 : Text;
      DocSubType@100000012 : Text;
      Intermediary@100000019 : Record 9068447;
    BEGIN
      Entity.GET(AttachedToNo);
      IF Entity."Intermediary No." <> ''  THEN
        BEGIN
          Intermediary.RESET;
          Intermediary.SETRANGE("No.",Entity."Intermediary No.");
          IF Intermediary.FINDFIRST THEN BEGIN
            CorrespondenceStore.RESET;
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Intermediary);
            CorrespondenceStore.SETRANGE("No.",Intermediary."No.");
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF CorrespondenceStore.FINDFIRST THEN BEGIN
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_1 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.MODIFY(TRUE);
              END
              ELSE BEGIN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Intermediary;
              CorrespondenceStore."No." := Intermediary."No.";
              CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_1 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");

              CorrespondenceStore.INSERT(TRUE);
              END
          END
        END
    END;

    [External]
    PROCEDURE UpdateDFXDocStroreFromExternal@100000004(AttachedToType@1000000000 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client,Customer,Vendor,Contact';AttachedToNo@1000000001 : Code[20];LFEntryID@1000000002 : Integer;FilePath@1000000011 : Text;FileName@1000000003 : Text;FileType@1000000010 : Code[10];DocDescription@1000000004 : Text[150];ExtDocType@1000000005 : Text[150];ExtDocSubType@1000000006 : Text[150];Function@1000000009 : ',CreateNew,Update,Delete';ExternalDMS@1000000016 : Text;CreationDate@1000000018 : Date;ModifiedDate@1000000017 : Date;LinkType@1000000019 : Text;NavAttribute@1000000020 : Text;DocumentDate@100000006 : Date;FreeText@100000007 : Text);
    VAR
      CorrespondenceStore@1000000007 : Record 9068660;
      DocMgmntCU@1000000008 : Codeunit 9068511;
      No@1000000012 : Text;
      FunctionType@1000000013 : ',CreateNew,Update,Delete';
      DocType@1000000014 : Text;
      DocSubType@1000000015 : Text;
      ID@100000000 : Text;
      Owner@100000001 : Record 9068443;
      Intermediary@100000002 : Record 9068447;
      Prospect@100000003 : Record 9068440;
      Entity@100000004 : Record 9068505;
      CorrespondenceStore2@100000005 : Record 9068660;
      DFXCorrespondenceStore@100000008 : Record 50016;
      DFXDocStore@100000009 : Record 50016;
    BEGIN
      CLEAR(No);
      CLEAR(DocType);
      CLEAR(DocSubType);


      No := NumberUpation(AttachedToType,AttachedToNo,'');

      IF "Function" = FunctionType::CreateNew THEN
      BEGIN
        IF AttachedToNo = '' THEN
        ERROR('No. is empty');

        IF AttachedToType = AttachedToType::" " THEN
          ERROR('Type is empty');

            DFXCorrespondenceStore.SETRANGE("No.",AttachedToNo);
            DFXCorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF NOT DFXCorrespondenceStore.FINDFIRST THEN BEGIN
            DFXCorrespondenceStore.INIT;
            DFXCorrespondenceStore."No." := No;
            DFXCorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            DFXCorrespondenceStore."Source of Document" := DFXCorrespondenceStore."Source of Document"::Imported;
            //CorrespondenceStore."Document Inserted Date" := TODAY;
            DFXCorrespondenceStore."Document Inserted By" := ExternalDMS;
            DFXCorrespondenceStore.FilePath := FilePath;
            DFXCorrespondenceStore.FileName := FileName;
            DFXCorrespondenceStore."MS Office Doc Type" := FileType;
            DFXCorrespondenceStore.Subject := DocDescription;
            DFXCorrespondenceStore."External DMS Status" := DFXCorrespondenceStore."External DMS Status"::Processed;
            DFXCorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            DFXCorrespondenceStore.Meta_Date_1 := CreationDate;//T;
            DFXCorrespondenceStore.Meta_Date_2 := ModifiedDate;//T;
            DFXCorrespondenceStore.Meta_Text_1 := FreeText;
            DFXCorrespondenceStore."Document Date" := DocumentDate;//T;
            ID :=  DFXCorrespondenceStore.ID;

            DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            DFXCorrespondenceStore."Document Type" := DocType;
            DFXCorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


           { DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            DFXCorrespondenceStore."Document Type" := DocType;
            DFXCorrespondenceStore."Document Sub Type" := DocSubType;}


            IF AttachedToType = AttachedToType::Client THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::"Client Owner";
              IF AttachedToType = AttachedToType::Customer THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Customer;
              IF AttachedToType = AttachedToType::Vendor THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Vendor;
              IF AttachedToType = AttachedToType::Contact THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Contact;

           // DFXCorrespondenceStore.ID := '5556';//DocMgmntCU."Get Next Document Number"(DFXCorrespondenceStore.Type, DFXCorrespondenceStore."No.");

            DFXDocStore.RESET;
            DFXDocStore.SETRANGE("No.",AttachedToNo);
            DFXDocStore.SETFILTER(ID,'<>%1','');
            IF DFXDocStore.FIND('+') THEN
              DFXCorrespondenceStore.ID := INCSTR(DFXDocStore.ID)
            ELSE
              DFXCorrespondenceStore.ID := '1';

            IF DFXCorrespondenceStore.INSERT(TRUE) THEN BEGIN

                  IF AttachedToType = AttachedToType::Entity THEN BEGIN
                    EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                    EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                    EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

                  END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                    Unlink(AttachedToType,AttachedToNo,ID);
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                  END ELSE
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

            END;

      END
          ELSE
          ERROR('Entry already exists');
      END
      ELSE IF "Function" = FunctionType::Update THEN
      BEGIN
            DFXCorrespondenceStore.SETRANGE("No.",No);
            DFXCorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF DFXCorrespondenceStore.FINDFIRST THEN BEGIN
              DFXCorrespondenceStore."Source of Document" := DFXCorrespondenceStore."Source of Document"::Imported;
              DFXCorrespondenceStore."Document Inserted By" := ExternalDMS;
              DFXCorrespondenceStore.FileName := FileName;
              DFXCorrespondenceStore.FilePath := FilePath;
              DFXCorrespondenceStore.Subject := DocDescription;
              DFXCorrespondenceStore."MS Office Doc Type" := FileType;
              DFXCorrespondenceStore."External DMS Status" := DFXCorrespondenceStore."External DMS Status"::Processed;
              DFXCorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
              DFXCorrespondenceStore.Meta_Date_1 := CreationDate;
              DFXCorrespondenceStore.Meta_Date_2 := ModifiedDate;
              DFXCorrespondenceStore.Meta_Text_1 := FreeText;
              DFXCorrespondenceStore."Document Date" := DocumentDate;
              ID :=  DFXCorrespondenceStore.ID;

              {DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              DFXCorrespondenceStore."Document Type" := DocType;
              DFXCorrespondenceStore."Document Sub Type" := DocSubType;}//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


             DocType := GetDocType(ExtDocType);
              DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
              DFXCorrespondenceStore."Document Type" := DocType;
              DFXCorrespondenceStore."Document Sub Type" := DocSubType;

              IF AttachedToType = AttachedToType::Client THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Client;
              IF AttachedToType = AttachedToType::Entity THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Entity;
              IF AttachedToType = AttachedToType::Resource THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Resource;
              IF AttachedToType = AttachedToType::"Client Owner" THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::"Client Owner";
              IF AttachedToType = AttachedToType::Customer THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Customer;
              IF AttachedToType = AttachedToType::Vendor THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Vendor;
              IF AttachedToType = AttachedToType::Contact THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Contact;

              IF DFXCorrespondenceStore.MODIFY THEN BEGIN
                IF AttachedToType = AttachedToType::Entity THEN BEGIN
                  EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                  EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                  EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

                  END ELSE
                IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                END ELSE
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

              END
           END
           ELSE IF NOT DFXCorrespondenceStore.FINDFIRST THEN BEGIN
            DFXCorrespondenceStore.INIT;
            DFXCorrespondenceStore."No." := No;
            DFXCorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            DFXCorrespondenceStore."Source of Document" := DFXCorrespondenceStore."Source of Document"::Imported;
            DFXCorrespondenceStore."Document Inserted By" := ExternalDMS;
            DFXCorrespondenceStore.FilePath := FilePath;
            DFXCorrespondenceStore.FileName := FileName;
            DFXCorrespondenceStore."MS Office Doc Type" := FileType;
            DFXCorrespondenceStore.Subject := DocDescription;
            DFXCorrespondenceStore."External DMS Status" := DFXCorrespondenceStore."External DMS Status"::Processed;
            DFXCorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            DFXCorrespondenceStore.Meta_Date_1 := CreationDate;
            DFXCorrespondenceStore.Meta_Date_2 := ModifiedDate;
            DFXCorrespondenceStore.Meta_Text_1 := FreeText;
            DFXCorrespondenceStore."Document Date" := DocumentDate;

            {DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            DFXCorrespondenceStore."Document Type" := DocType;
            DFXCorrespondenceStore."Document Sub Type" := DocSubType;}//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


            DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            DFXCorrespondenceStore."Document Type" := DocType;
            DFXCorrespondenceStore."Document Sub Type" := DocSubType;


            IF AttachedToType = AttachedToType::Client THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::"Client Owner";
              IF AttachedToType = AttachedToType::Customer THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Customer;
              IF AttachedToType = AttachedToType::Vendor THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Vendor;
              IF AttachedToType = AttachedToType::Contact THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Contact;

            DFXCorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(DFXCorrespondenceStore.Type, DFXCorrespondenceStore."No.");


            IF DFXCorrespondenceStore.INSERT(TRUE) THEN BEGIN


              IF AttachedToType = AttachedToType::Entity THEN BEGIN
                EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

              END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
               END ELSE
                LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);
            END;
      END
      END
      ELSE IF "Function" = FunctionType::Delete THEN BEGIN
              DFXCorrespondenceStore.RESET;
              DFXCorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
              IF DFXCorrespondenceStore.FINDSET THEN BEGIN
              REPEAT
                DFXCorrespondenceStore.DELETE
              UNTIL DFXCorrespondenceStore.NEXT = 0;
              END ELSE
                ERROR('Entry Does not exist');

          END;
    END;

    [EventSubscriber(Table,50016,OnAfterInsertEvent)]
    PROCEDURE DFXCorresPondenceStoreOnInsert@100000024(VAR Rec@100000000 : Record 50016;RunTrigger@100000001 : Boolean);
    VAR
      CorrespondenceStore@100000002 : Record 9068660;
    BEGIN
      //IF RunTrigger THEN
        IF Rec."LaserFiche Entry ID" <> 0 THEN BEGIN
          IF Rec.Type = Rec.Type::Client THEN
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Client)
          ELSE IF Rec.Type = Rec.Type::Entity THEN
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Entity);

          CorrespondenceStore.SETRANGE("No.",Rec."No.");
          CorrespondenceStore.SETRANGE("LaserFiche Entry ID",Rec."LaserFiche Entry ID");
          IF NOT CorrespondenceStore.FINDFIRST THEN BEGIN
            CorrespondenceStore.Type := Rec.Type;
            CorrespondenceStore."No." := Rec."No.";
            CorrespondenceStore.ID := Rec.ID;
            CorrespondenceStore."External DMS Status" := Rec."External DMS Status";
            CorrespondenceStore."MS Office Doc Type" := Rec."MS Office Doc Type";
            CorrespondenceStore.Subject := Rec.Subject;
            CorrespondenceStore.Info1 := Rec.Info1;
            CorrespondenceStore.Info2 := Rec.Info2;
            CorrespondenceStore."Document GUID" := Rec."Document GUID";
            CorrespondenceStore.Name := Rec.Name;
            CorrespondenceStore."Last Date Modified" := Rec."Last Date Modified";
            CorrespondenceStore.Authorised := Rec.Authorised;
            CorrespondenceStore.FilePath := Rec.FilePath;
            CorrespondenceStore.FileName := Rec.FileName;
            CorrespondenceStore."Source of Document" := Rec."Source of Document";
            CorrespondenceStore."Document Inserted Date" := Rec."Document Inserted Date";
            CorrespondenceStore."Document Inserted By" := Rec."Document Inserted By";
            CorrespondenceStore."Last Accessed By" := Rec."Last Accessed By";
            CorrespondenceStore."Document in Paper Form" := Rec."Document in Paper Form";
            CorrespondenceStore."Additional Information" := Rec."Additional Information";
            CorrespondenceStore."Document Type" := Rec."Document Type";
            CorrespondenceStore."Document Type Text" := Rec."Document Type Text";
            CorrespondenceStore."Document Sub Type" := Rec."Document Sub Type";
            CorrespondenceStore."Document Sub Type Text" := Rec."Document Sub Type Text";
            CorrespondenceStore.Author := Rec.Author;
            CorrespondenceStore."Document Date" := Rec."Document Date";
            CorrespondenceStore."Document Expiry Date" := Rec."Document Expiry Date";
            CorrespondenceStore."LaserFiche Entry ID" := Rec."LaserFiche Entry ID";
            CorrespondenceStore.Meta_Date_1 := Rec.Meta_Date_1;
            CorrespondenceStore.Meta_Date_2 := Rec.Meta_Date_2;
            CorrespondenceStore.Meta_Text_1 := Rec.Meta_Text_1;
            CorrespondenceStore.INSERT;
         END ELSE BEGIN
            CorrespondenceStore."External DMS Status" := Rec."External DMS Status";
            CorrespondenceStore."MS Office Doc Type" := Rec."MS Office Doc Type";
            CorrespondenceStore.Subject := Rec.Subject;
            CorrespondenceStore.Info1 := Rec.Info1;
            CorrespondenceStore.Info2 := Rec.Info2;
            CorrespondenceStore."Document GUID" := Rec."Document GUID";
            CorrespondenceStore.Name := Rec.Name;
            CorrespondenceStore."Last Date Modified" := Rec."Last Date Modified";
            CorrespondenceStore.Authorised := Rec.Authorised;
            CorrespondenceStore.FilePath := Rec.FilePath;
            CorrespondenceStore.FileName := Rec.FileName;
            CorrespondenceStore."Source of Document" := Rec."Source of Document";
            CorrespondenceStore."Document Inserted Date" := Rec."Document Inserted Date";
            CorrespondenceStore."Document Inserted By" := Rec."Document Inserted By";
            CorrespondenceStore."Last Accessed By" := Rec."Last Accessed By";
            CorrespondenceStore."Document in Paper Form" := Rec."Document in Paper Form";
            CorrespondenceStore."Additional Information" := Rec."Additional Information";
            CorrespondenceStore."Document Type" := Rec."Document Type";
            CorrespondenceStore."Document Type Text" := Rec."Document Type Text";
            CorrespondenceStore."Document Sub Type" := Rec."Document Sub Type";
            CorrespondenceStore."Document Sub Type Text" := Rec."Document Sub Type Text";
            CorrespondenceStore.Author := Rec.Author;
            CorrespondenceStore."Document Date" := Rec."Document Date";
            CorrespondenceStore."Document Expiry Date" := Rec."Document Expiry Date";
            CorrespondenceStore.Meta_Date_1 := Rec.Meta_Date_1;
            CorrespondenceStore.Meta_Date_2 := Rec.Meta_Date_2;
            CorrespondenceStore.Meta_Text_1 := Rec.Meta_Text_1;
            CorrespondenceStore.MODIFY;
          END;
        END;

    END;

    PROCEDURE NAVLFDocumentFlowAPI@100000006(VAR pvarTempBlob@100000040 : Record 99008535;pFileName@100000039 : Text;DFXBulkDocumentLink@100000049 : Record 50015) : Boolean;
    VAR
      HttpWebReqMgt@100000038 : Codeunit 1297;
      BaseURL@100000037 : Text;
      User@100000036 : Text;
      Password@100000035 : Text;
      payload@100000034 : Text;
      ResponseBody@100000033 : Text;
      ErrorDetails@100000031 : Text;
      HttpStatusCode@100000030 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000029 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000028 : Text;
      ResponseJson@100000027 : Text;
      HttpError@100000026 : Text;
      JsonArray@100000025 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000024 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000023 : Record 99008535;
      OutStr@100000022 : OutStream;
      TempBlob1@100000021 : Record 99008535;
      InStr@100000020 : InStream;
      ApiResult@100000019 : Text;
      JSONMgt@100000018 : Codeunit 5459;
      ApiRequest@100000017 : Text;
      Base64Text@100000016 : Text;
      InStr1@100000015 : InStream;
      TextRead@100000014 : Text;
      OutStr1@100000013 : OutStream;
      TempBlob2@100000012 : Record 99008535;
      Instr2@100000011 : InStream;
      Bytes@100000010 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000007 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000006 : Record 50006;
      Window@100000005 : Dialog;
      NoOfRecs@100000004 : Integer;
      CurrRec@100000003 : Integer;
      TempPath@100000002 : Text;
      m@100000000 : Integer;
      n@100000001 : Integer;
      l@100000041 : Integer;
      value@100000042 : Text;
      CurrentElement@100000043 : Text;
      CurrentValue@100000044 : Text;
      ValuePair@100000045 : Text;
      FormatChar@100000046 : TextConst 'ENU={}"''[]';
      Status@100000047 : Text;
      ErrorMessage@100000048 : Text;
      APILog@100000032 : Record 50019;
    BEGIN

      DFXSetup.GET;
      BaseURL := DFXSetup."LF API URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";
      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);


      SLEEP(1000);
      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"Repository": "'+ DFXSetup.Repository +'",');
      OutStr.WRITETEXT('"Files":');
      OutStr.WRITETEXT('[{');
      OutStr.WRITETEXT('"File": "' + pFileName + '",');
      OutStr.WRITETEXT('"LocalFile": "0",');
      OutStr.WRITETEXT('"Filename": "",');
      OutStr.WRITETEXT('"SecCode": "",');
      OutStr.WRITETEXT('"Properties":[],');
      OutStr.WRITETEXT('"Tags": ["Systemtag"],');
      OutStr.WRITETEXT('"Data": "'+ pvarTempBlob.ToBase64String + '",');
      OutStr.WRITETEXT('"VolumeID": "1"');
      OutStr.WRITETEXT('}]');
      OutStr.WRITETEXT('}');



      HttpWebReqMgt.AddBodyBlob(TempBlob);
      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);

      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);


      IF NOT JSONMgt.InitializeFromString(ApiResult) THEN
        EXIT(FALSE)
      ELSE BEGIN

      //NL.001 --start
      m := 0;
      n := 1;

      value := ApiResult;
      value := DELCHR(value,'=','{}');
      l := STRLEN(value);

      WHILE m < l DO BEGIN
        ValuePair := SELECTSTR(n,value);  // get comma separated pairs of values and element names

        m := STRPOS(value,ValuePair)+STRLEN(ValuePair); // move pointer to the end of the current pair in Value

        ValuePair := DELCHR(ValuePair,'=',FormatChar);

        CurrentElement := COPYSTR(ValuePair,1,STRPOS(ValuePair,':'));
        CurrentElement := DELCHR(CurrentElement,'=',':');

        CurrentValue := COPYSTR(ValuePair,STRPOS(ValuePair,':'));
        CurrentValue := DELCHR(CurrentValue,'=',':');

      CASE CurrentElement OF
              'Status':
                // must be a new record or lookup the existing record
                BEGIN
                  Status := CurrentValue;
                  END;
              'ErrorMessage':
                BEGIN
                  ErrorMessage := CurrentValue;
                END;
      END;
      n := n +1;//for getting all the data
      END;
      COMMIT;
      IF Status = 'Success' THEN BEGIN
        MESSAGE('Document upload successful');
        APILog.LogEntries('NAVLITE API',BaseURL,FORMAT(DFXBulkDocumentLink.Type),DFXBulkDocumentLink."No.",TRUE,'');
        EXIT(TRUE);
      END
      ELSE
      IF Status = 'Error' THEN BEGIN
        //MESSAGE(ErrorMessage);
        APILog.LogEntries('NAVLITE API',BaseURL,FORMAT(DFXBulkDocumentLink.Type),DFXBulkDocumentLink."No.",FALSE,ErrorMessage);
        EXIT(FALSE);
      END;
        //NL.001 --end

      END;
      END ELSE
       ERROR(GETLASTERRORTEXT);

      Window.CLOSE;
    END;

    PROCEDURE ElasticSearchAPI@100000011(SearchText@100000029 : Text;NAVLITE@100000040 : Record 50004) : Boolean;
    VAR
      HttpWebReqMgt@100000020 : Codeunit 1297;
      BaseURL@100000019 : Text;
      User@100000018 : Text;
      Password@100000017 : Text;
      payload@100000016 : Text;
      ResponseBody@100000015 : Text;
      ErrorMessage@100000014 : Text;
      ErrorDetails@100000013 : Text;
      HttpStatusCode@100000012 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000010 : Text;
      ResponseJson@100000009 : Text;
      HttpError@100000008 : Text;
      JsonArray@100000007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000005 : Record 99008535;
      OutStr@100000004 : OutStream;
      TempBlob1@100000003 : Record 99008535;
      InStr@100000002 : InStream;
      ApiResult@100000001 : Text;
      JSONMgt@100000000 : Codeunit 5459;
      ApiRequest@100000021 : Text;
      RequestStr@100000022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      BlobStr@100000023 : InStream;
      TempBlob2@100000024 : Record 99008535;
      ResStream@100000025 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      ResStreamReader@100000026 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      Response@100000027 : Text;
      DFXSetup@100000028 : Record 50006;
      m@100000039 : Integer;
      n@100000038 : Integer;
      l@100000037 : Integer;
      value@100000036 : Text;
      CurrentElement@100000035 : Text;
      CurrentValue@100000034 : Text;
      ValuePair@100000033 : Text;
      Status@100000032 : Text;
      APILog@100000030 : Record 50019;
      FormatChar@100000031 : TextConst 'ENU={}"''[]';
      Window@100000041 : Dialog;
      NoOfRecs@100000044 : Integer;
      CurrRec@100000043 : Integer;
      TempPath@100000042 : Text;
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."Elastic Serarch API URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";


      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);

      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"Repository":"'+ DFXSetup.Repository +'",');
      OutStr.WRITETEXT('"Columns":');
      OutStr.WRITETEXT('[');
      OutStr.WRITETEXT('[');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"SearchFieldType":0,');
      OutStr.WRITETEXT('"BaseField":"Text",');
      OutStr.WRITETEXT('"Value":"'+ SearchText +'",');
      OutStr.WRITETEXT('"Condition":0');
      OutStr.WRITETEXT('}');
      OutStr.WRITETEXT(']');
      OutStr.WRITETEXT('],');
      OutStr.WRITETEXT('"Page":1,');
      OutStr.WRITETEXT('"No":100,');
      OutStr.WRITETEXT('"ColumnSortType":1,');
      OutStr.WRITETEXT('"ColumnName":"Client Name",');
      OutStr.WRITETEXT('"ColumnSortOrder":0');
      OutStr.WRITETEXT('}');


      HttpWebReqMgt.AddBodyBlob(TempBlob);

      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText(ResponseBody,TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);

      IF NOT JSONMgt.InitializeFromString(ApiResult) THEN
        EXIT(FALSE)
      ELSE BEGIN

      //NL.001 --start
      m := 0;
      n := 1;

      value := ApiResult;
      value := DELCHR(value,'=','{}');
      l := STRLEN(value);

      WHILE m < l DO BEGIN
        ValuePair := SELECTSTR(n,value);  // get comma separated pairs of values and element names

        m := STRPOS(value,ValuePair)+STRLEN(ValuePair); // move pointer to the end of the current pair in Value

        ValuePair := DELCHR(ValuePair,'=',FormatChar);

        CurrentElement := COPYSTR(ValuePair,1,STRPOS(ValuePair,':'));
        CurrentElement := DELCHR(CurrentElement,'=',':');

        CurrentValue := COPYSTR(ValuePair,STRPOS(ValuePair,':'));
        CurrentValue := DELCHR(CurrentValue,'=',':');

      CASE CurrentElement OF
              'Status':
                // must be a new record or lookup the existing record
                BEGIN
                  Status := CurrentValue;
                  END;
              'ErrorMessage':
                BEGIN
                  ErrorMessage := CurrentValue;
                END;
      END;
      n := n +1;//for getting all the data
      END;
      COMMIT;
      IF Status = 'Success' THEN BEGIN
        MESSAGE(ApiResult);
        APILog.LogEntries('Elastic Search API',BaseURL,FORMAT(NAVLITE.Type),NAVLITE."No.",TRUE,'');
        EXIT(TRUE);
      END
      ELSE
      IF Status = 'Error' THEN BEGIN
        //MESSAGE(ErrorMessage);
        APILog.LogEntries('Elastic Search API',BaseURL,FORMAT(NAVLITE.Type),NAVLITE."No.",FALSE,ErrorMessage);
        EXIT(FALSE);
      END;
        //NL.001 --end

      END;
      END ELSE
       ERROR(GETLASTERRORTEXT);

      Window.CLOSE;
    END;

    [EventSubscriber(Table,50016,OnAfterModifyEvent)]
    PROCEDURE DFXCorresPondenceStoreOnModify@100000012(VAR Rec@100000000 : Record 50016;VAR xRec@100000001 : Record 50016;RunTrigger@100000003 : Boolean);
    VAR
      CorrespondenceStore@100000002 : Record 9068660;
    BEGIN
      //IF RunTrigger THEN
      IF CorrespondenceStore.FINDFIRST THEN BEGIN
        IF Rec."LaserFiche Entry ID" <> 0 THEN BEGIN
          IF Rec.Type = Rec.Type::Client THEN
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Client)
          ELSE IF Rec.Type = Rec.Type::Entity THEN
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Entity);

          CorrespondenceStore.SETRANGE("No.",Rec."No.");
          CorrespondenceStore.SETRANGE("LaserFiche Entry ID",Rec."LaserFiche Entry ID");
          IF CorrespondenceStore.FINDFIRST THEN BEGIN
            CorrespondenceStore.Type := Rec.Type;
            CorrespondenceStore."No." := Rec."No.";
            CorrespondenceStore.ID := Rec.ID;
            CorrespondenceStore."External DMS Status" := Rec."External DMS Status";
            CorrespondenceStore."MS Office Doc Type" := Rec."MS Office Doc Type";
            CorrespondenceStore.Subject := Rec.Subject;
            CorrespondenceStore.Info1 := Rec.Info1;
            CorrespondenceStore.Info2 := Rec.Info2;
            CorrespondenceStore."Document GUID" := Rec."Document GUID";
            CorrespondenceStore.Name := Rec.Name;
            CorrespondenceStore."Last Date Modified" := Rec."Last Date Modified";
            CorrespondenceStore.Authorised := Rec.Authorised;
            CorrespondenceStore.FilePath := Rec.FilePath;
            CorrespondenceStore.FileName := Rec.FileName;
            CorrespondenceStore."Source of Document" := Rec."Source of Document";
            CorrespondenceStore."Document Inserted Date" := Rec."Document Inserted Date";
            CorrespondenceStore."Document Inserted By" := Rec."Document Inserted By";
            CorrespondenceStore."Last Accessed By" := Rec."Last Accessed By";
            CorrespondenceStore."Document in Paper Form" := Rec."Document in Paper Form";
            CorrespondenceStore."Additional Information" := Rec."Additional Information";
            CorrespondenceStore."Document Type" := Rec."Document Type";
            CorrespondenceStore."Document Type Text" := Rec."Document Type Text";
            CorrespondenceStore."Document Sub Type" := Rec."Document Sub Type";
            CorrespondenceStore."Document Sub Type Text" := Rec."Document Sub Type Text";
            CorrespondenceStore.Author := Rec.Author;
            CorrespondenceStore."Document Date" := Rec."Document Date";
            CorrespondenceStore."Document Expiry Date" := Rec."Document Expiry Date";
            CorrespondenceStore."LaserFiche Entry ID" := Rec."LaserFiche Entry ID";
            CorrespondenceStore.Meta_Date_1 := Rec.Meta_Date_1;
            CorrespondenceStore.Meta_Date_2 := Rec.Meta_Date_2;
            CorrespondenceStore.Meta_Text_1 := Rec.Meta_Text_1;
            CorrespondenceStore.MODIFY;
        END;
         END;
         END;
    END;

    BEGIN
    {
      //Create functionality When a document is created in External system it will create,update,delete a entry in Correspondance store
      //NAV attribute is now on one - one.. 14-09-2021 checked if entry exxists
      //checked if entry exxists
      //IF Yes then unlink and link
      //IF No then Link only

      //NL.001  NAVLITE Bugs - V1
    }
    END.
  }
}

OBJECT Codeunit 50005 DFX Business Rules
{
  OBJECT-PROPERTIES
  {
    Date=29-07-22;
    Time=13:12:50;
    Modified=Yes;
    Version List=DFX VEGA;
  }
  PROPERTIES
  {
    TableNo=9069068;
    OnRun=BEGIN
            CASE Rec."Function ID" OF
              'PASS-EXP' : DateOnpassportExpired(Rec);
              'JFSC-ENT' :  JFSCEntityNotify(Rec);
              'HMRC-ENT' : HMRCEntityNotify(Rec);
              'JFSC-HMRC' : JFSC_HMRCEntityNotify(Rec);
              'PASS-EXP30': DateOnpassportExpired30D(Rec);
              'PASS-EXP60': DateOnpassportExpired60D(Rec);
              'PASS-EXP90': DateOnpassportExpired90D(Rec);
            END;
          END;

  }
  CODE
  {
    VAR
      BusinessRulesManagement@1000000000 : Codeunit 9068611;

    LOCAL PROCEDURE JFSCEntityNotify@100000001(VAR ScheduledBusinessRuleReg@100000000 : Record 9069068);
    VAR
      DFXSetup@100000001 : Record 50006;
      ClientEntity@100000002 : Record 9068508;
      RecordURL@100000003 : Text;
      StrConvert@100000004 : Text;
      textLoop@100000005 : Text;
      i@100000006 : Integer;
      len@100000007 : Integer;
    BEGIN
      DFXSetup.RESET;
      DFXSetup.GET;
      IF DFXSetup."JFSC Entity Type" <> '' THEN BEGIN
          ClientEntity.SETRANGE("Client No.",ScheduledBusinessRuleReg."Attached To No.");
          ClientEntity.SETFILTER("Entity Type",DFXSetup."JFSC Entity Type");
          ClientEntity.SETRANGE("Date Appointed",TODAY);
          IF ClientEntity.FINDSET THEN REPEAT
            RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Client Entities",ClientEntity);
            BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,ClientEntity."Client No.",ClientEntity."Entity No.",ClientEntity."Entity Type",'','');
          UNTIL ClientEntity.NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE HMRCEntityNotify@100000027(VAR ScheduledBusinessRuleReg@100000000 : Record 9069068);
    VAR
      DFXSetup@100000001 : Record 50006;
      ClientEntity@100000002 : Record 9068508;
      RecordURL@100000003 : Text;
      StrConvert@100000004 : Text;
      textLoop@100000005 : Text;
      i@100000006 : Integer;
      len@100000007 : Integer;
    BEGIN
      DFXSetup.RESET;
      DFXSetup.GET;
      IF DFXSetup."HMRC Entity Type" <> '' THEN BEGIN
          ClientEntity.SETRANGE("Client No.",ScheduledBusinessRuleReg."Attached To No.");
          ClientEntity.SETFILTER("Entity Type",DFXSetup."HMRC Entity Type");
          ClientEntity.SETRANGE("Date Appointed",TODAY);
          IF ClientEntity.FINDSET THEN REPEAT
            RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Client Entities",ClientEntity);
            BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,ClientEntity."Client No.",ClientEntity."Entity No.",ClientEntity."Entity Type",'','');
          UNTIL ClientEntity.NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE JFSC_HMRCEntityNotify@100000030(VAR ScheduledBusinessRuleReg@100000000 : Record 9069068);
    VAR
      DFXSetup@100000001 : Record 50006;
      ClientEntity@100000002 : Record 9068508;
      RecordURL@100000003 : Text;
      StrConvert@100000004 : Text;
      textLoop@100000005 : Text;
      i@100000006 : Integer;
      len@100000007 : Integer;
    BEGIN
      DFXSetup.RESET;
      DFXSetup.GET;
      IF DFXSetup."JFSC_HMRC Entity Type" <> '' THEN BEGIN
          ClientEntity.SETRANGE("Client No.",ScheduledBusinessRuleReg."Attached To No.");
          ClientEntity.SETFILTER("Entity Type",DFXSetup."JFSC_HMRC Entity Type");
          ClientEntity.SETRANGE("Date Appointed",TODAY);
          IF ClientEntity.FINDSET THEN REPEAT
            RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Client Entities",ClientEntity);
            BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,ClientEntity."Client No.",ClientEntity."Entity No.",ClientEntity."Entity Type",'','');
          UNTIL ClientEntity.NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE DateOnpassportExpired@100000000(VAR ScheduledBusinessRuleReg@100000000 : Record 9069068);
    VAR
      Client@100000002 : Record 9068500;
      RecordURL@100000001 : Text;
      Entity@100000003 : Record 9068505;
      Date90@100000005 : Date;
      Date60@100000004 : Date;
      EntityRec@100000006 : Record 9068505;
      DFXSetup@100000007 : Record 50006;
      ClientEntity@100000008 : Record 9068508;
      UserDefinedFieldData@100000009 : Record 9068256;
      DeceasedAdditional@100000010 : Boolean;
    BEGIN
      DFXSetup.RESET;
      DFXSetup.GET;
      UserDefinedFieldData.RESET;
      UserDefinedFieldData.SETRANGE("Linked To No.",ScheduledBusinessRuleReg."Attached To No.");
      UserDefinedFieldData.SETFILTER(Code,'Deceased|DECEASED');
      IF NOT UserDefinedFieldData.FINDFIRST THEN BEGIN
        DeceasedAdditional := FALSE;
        END ELSE
        DeceasedAdditional := TRUE;

      IF NOT DeceasedAdditional THEN BEGIN
        ClientEntity.RESET;
        ClientEntity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
        ClientEntity.SETFILTER("Entity Type",DFXSetup."Entity Type Allowed");
        IF ClientEntity.FINDSET THEN BEGIN
          Entity.RESET;
          Entity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          Entity.SETFILTER("Passport expiry date",'<%1',TODAY);
          Entity.SETFILTER("Passport number",'<>%1','');
          Entity.SETFILTER("Date of Death",'=%1',0D);
          Entity.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF Entity.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",Entity);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,Entity."Entity No.",Entity."Passport number",'First','','');
              DFXVEGAInsertBreach(Entity,Entity."Passport number",'First');
          UNTIL Entity.NEXT = 0;

          EntityRec.RESET;
          EntityRec.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
         EntityRec.SETFILTER("Passport/ID Expiry Date (2)",'<%1',TODAY);
          EntityRec.SETFILTER("Passport/ID Number (2)",'<>%1','');
          EntityRec.SETFILTER("Date of Death",'=%1',0D);
          EntityRec.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF EntityRec.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",EntityRec);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,EntityRec."Entity No.",EntityRec."Passport/ID Number (2)",'Second','','');
              DFXVEGAInsertBreach(EntityRec,EntityRec."Passport/ID Number (2)",'Second');
            UNTIL EntityRec.NEXT = 0;
        END;

        ClientEntity.RESET;
        ClientEntity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
        ClientEntity.SETFILTER("Entity Type",DFXSetup."Entity Type Allowed Cont.");
        IF ClientEntity.FINDSET THEN BEGIN
          Entity.RESET;
          Entity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          Entity.SETFILTER("Passport expiry date",'<%1',TODAY);
          Entity.SETFILTER("Passport number",'<>%1','');
          Entity.SETFILTER("Date of Death",'=%1',0D);
          Entity.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF Entity.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",Entity);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,Entity."Entity No.",Entity."Passport number",'First','','');
              DFXVEGAInsertBreach(Entity,Entity."Passport number",'First');
          UNTIL Entity.NEXT = 0;

          EntityRec.RESET;
          EntityRec.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
         EntityRec.SETFILTER("Passport/ID Expiry Date (2)",'<%1',TODAY);
          EntityRec.SETFILTER("Passport/ID Number (2)",'<>%1','');
          EntityRec.SETFILTER("Date of Death",'=%1',0D);
          EntityRec.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF EntityRec.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",EntityRec);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,EntityRec."Entity No.",EntityRec."Passport/ID Number (2)",'Second','','');
              DFXVEGAInsertBreach(EntityRec,EntityRec."Passport/ID Number (2)",'Second');
            UNTIL EntityRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE DateOnpassportExpired30D@100000002(VAR ScheduledBusinessRuleReg@100000000 : Record 9069068);
    VAR
      RecordURL@100000003 : Text;
      Entity@100000002 : Record 9068505;
      Date30@100000001 : Date;
      EntityRec@100000005 : Record 9068505;
      ClientEntity@100000006 : Record 9068508;
      DFXSetup@100000004 : Record 50006;
      UserDefinedFieldData@100000007 : Record 9068256;
      DeceasedAdditional@100000008 : Boolean;
    BEGIN
      Date30 := CALCDATE('<+30D>',TODAY);
      DFXSetup.RESET;
      DFXSetup.GET;

      UserDefinedFieldData.RESET;
      UserDefinedFieldData.SETRANGE("Linked To No.",ScheduledBusinessRuleReg."Attached To No.");
      UserDefinedFieldData.SETFILTER(Code,'Deceased|DECEASED');
      IF NOT UserDefinedFieldData.FINDFIRST THEN BEGIN
        DeceasedAdditional := FALSE;
        END ELSE
        DeceasedAdditional := TRUE;

      IF NOT DeceasedAdditional THEN BEGIN
          ClientEntity.RESET;
          ClientEntity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          ClientEntity.SETFILTER("Entity Type",DFXSetup."Entity Type Allowed");
          IF ClientEntity.FINDSET THEN BEGIN
            Entity.RESET;
            Entity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
            Entity.SETFILTER("Passport expiry date",'%1..%2',TODAY,Date30);
            Entity.SETFILTER("Passport number",'<>%1','');
            Entity.SETFILTER("Date of Death",'=%1',0D);
            Entity.SETFILTER("Search Name",'<>*%1*','DECEASED');
            IF Entity.FINDFIRST THEN REPEAT
                RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",Entity);
                BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,Entity."Entity No.",Entity."Passport number",'First','','');
                DFXVEGAInsertBreach(Entity,Entity."Passport number",'First');
            UNTIL Entity.NEXT = 0;

            EntityRec.RESET;
            EntityRec.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
            EntityRec.SETFILTER("Passport/ID Expiry Date (2)",'%1..%2',TODAY,Date30);
            EntityRec.SETFILTER("Passport/ID Number (2)",'<>%1','');
            EntityRec.SETFILTER("Date of Death",'=%1',0D);
            EntityRec.SETFILTER("Search Name",'<>*%1*','Deceased');
            IF EntityRec.FINDFIRST THEN REPEAT
                RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",EntityRec);
                BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,EntityRec."Entity No.",EntityRec."Passport/ID Number (2)",'Second','','');
                DFXVEGAInsertBreach(EntityRec,EntityRec."Passport/ID Number (2)",'Second');
              UNTIL EntityRec.NEXT = 0;

           END;

          ClientEntity.RESET;
          ClientEntity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          ClientEntity.SETFILTER("Entity Type",DFXSetup."Entity Type Allowed Cont.");
          IF ClientEntity.FINDSET THEN BEGIN
            Entity.RESET;
            Entity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
            Entity.SETFILTER("Passport expiry date",'%1..%2',TODAY,Date30);
            Entity.SETFILTER("Passport number",'<>%1','');
            Entity.SETFILTER("Date of Death",'=%1',0D);
            Entity.SETFILTER("Search Name",'<>*%1*','DECEASED');
            IF Entity.FINDFIRST THEN REPEAT
                RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",Entity);
                BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,Entity."Entity No.",Entity."Passport number",'First','','');
                DFXVEGAInsertBreach(Entity,Entity."Passport number",'First');
            UNTIL Entity.NEXT = 0;

            EntityRec.RESET;
            EntityRec.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
            EntityRec.SETFILTER("Passport/ID Expiry Date (2)",'%1..%2',TODAY,Date30);
            EntityRec.SETFILTER("Passport/ID Number (2)",'<>%1','');
            EntityRec.SETFILTER("Date of Death",'=%1',0D);
            EntityRec.SETFILTER("Search Name",'<>*%1*','DECEASED');
            IF EntityRec.FINDFIRST THEN REPEAT
                RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",EntityRec);
                BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,EntityRec."Entity No.",EntityRec."Passport/ID Number (2)",'Second','','');
                DFXVEGAInsertBreach(EntityRec,EntityRec."Passport/ID Number (2)",'Second');
              UNTIL EntityRec.NEXT = 0;

        END;
      END;
    END;

    LOCAL PROCEDURE DateOnpassportExpired60D@100000003(VAR ScheduledBusinessRuleReg@100000000 : Record 9069068);
    VAR
      Client@100000004 : Record 9068500;
      RecordURL@100000003 : Text;
      Entity@100000002 : Record 9068505;
      Date60@100000001 : Date;
      Date30@100000005 : Date;
      EntityRec@100000006 : Record 9068505;
      DFXSetup@100000007 : Record 50006;
      ClientEntity@100000008 : Record 9068508;
      UserDefinedFieldData@100000009 : Record 9068256;
    BEGIN
      Date60 := CALCDATE('<+60D>',TODAY);
      Date30 := CALCDATE('<+30D>',TODAY);
      DFXSetup.RESET;
      DFXSetup.GET;

      UserDefinedFieldData.RESET;
      UserDefinedFieldData.SETRANGE("Linked To No.",ScheduledBusinessRuleReg."Attached To No.");
      UserDefinedFieldData.SETFILTER(Code,'Deceased|DECEASED');
      IF NOT UserDefinedFieldData.FINDFIRST THEN BEGIN
        ClientEntity.RESET;
        ClientEntity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
        ClientEntity.SETFILTER("Entity Type",DFXSetup."Entity Type Allowed");
        IF ClientEntity.FINDSET THEN BEGIN
          Entity.RESET;
          Entity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          Entity.SETFILTER("Passport expiry date",'%1..%2',Date30,Date60);
          Entity.SETFILTER("Passport number",'<>%1','');
          Entity.SETFILTER("Date of Death",'=%1',0D);
          Entity.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF Entity.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",Entity);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,Entity."Entity No.",Entity."Passport number",'First','','');
              DFXVEGAInsertBreach(Entity,Entity."Passport number",'First');
          UNTIL Entity.NEXT = 0;

          EntityRec.RESET;
          EntityRec.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          EntityRec.SETFILTER("Passport/ID Expiry Date (2)",'%1..%2',Date30,Date60);
          EntityRec.SETFILTER("Passport/ID Number (2)",'<>%1','');
          EntityRec.SETFILTER("Date of Death",'=%1',0D);
          EntityRec.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF EntityRec.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",EntityRec);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,EntityRec."Entity No.",EntityRec."Passport/ID Number (2)",'Second','','');
              DFXVEGAInsertBreach(EntityRec,EntityRec."Passport/ID Number (2)",'Second');
            UNTIL EntityRec.NEXT = 0;
        END;

        ClientEntity.RESET;
        ClientEntity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
        ClientEntity.SETFILTER("Entity Type",DFXSetup."Entity Type Allowed Cont.");
        IF ClientEntity.FINDSET THEN BEGIN
          Entity.RESET;
          Entity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          Entity.SETFILTER("Passport expiry date",'%1..%2',Date30,Date60);
          Entity.SETFILTER("Passport number",'<>%1','');
          Entity.SETFILTER("Date of Death",'=%1',0D);
          Entity.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF Entity.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",Entity);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,Entity."Entity No.",Entity."Passport number",'First','','');
              DFXVEGAInsertBreach(Entity,Entity."Passport number",'First');
          UNTIL Entity.NEXT = 0;

          EntityRec.RESET;
          EntityRec.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          EntityRec.SETFILTER("Passport/ID Expiry Date (2)",'%1..%2',Date30,Date60);
          EntityRec.SETFILTER("Passport/ID Number (2)",'<>%1','');
          EntityRec.SETFILTER("Date of Death",'=%1',0D);
          EntityRec.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF EntityRec.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",EntityRec);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,EntityRec."Entity No.",EntityRec."Passport/ID Number (2)",'Second','','');
              DFXVEGAInsertBreach(EntityRec,EntityRec."Passport/ID Number (2)",'Second');
            UNTIL EntityRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE DateOnpassportExpired90D@100000004(VAR ScheduledBusinessRuleReg@100000000 : Record 9069068);
    VAR
      Client@100000004 : Record 9068500;
      RecordURL@100000003 : Text;
      Entity@100000002 : Record 9068505;
      Date90@100000001 : Date;
      Date60@100000005 : Date;
      EntityRec@100000006 : Record 9068505;
      DFXSetup@100000007 : Record 50006;
      ClientEntity@100000008 : Record 9068508;
      UserDefinedFieldData@100000009 : Record 9068256;
    BEGIN
      Date90 := CALCDATE('<+90D>',TODAY);
      Date60 := CALCDATE('<+60D>',TODAY);
      DFXSetup.RESET;
      DFXSetup.GET;

      UserDefinedFieldData.RESET;
      UserDefinedFieldData.SETRANGE("Linked To No.",ScheduledBusinessRuleReg."Attached To No.");
      UserDefinedFieldData.SETFILTER(Code,'Deceased|DECEASED');
      IF NOT UserDefinedFieldData.FINDFIRST THEN BEGIN
        ClientEntity.RESET;
        ClientEntity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
        ClientEntity.SETFILTER("Entity Type",DFXSetup."Entity Type Allowed");
        IF ClientEntity.FINDSET THEN BEGIN
          Entity.RESET;
          Entity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          Entity.SETFILTER("Passport expiry date",'%1..%2',Date60,Date90);
          Entity.SETFILTER("Passport number",'<>%1','');
          Entity.SETFILTER("Date of Death",'=%1',0D);
          Entity.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF Entity.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",Entity);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,Entity."Entity No.",Entity."Passport number",'First','','');
              DFXVEGAInsertBreach(Entity,Entity."Passport number",'First');
          UNTIL Entity.NEXT = 0;

          EntityRec.RESET;
          EntityRec.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          EntityRec.SETFILTER("Passport/ID Expiry Date (2)",'%1..%2',Date60,Date90);
          EntityRec.SETFILTER("Passport/ID Number (2)",'<>%1','');
          EntityRec.SETFILTER("Date of Death",'=%1',0D);
          EntityRec.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF EntityRec.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",EntityRec);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,EntityRec."Entity No.",EntityRec."Passport/ID Number (2)",'Second','','');
              DFXVEGAInsertBreach(EntityRec,EntityRec."Passport/ID Number (2)",'Second');
            UNTIL EntityRec.NEXT = 0;
        END;

        ClientEntity.RESET;
        ClientEntity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
        ClientEntity.SETFILTER("Entity Type",DFXSetup."Entity Type Allowed Cont.");
        IF ClientEntity.FINDSET THEN BEGIN
          Entity.RESET;
          Entity.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          Entity.SETFILTER("Passport expiry date",'%1..%2',Date60,Date90);
          Entity.SETFILTER("Passport number",'<>%1','');
          Entity.SETFILTER("Date of Death",'=%1',0D);
          Entity.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF Entity.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",Entity);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,Entity."Entity No.",Entity."Passport number",'First','','');
              DFXVEGAInsertBreach(Entity,Entity."Passport number",'First');
          UNTIL Entity.NEXT = 0;

          EntityRec.RESET;
          EntityRec.SETRANGE("Entity No.",ScheduledBusinessRuleReg."Attached To No.");
          EntityRec.SETFILTER("Passport/ID Expiry Date (2)",'%1..%2',Date60,Date90);
          EntityRec.SETFILTER("Passport/ID Number (2)",'<>%1','');
          EntityRec.SETFILTER("Date of Death",'=%1',0D);
          EntityRec.SETFILTER("Search Name",'<>*%1*','DECEASED');
          IF EntityRec.FINDFIRST THEN REPEAT
              RecordURL := GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Personal Entity Card",EntityRec);
              BusinessRulesManagement.CreateBreach(ScheduledBusinessRuleReg,RecordURL,EntityRec."Entity No.",EntityRec."Passport/ID Number (2)",'Second','','');
              DFXVEGAInsertBreach(EntityRec,EntityRec."Passport/ID Number (2)",'Second');
            UNTIL EntityRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE DFXVEGAInsertBreach@100000005(pRecEntity@100000000 : Record 9068505;pPassportNo@100000001 : Code[100];pFirstSecond@100000002 : Text) : Boolean;
    VAR
      DFXVEGAInterface@100000003 : Record 50020;
      DFXVEGA@100000005 : Record 50020;
      DFXVEGALast@100000004 : Record 50020;
      NoSeriesManagement@100000006 : Codeunit 396;
      Client@100000011 : Record 9068500;
      ClientEntity@100000010 : Record 9068508;
      Resource@100000009 : Record 156;
      RM@100000008 : Code[20];
      "RM-Mail"@100000007 : Text;
      "RM-UserID"@100000012 : Text;
      ClientRec@100000013 : Record 9068500;
      AppointmentCount@100000014 : Integer;
      AddressRec@100000015 : Record 9068451;
    BEGIN
      DFXVEGAInterface.RESET;
      DFXVEGAInterface.SETRANGE("Passport Number",pPassportNo);
      DFXVEGAInterface.SETFILTER(Status,'<>%1|<>%2',DFXVEGAInterface.Status::Rejected,DFXVEGAInterface.Status::IdleRejected);
      IF NOT DFXVEGAInterface.FINDFIRST THEN BEGIN
        DFXVEGA.INIT;
        DFXVEGA."Entry No." := NoSeriesManagement.GetNextNo('VEGA',TODAY,TRUE);
        DFXVEGA."Entity No." := pRecEntity."Entity No.";
        DFXVEGA."Entity Name" := pRecEntity."Formal Name";
        DFXVEGA.Status := DFXVEGA.Status::UnProcessed;

            AddressRec.RESET;
            AddressRec.SETRANGE(Type,AddressRec.Type::Entity);
            AddressRec.SETRANGE("No.",pRecEntity."Entity No.");
            IF AddressRec.FINDFIRST THEN;
             {IF AddressRec."E-Mail" = '' THEN BEGIN
               MESSAGE('Email is NULL! Can''t proceed further');
             END;}
        DFXVEGA.Email := AddressRec."E-Mail";

        IF pFirstSecond = 'First' THEN BEGIN
          IF pRecEntity."Passport number" <> '' THEN BEGIN
            DFXVEGA."First/Second" := DFXVEGA."First/Second"::First;
            DFXVEGA."Passport Number" := pRecEntity."Passport number";
            DFXVEGA."Passport Expiry Date" := pRecEntity."Passport expiry date";
            DFXVEGA."Passport Issue Date" := pRecEntity."Passport/ID Issue Date";
            DFXVEGA."Passport Country of Issue" := pRecEntity."Passport country of issue"
          END
        END
        ELSE IF pFirstSecond = 'Second' THEN BEGIN
          IF pRecEntity."Passport/ID Number (2)" <> '' THEN BEGIN
            DFXVEGA."First/Second" := DFXVEGA."First/Second"::Second;
            DFXVEGA."Passport Number" := pRecEntity."Passport/ID Number (2)";
            DFXVEGA."Passport Expiry Date" := pRecEntity."Passport/ID Expiry Date (2)";
            DFXVEGA."Passport Issue Date" := pRecEntity."Passport/ID Issue Date (2)";
            DFXVEGA."Passport Country of Issue" := pRecEntity."Passport/ID Country (2)";
          END;
        END;


      CLEAR(RM);
      CLEAR("RM-Mail");
      CLEAR("RM-UserID");

        ClientEntity.RESET;
        ClientEntity.SETRANGE("Entity No.",DFXVEGA."Entity No.");
        AppointmentCount := 0;
        IF ClientEntity.FINDSET THEN
          REPEAT
            AppointmentCount +=1;
          UNTIL ClientEntity.NEXT = 0;

        IF ClientEntity.FINDSET THEN
          REPEAT

          IF AppointmentCount = 1 THEN BEGIN
          Client.RESET;
          Client.SETRANGE("Client No.",ClientEntity."Client No.");
          IF Client.FINDFIRST THEN
            RM := Client.ClientAnalysisB
         END
         ELSE BEGIN
          ClientRec.RESET;
          ClientRec.SETRANGE("Client No.",ClientEntity."Client No.");
          ClientRec.SETRANGE("Lead Client" , TRUE);
          IF ClientRec.FINDFIRST THEN REPEAT
            RM := ClientRec.ClientAnalysisB;
          UNTIL ClientRec.NEXT = 0;
        END;
          UNTIL ClientEntity.NEXT = 0;

        Resource.RESET;
        Resource.SETRANGE("No.",RM);
        IF Resource.FINDFIRST THEN BEGIN
          "RM-Mail" := Resource."Email Address";
          "RM-UserID" := Resource."Login User ID";
        END;

        DFXVEGA.RESET;
        DFXVEGA."Relationship manager" := RM;
        DFXVEGA."RM Mail" := "RM-Mail";
        DFXVEGA."RM User ID" := "RM-UserID";


        DFXVEGA.INSERT;
      END
    END;

    BEGIN
    {
      11.09.20  Unnar Eliasson
                CRF56144 Function SubStatusOk amended to use VIRRGIN Sub Status

      19.07.22  Renu Priya
                VECE.01 Addition of CE filter to VEGA for filtering breach with Type
    }
    END.
  }
}

OBJECT Codeunit 50006 Accuro  Functions
{
  OBJECT-PROPERTIES
  {
    Date=29-07-22;
    Time=19:09:51;
    Modified=Yes;
    Version List=DFX VEGA;
  }
  PROPERTIES
  {
    Permissions=TableData 50019=rimd,
                TableData 50020=rimd;
    Subtype=Normal;
    OnRun=VAR
            RecDFXVEGA@100000001 : Record 50020;
            APILog@100000000 : Record 50019;
            Entity@100000002 : Record 9068505;
            LOGFunction@100000003 : 'Insert,Delete,Modify,Rename';
          BEGIN
            //CompileDirectorTrust;
            //MESSAGE('Success');

            APILog.RESET;
            APILog.SETRANGE(API,'Name Change');
            APILog.SETRANGE(Flag,FALSE);
            APILog.SETRANGE("Function",LOGFunction::Insert);
            IF APILog.FINDFIRST THEN
            REPEAT
            NameChangeAPICall(APILog."Record Type",APILog."Record No.",APILog.Name,APILog.OldName,APILog.NewName);
            UNTIL APILog.NEXT = 0;


            APILog.RESET;
            APILog.SETRANGE(API,'Partition');
            APILog.SETRANGE(Flag,FALSE);
            APILog.SETRANGE("Function",LOGFunction::Modify);
            IF APILog.FINDFIRST THEN
            REPEAT
            PartitionCodeAPICall(APILog."Record Type",APILog."Record No.",APILog.Name,APILog.OldPartitionCode,APILog.NewPartitionCode,APILog.OldPartitionGroup,APILog.NewPartitionGroup,APILog."Function");
            UNTIL APILog.NEXT = 0;


            IF RecDFXVEGA.FINDFIRST THEN
              REPEAT
               // IF RecDFXVEGA.Status = RecDFXVEGA.Status::UnProcessed THEN BEGIN
                 // VegaPassportExpiryCreateCase(RecDFXVEGA."Entry No.",RecDFXVEGA."Entity No.");
                //END
                //ELSE
                IF (RecDFXVEGA.Status = RecDFXVEGA.Status::InProcess) OR (RecDFXVEGA.Status = RecDFXVEGA.Status::InReview) THEN BEGIN
                  VegaPassportExpiryGetStatus(RecDFXVEGA."Entry No.");
              END
            UNTIL RecDFXVEGA.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      text1@100000000 : Text[2048];
      Base64@100000001 : Text;

    PROCEDURE CompileDirectorTrust@100000000();
    VAR
      ClientRec@100000005 : Record 9068500;
      ClientRec2@100000007 : Record 9068500;
      EntityRec@100000006 : Record 9068505;
      ClientEntity@100000004 : Record 9068508;
      ClientSetup@100000003 : Record 9068496;
      ClientTypeRec@100000002 : Record 9068501;
      NoticeOfMeeting@100000001 : Record 50003;
      SubClientEntity@100000000 : Record 9068508;
      BusinessGroupRole@100000008 : Record 9068252;
      Resource@100000009 : Record 156;
    BEGIN
      ClientSetup.GET;

      NoticeOfMeeting.DELETEALL;

      IF ClientRec.FINDSET THEN REPEAT
        ClientRec.CALCFIELDS("Client Type Type");
        IF ClientRec."Client Type Type" IN [ClientRec."Client Type Type"::Company,ClientRec."Client Type Type"::Trust] THEN BEGIN
          ClientEntity.SETRANGE("Client No.",ClientRec."Client No.");
          ClientEntity.SETFILTER("Entity Type",'%1|%2',ClientSetup."Director Code",ClientSetup."Trustee Code");
          IF ClientEntity.FINDSET THEN REPEAT
            NoticeOfMeeting.INIT;
            NoticeOfMeeting."Master Client No." := ClientRec."Client No.";
            NoticeOfMeeting."Master Client Name" := ClientRec."Client Formal Name";
            IF ClientRec."Client Type Type" = ClientRec."Client Type Type"::Company THEN //DFX-01 Start
              NoticeOfMeeting."Client Type" :=  'Company';
            IF ClientRec."Client Type Type" = ClientRec."Client Type Type"::Trust THEN
              NoticeOfMeeting."Client Type" :=  'Trust';
            NoticeOfMeeting."First Partition Code" := ClientRec."First Partition Code";//DFX-01 End
            NoticeOfMeeting."Director Quorum" := ClientRec."Directors' Quorum";
            NoticeOfMeeting."Purpose-Activity Code" := ClientRec."Purpose-Activity Code"; // In House
            NoticeOfMeeting."Purpose/Objective" := ClientRec."Purpose/Objective"; // In House
            CASE ClientEntity.Type OF
              ClientEntity.Type::Client : BEGIN
                NoticeOfMeeting.Type := NoticeOfMeeting.Type::Client;
                NoticeOfMeeting."Corporate Director/Trustee" := ClientEntity."Entity No.";
                NoticeOfMeeting."Corp Director/Trustee Name" := ClientEntity.GetFormalName;
              END;
              ClientEntity.Type::Entity : BEGIN
                IF EntityRec.GET(ClientEntity."Entity No.") THEN BEGIN
                  IF EntityRec."Personal/Corporate" = EntityRec."Personal/Corporate"::Personal THEN BEGIN
                    NoticeOfMeeting.Type := NoticeOfMeeting.Type::"Personal Entity";
                    NoticeOfMeeting."Individual Director/Trustee" := ClientEntity."Entity No.";
                    NoticeOfMeeting."Indv Director/Trust Name" := ClientEntity.GetFormalName;
                  END ELSE BEGIN
                    NoticeOfMeeting.Type := NoticeOfMeeting.Type::"Corporate Entity";
                    NoticeOfMeeting."Corporate Director/Trustee" := ClientEntity."Entity No.";
                    NoticeOfMeeting."Corp Director/Trustee Name" := ClientEntity.GetFormalName;
                  END;
                END;
              END;

              ClientEntity.Type::Resource : BEGIN //DFX-01 Begin
                IF Resource.GET(ClientEntity."Entity No.") THEN BEGIN
                  NoticeOfMeeting.Type := NoticeOfMeeting.Type::Resource;
                    NoticeOfMeeting."Individual Director/Trustee" := ClientEntity."Entity No.";
                    NoticeOfMeeting."Indv Director/Trust Name" := ClientEntity.GetFormalName;
                  END;
              END; //DFX-01 End

            END;

            BusinessGroupRole.RESET;//DFX-01 Start
            BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"First Partition");
            BusinessGroupRole.SETRANGE("Table Name",'Client');
            BusinessGroupRole.SETRANGE(Role,ClientRec."First Partition Code");
            IF BusinessGroupRole.FINDSET THEN
              NoticeOfMeeting."Partition Group" := BusinessGroupRole."Business Group Code";//DFX-01 End

            NoticeOfMeeting."Fiduciary Director/Trustee" := NoticeOfMeeting."Corporate Director/Trustee";
            NoticeOfMeeting."Fid Director/Trustee Name" := NoticeOfMeeting."Corp Director/Trustee Name";

            IF NoticeOfMeeting.Type = NoticeOfMeeting.Type::Client THEN BEGIN
              NoticeOfMeeting."Director/Trustee" := '';
              NoticeOfMeeting."Director/Trustee name" := '';
            END;

            IF NoticeOfMeeting."Director/Trustee name" = '' THEN
              NoticeOfMeeting."Director/Trustee" := '';

            IF NoticeOfMeeting.INSERT THEN;

            IF ClientEntity.Type = ClientEntity.Type::Client THEN BEGIN
              SubClientEntity.RESET;
              SubClientEntity.SETRANGE("Client No.",ClientEntity."Entity No.");
              SubClientEntity.SETFILTER("Entity Type",'%1|%2',ClientSetup."Director Code",ClientSetup."Trustee Code");
              IF SubClientEntity.FINDSET THEN REPEAT
                CLEAR(NoticeOfMeeting);
                NoticeOfMeeting.INIT;
                NoticeOfMeeting."Master Client No." := ClientRec."Client No.";
                NoticeOfMeeting."Master Client Name" := ClientRec."Client Formal Name";
                IF ClientRec."Client Type Type" = ClientRec."Client Type Type"::Company THEN //DFX-01 Start
                  NoticeOfMeeting."Client Type" :=  'Company';
                IF ClientRec."Client Type Type" = ClientRec."Client Type Type"::Trust THEN
                  NoticeOfMeeting."Client Type" :=  'Trust';
                NoticeOfMeeting."First Partition Code" := ClientRec."First Partition Code";//DFX-01 End
                NoticeOfMeeting."Director Quorum" := ClientRec."Directors' Quorum";
                NoticeOfMeeting."Purpose-Activity Code" := ClientRec."Purpose-Activity Code"; // In House
                NoticeOfMeeting."Purpose/Objective" := ClientRec."Purpose/Objective"; // In House

                ClientRec2.GET(SubClientEntity."Client No.");
                NoticeOfMeeting."Corporate Director/Trustee" := SubClientEntity."Client No.";
                NoticeOfMeeting."Corp Director/Trustee Name" := ClientRec2."Client Formal Name";
                IF ClientRec."Client Type Type" = ClientRec2."Client Type Type"::Company THEN //DFX-01 Start
                  NoticeOfMeeting."Client Type" :=  'Company';
                IF ClientRec."Client Type Type" = ClientRec2."Client Type Type"::Trust THEN
                  NoticeOfMeeting."Client Type" :=  'Trust';
                NoticeOfMeeting."First Partition Code" := ClientRec2."First Partition Code";//DFX-01 End
                NoticeOfMeeting."Purpose-Activity Code" := ClientRec2."Purpose-Activity Code"; // In House
                NoticeOfMeeting."Purpose/Objective" := ClientRec2."Purpose/Objective"; // In House
                NoticeOfMeeting."Director/Trustee" := SubClientEntity."Entity No.";
                NoticeOfMeeting."Director/Trustee name" := SubClientEntity.GetFormalName;

                CASE SubClientEntity.Type OF
                  SubClientEntity.Type::Client : NoticeOfMeeting.Type := NoticeOfMeeting.Type::Client;
                  SubClientEntity.Type::Resource : NoticeOfMeeting.Type := NoticeOfMeeting.Type::Resource;
                  SubClientEntity.Type::Entity : BEGIN
                    IF EntityRec.GET(SubClientEntity."Entity No.") THEN BEGIN
                      IF EntityRec."Personal/Corporate" = EntityRec."Personal/Corporate"::Personal THEN
                        NoticeOfMeeting.Type := NoticeOfMeeting.Type::"Personal Entity"
                      ELSE
                        NoticeOfMeeting.Type := NoticeOfMeeting.Type::"Corporate Entity";
                    END;
                  END;
                END;
                NoticeOfMeeting."Director Quorum" := ClientRec2."Directors' Quorum";
                NoticeOfMeeting."Purpose-Activity Code" := ClientRec."Purpose-Activity Code"; // In House
                NoticeOfMeeting."Purpose/Objective" := ClientRec."Purpose/Objective"; // In House
                BusinessGroupRole.RESET;//DFX-01 Start
                BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"First Partition");
                BusinessGroupRole.SETRANGE("Table Name",'Client');
                BusinessGroupRole.SETRANGE(Role,ClientRec2."First Partition Code");
                IF BusinessGroupRole.FINDSET THEN
                    NoticeOfMeeting."Partition Group" := BusinessGroupRole."Business Group Code";//DFX-01 End
                NoticeOfMeeting."Fiduciary Director/Trustee" := NoticeOfMeeting."Corporate Director/Trustee";
                NoticeOfMeeting."Fid Director/Trustee Name" := NoticeOfMeeting."Corp Director/Trustee Name";

                IF NoticeOfMeeting.Type = NoticeOfMeeting.Type::Client THEN BEGIN
                  NoticeOfMeeting."Director/Trustee" := '';
                  NoticeOfMeeting."Director/Trustee name" := '';
                END;
                IF NoticeOfMeeting."Director/Trustee name" = '' THEN
                  NoticeOfMeeting."Director/Trustee" := '';

                IF NoticeOfMeeting.INSERT THEN;
              UNTIL SubClientEntity.NEXT = 0;
            END;
          UNTIL ClientEntity.NEXT = 0;

        END;
      UNTIL ClientRec.NEXT = 0;
    END;

    [EventSubscriber(Page,9072492,OnModifyRecordEvent)]
    LOCAL PROCEDURE ClientPartitionSubModify@100000005(VAR Rec@100000000 : Record 9068500;VAR xRec@100000001 : Record 9068500;VAR AllowModify@100000002 : Boolean);
    VAR
      AllObj@100000012 : Record 2000000038;
      Client@100000011 : Record 9068500;
      Entity@100000010 : Record 9068505;
      Name@100000009 : Text;
      Function@100000008 : 'Insert,Delete,Modify';
      AdditionalDataPartitionCode@100000007 : Record 9072482;
      AddtionalCodes@100000006 : Text;
      LastStringPos@100000005 : Integer;
      PartitionCodes@100000004 : Text;
      oldPartitionCodes@100000003 : Text;
      oldAddtionalCodes@100000013 : Text;
      LastStringPos1@100000014 : Integer;
      BusinessGroupRole@100000015 : Record 9068252;
      AddtionalGroup@100000021 : Text;
      LastStringPos2@100000020 : Integer;
      PartitionGroup@100000019 : Text;
      oldPartitionGroup@100000018 : Text;
      oldAddtionalGroup@100000017 : Text;
      LastStringPos4@100000016 : Integer;
      BusinessGroupRole1@100000022 : Record 9068252;
    BEGIN
      IF xRec."First Partition Code" <> Rec."First Partition Code" THEN BEGIN
        AllObj.RESET;
        AllObj.SETRANGE("Object Type",AllObj."Object Type"::Table);
        AllObj.SETRANGE("Object Name",Rec.TABLENAME);
        IF AllObj.FINDFIRST THEN;
          oldAddtionalCodes := xRec."First Partition Code" + ',';
              AddtionalCodes := Rec."First Partition Code" + ',';
        AdditionalDataPartitionCode.RESET;
        AdditionalDataPartitionCode.SETRANGE("Main Code",FALSE);
        AdditionalDataPartitionCode.SETRANGE("Table No.",AllObj."Object ID");
        AdditionalDataPartitionCode.SETRANGE("PK Value",Rec."Client No.");
          IF AdditionalDataPartitionCode.FINDSET THEN BEGIN
              REPEAT
                oldAddtionalCodes += AdditionalDataPartitionCode."Additional Code" + ',';
                AddtionalCodes += AdditionalDataPartitionCode."Additional Code" + ',';
              UNTIL AdditionalDataPartitionCode.NEXT = 0;
        END;
        LastStringPos1 := STRLEN(oldAddtionalCodes) - 1;
        oldPartitionCodes := COPYSTR(oldAddtionalCodes,1,LastStringPos1);
        LastStringPos := STRLEN(AddtionalCodes) - 1;
        PartitionCodes := COPYSTR(AddtionalCodes,1,LastStringPos);



      BusinessGroupRole.RESET;
      BusinessGroupRole.SETFILTER("Table No.",'<>%1',0);
      BusinessGroupRole.SETRANGE(Role,xRec."First Partition Code");
      BusinessGroupRole.SETRANGE("Table Name",'Client');
      BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"First Partition");
      IF BusinessGroupRole.FINDSET THEN REPEAT
        oldAddtionalGroup += BusinessGroupRole."Business Group Code" + ',';
      UNTIL BusinessGroupRole.NEXT = 0;
      IF STRLEN(oldAddtionalGroup)>0 THEN BEGIN
        LastStringPos2 := STRLEN(oldAddtionalGroup) - 1;
        oldPartitionGroup := COPYSTR(oldAddtionalGroup,1,LastStringPos2);
      END;

      BusinessGroupRole1.RESET;
      BusinessGroupRole1.SETFILTER("Table No.",'<>%1',0);
      BusinessGroupRole1.SETRANGE(Role,Rec."First Partition Code");
      BusinessGroupRole1.SETRANGE("Table Name",'Client');
      BusinessGroupRole1.SETRANGE("Business Group Type",BusinessGroupRole1."Business Group Type"::"First Partition");
      IF BusinessGroupRole1.FINDSET THEN REPEAT
        AddtionalGroup += BusinessGroupRole1."Business Group Code" + ',';
      UNTIL BusinessGroupRole1.NEXT = 0;
      IF STRLEN(AddtionalGroup) > 0  THEN BEGIN
        LastStringPos4 := STRLEN(AddtionalGroup) - 1;
        PartitionGroup := COPYSTR(AddtionalGroup,1,LastStringPos4);
      END;


      APILogPartitionCodeEntry('Client',Rec."Client No.",Rec."Client Formal Name",oldPartitionCodes,PartitionCodes,oldPartitionGroup,PartitionGroup,"Function"::Modify);
      //PartitionCodeAPICall('Client',Rec."Client No.",Rec."Client Formal Name",oldPartitionCodes,PartitionCodes,"Function"::Modify);
      END;
    END;

    [EventSubscriber(Page,9072493,OnModifyRecordEvent)]
    LOCAL PROCEDURE EntityPartitionSubModify@100000009(VAR Rec@100000000 : Record 9068505;VAR xRec@100000001 : Record 9068505;VAR AllowModify@100000002 : Boolean);
    VAR
      AllObj@100000014 : Record 2000000038;
      Client@100000013 : Record 9068500;
      Entity@100000012 : Record 9068505;
      Name@100000011 : Text;
      Function@100000010 : 'Insert,Delete,Modify';
      AdditionalDataPartitionCode@100000009 : Record 9072482;
      AddtionalCodes@100000008 : Text;
      LastStringPos@100000007 : Integer;
      PartitionCodes@100000006 : Text;
      oldPartitionCodes@100000005 : Text;
      oldAddtionalCodes@100000004 : Text;
      LastStringPos1@100000003 : Integer;
      BusinessGroupRole@100000022 : Record 9068252;
      AddtionalGroup@100000021 : Text;
      LastStringPos2@100000020 : Integer;
      PartitionGroup@100000019 : Text;
      oldPartitionGroup@100000018 : Text;
      oldAddtionalGroup@100000017 : Text;
      LastStringPos4@100000016 : Integer;
      BusinessGroupRole1@100000015 : Record 9068252;
    BEGIN
      IF xRec."First Partition Code" <> Rec."First Partition Code" THEN BEGIN
      AllObj.RESET;
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::Table);
      AllObj.SETRANGE("Object Name",Rec.TABLENAME);
      IF AllObj.FINDFIRST THEN;
      oldAddtionalCodes := xRec."First Partition Code" + ',';
      AddtionalCodes := Rec."First Partition Code" + ',';
      AdditionalDataPartitionCode.RESET;
      AdditionalDataPartitionCode.SETRANGE("Main Code",FALSE);
      AdditionalDataPartitionCode.SETRANGE("Table No.",AllObj."Object ID");
      AdditionalDataPartitionCode.SETRANGE("PK Value",Rec."Entity No.");
        IF AdditionalDataPartitionCode.FINDSET THEN BEGIN
            REPEAT
              oldAddtionalCodes += AdditionalDataPartitionCode."Additional Code" + ',';
              AddtionalCodes += AdditionalDataPartitionCode."Additional Code" + ',';
            UNTIL AdditionalDataPartitionCode.NEXT = 0;
      END;
      LastStringPos1 := STRLEN(oldAddtionalCodes) - 1;
      oldPartitionCodes := COPYSTR(oldAddtionalCodes,1,LastStringPos1);
      LastStringPos := STRLEN(AddtionalCodes) - 1;
      PartitionCodes := COPYSTR(AddtionalCodes,1,LastStringPos);

      BusinessGroupRole.RESET;
      BusinessGroupRole.SETFILTER("Table No.",'<>%1',0);
      BusinessGroupRole.SETRANGE(Role,xRec."First Partition Code");
      BusinessGroupRole.SETRANGE("Table Name",'Entity');
      BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"First Partition");
      IF BusinessGroupRole.FINDSET THEN REPEAT
      oldAddtionalGroup += BusinessGroupRole."Business Group Code" + ',';
      UNTIL BusinessGroupRole.NEXT = 0;
      IF STRLEN(oldAddtionalGroup)>0 THEN BEGIN
      LastStringPos2 := STRLEN(oldAddtionalGroup) - 1;
      oldPartitionGroup := COPYSTR(oldAddtionalGroup,1,LastStringPos2);
      END;

      BusinessGroupRole1.RESET;
      BusinessGroupRole1.SETFILTER("Table No.",'<>%1',0);
      BusinessGroupRole1.SETRANGE(Role,Rec."First Partition Code");
      BusinessGroupRole1.SETRANGE("Table Name",'Entity');
      BusinessGroupRole1.SETRANGE("Business Group Type",BusinessGroupRole1."Business Group Type"::"First Partition");
      IF BusinessGroupRole1.FINDSET THEN REPEAT
      AddtionalGroup += BusinessGroupRole1."Business Group Code" + ',';
      UNTIL BusinessGroupRole1.NEXT = 0;
      IF STRLEN(AddtionalGroup) > 0  THEN BEGIN
      LastStringPos4 := STRLEN(AddtionalGroup) - 1;
      PartitionGroup := COPYSTR(AddtionalGroup,1,LastStringPos4);
      END;


      Name := Rec.Name + ' ' + Rec."Name 2" ;

      APILogPartitionCodeEntry('Entity',Rec."Entity No.",Name,oldPartitionCodes,PartitionCodes,oldPartitionGroup,PartitionGroup,"Function"::Modify);
      END;
    END;

    LOCAL PROCEDURE PartitionCodeAPICall@100000003(AttachedToType@100000037 : Text;AttachedToNo@100000038 : Code[250];Name@100000039 : Text[250];OldPartitionCode@100000040 : Code[250];NewPartitionCode@100000041 : Code[250];OldPartitionGroup@100000044 : Text[250];NewPartitionGroup@100000045 : Text[250];Function@100000042 : 'Insert,Delete,Modify,Rename') : Boolean;
    VAR
      HttpWebReqMgt@100000036 : Codeunit 1297;
      BaseURL@100000035 : Text;
      User@100000034 : Text;
      Password@100000033 : Text;
      payload@100000032 : Text;
      ResponseBody@100000031 : Text;
      ErrorMessage@100000030 : Text;
      ErrorDetails@100000029 : Text;
      HttpStatusCode@100000028 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000027 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000026 : Text;
      ResponseJson@100000025 : Text;
      HttpError@100000024 : Text;
      JsonArray@100000023 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000022 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000021 : Record 99008535;
      OutStr@100000020 : OutStream;
      TempBlob1@100000019 : Record 99008535;
      InStr@100000018 : InStream;
      ApiResult@100000017 : Text;
      JSONMgt@100000016 : Codeunit 5459;
      ApiRequest@100000015 : Text;
      Base64Text@100000014 : Text;
      InStr1@100000013 : InStream;
      TextRead@100000012 : Text;
      OutStr1@100000011 : OutStream;
      TempBlob2@100000010 : Record 99008535;
      Instr2@100000009 : InStream;
      Bytes@100000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000005 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000004 : Record 50006;
      Window@100000003 : Dialog;
      NoOfRecs@100000002 : Integer;
      CurrRec@100000001 : Integer;
      TempPath@100000000 : Text;
      APILog@100000043 : Record 50019;
      m@100000054 : Integer;
      n@100000053 : Integer;
      l@100000052 : Integer;
      value@100000051 : Text;
      CurrentElement@100000050 : Text;
      CurrentValue@100000049 : Text;
      ValuePair@100000048 : Text;
      Status@100000047 : Text;
      FormatChar@100000046 : TextConst 'ENU={}"''[]';
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."Partition Code URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";

      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);


      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"AttachedToType": "'+ AttachedToType +'",');
      OutStr.WRITETEXT('"AttachedToNo": "'+ AttachedToNo +'",');
      OutStr.WRITETEXT('"PartyName": "' + Name + '",');
      OutStr.WRITETEXT('"OldParitionCode":"' + OldPartitionCode + '",');
      OutStr.WRITETEXT('"NewParitionCode": "'+ NewPartitionCode + '",');
      OutStr.WRITETEXT('"Function": "'+ FORMAT("Function") + '",');
      OutStr.WRITETEXT('"EventDateTime": "'+ FORMAT(CURRENTDATETIME,0,9) + '",');
      OutStr.WRITETEXT('"oldPartitionGroup": "'+ OldPartitionGroup+'",');
      OutStr.WRITETEXT('"newPartitionGroup": "'+ NewPartitionGroup+'"');
      OutStr.WRITETEXT('}');



      HttpWebReqMgt.AddBodyBlob(TempBlob);
      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);

      //NL.001 --start
      IF NOT JSONMgt.InitializeFromString(ApiResult) THEN
        EXIT(FALSE)
      ELSE BEGIN


      m := 0;
      n := 1;

      value := ApiResult;
      value := DELCHR(value,'=','{}');
      l := STRLEN(value);

      WHILE m < l DO BEGIN
        ValuePair := SELECTSTR(n,value);  // get comma separated pairs of values and element names

        m := STRPOS(value,ValuePair)+STRLEN(ValuePair); // move pointer to the end of the current pair in Value

        ValuePair := DELCHR(ValuePair,'=',FormatChar);

        CurrentElement := COPYSTR(ValuePair,1,STRPOS(ValuePair,':'));
        CurrentElement := DELCHR(CurrentElement,'=',':');

        CurrentValue := COPYSTR(ValuePair,STRPOS(ValuePair,':'));
        CurrentValue := DELCHR(CurrentValue,'=',':');

      CASE CurrentElement OF
              'status':
                // must be a new record or lookup the existing record
                BEGIN
                  Status := CurrentValue;
                  END;
              'message':
                BEGIN
                  ErrorMessage := CurrentValue;
                END;
      END;
      n := n +1;//for getting all the data
      END;
      COMMIT;
      IF Status = 'success' THEN BEGIN
        APILog.RESET;
        APILog.SETRANGE("Record Type",AttachedToType);
        APILog.SETRANGE("Record No.",AttachedToNo);
        APILog.SETRANGE(OldPartitionCode,OldPartitionCode);
        APILog.SETRANGE(NewPartitionCode,NewPartitionCode);
        APILog.SETRANGE(OldPartitionGroup,OldPartitionGroup);
        APILog.SETRANGE(NewPartitionGroup,NewPartitionGroup);
        APILog.SETRANGE("Function","Function");
        IF APILog.FINDSET THEN BEGIN
          APILog.Flag := TRUE;
          APILog.MODIFY;
        END;
        APILog.LogEntries('Partition API',BaseURL,FORMAT(AttachedToType),AttachedToNo,TRUE,'','','',OldPartitionCode,NewPartitionCode,OldPartitionGroup,NewPartitionGroup);
        EXIT(TRUE);
      END
      ELSE
      IF Status = 'InternalError' THEN BEGIN
        //MESSAGE(ErrorMessage);
        APILog.LogEntries('Partition API',BaseURL,FORMAT(AttachedToType),AttachedToNo,FALSE,ErrorMessage,'','',OldPartitionCode,NewPartitionCode,OldPartitionGroup,NewPartitionGroup);
        EXIT(FALSE);
      END
      ELSE
      IF Status = 'DuplicationError' THEN BEGIN
        APILog.LogEntries('Partition API',BaseURL,FORMAT(AttachedToType),AttachedToNo,FALSE,ErrorMessage,'','',OldPartitionCode,NewPartitionCode,OldPartitionGroup,NewPartitionGroup);
        EXIT(FALSE);
      END;
        //NL.001 --end

      END; //ELSE
        //ERROR(GETLASTERRORTEXT);

      Window.CLOSE;

      END;
    END;

    LOCAL PROCEDURE APILogPartitionCodeEntry@100000007(AttachedToType@100000005 : Text;AttachedToNo@100000004 : Code[100];Name@100000003 : Text[100];OldPartitionCode@100000002 : Code[250];NewPartitionCode@100000001 : Code[250];OldPartitionGroup@100000008 : Code[250];NewPartitionGroup@100000007 : Code[250];Function@100000000 : 'Insert,Delete,Modify,Rename');
    VAR
      APILog@100000006 : Record 50019;
    BEGIN
      APILog.RESET;
      APILog.SETRANGE(API,'Partition');
      APILog.SETRANGE("Record Type",AttachedToType);
      APILog.SETRANGE("Record No.",AttachedToNo);
      APILog.SETRANGE(OldPartitionCode,OldPartitionCode);
      APILog.SETRANGE(NewPartitionCode,NewPartitionCode);
      APILog.SETRANGE("Function","Function");
      IF NOT APILog.FINDFIRST THEN BEGIN
        APILog.INIT;
        APILog.API := 'Partition';
        APILog."Record Type" := AttachedToType;
        APILog."Record No." := AttachedToNo;
        APILog.Name := Name;
        APILog.OldPartitionCode := OldPartitionCode;
        APILog.NewPartitionCode := NewPartitionCode;
        APILog.OldPartitionGroup := OldPartitionGroup;
        APILog.NewPartitionGroup := NewPartitionGroup;
        APILog.Status := APILog.Status::Success;
        APILog."Function" := "Function";
        APILog.Flag := FALSE;
        APILog."Created Date" := CREATEDATETIME(TODAY,TIME);
        APILog.INSERT;
      END;
    END;

    [EventSubscriber(Table,9068505,OnAfterModifyEvent)]
    PROCEDURE EntityNameModify@100000010(VAR Rec@100000000 : Record 9068505;VAR xRec@100000001 : Record 9068505;RunTrigger@100000002 : Boolean);
    VAR
      pOldName@100000003 : Text;
      pNewName@100000004 : Text;
    BEGIN
      CLEAR(pOldName);
      CLEAR(pNewName);


       IF xRec.Name <> Rec.Name THEN BEGIN
        pOldName := xRec.Name + ' ' + xRec."Name 2";
        pNewName := Rec.Name + ' ' + Rec."Name 2" ;
      END;


      IF xRec."Name 2" <> Rec."Name 2" THEN BEGIN
        pOldName := xRec.Name + ' ' + xRec."Name 2";
        pNewName := Rec.Name + ' ' + Rec."Name 2" ;
      END;

      APILogNameChangeEntry('Entity',Rec."Entity No.",pNewName,pOldName,pNewName);
    END;

    [EventSubscriber(Table,9068500,OnAfterModifyEvent)]
    PROCEDURE ClientNameModify@100000013(VAR Rec@100000000 : Record 9068500;VAR xRec@100000001 : Record 9068500;RunTrigger@100000002 : Boolean);
    BEGIN
      IF xRec.Name <> Rec.Name THEN BEGIN
        APILogNameChangeEntry('Client',Rec."Client No.",Rec.Name,xRec.Name,Rec.Name);
      END;
    END;

    LOCAL PROCEDURE APILogNameChangeEntry@100000016(AttachedToType@100000005 : Text;AttachedToNo@100000004 : Code[100];Name@100000003 : Text[100];OldName@100000002 : Text[250];NewName@100000001 : Code[250]);
    VAR
      APILog@100000006 : Record 50019;
    BEGIN
      APILog.RESET;
      APILog.SETRANGE(API,'Name Change');
      APILog.SETRANGE("Record Type",AttachedToType);
      APILog.SETRANGE("Record No.",AttachedToNo);
      APILog.SETRANGE(OldName,OldName);
      APILog.SETRANGE(NewName,NewName);
      IF NOT APILog.FINDFIRST THEN BEGIN
        APILog.INIT;
        APILog.API := 'Name Change';
        APILog."Record Type" := AttachedToType;
        APILog."Record No." := AttachedToNo;
        APILog.Name := NewName;
        APILog.OldName := OldName;
        APILog.NewName := NewName;
        APILog.Status := APILog.Status::Success;
        APILog.Flag := FALSE;
        APILog."Created Date" := CREATEDATETIME(TODAY,TIME);
        APILog.INSERT;
      END;
    END;

    LOCAL PROCEDURE NameChangeAPICall@100000022(AttachedToType@100000037 : Text;AttachedToNo@100000038 : Code[250];Name@100000039 : Text[250];OldName@100000040 : Text[250];NewName@100000041 : Text[250]) : Boolean;
    VAR
      HttpWebReqMgt@100000036 : Codeunit 1297;
      BaseURL@100000035 : Text;
      User@100000034 : Text;
      Password@100000033 : Text;
      payload@100000032 : Text;
      ResponseBody@100000031 : Text;
      ErrorMessage@100000030 : Text;
      ErrorDetails@100000029 : Text;
      HttpStatusCode@100000028 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000027 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000026 : Text;
      ResponseJson@100000025 : Text;
      HttpError@100000024 : Text;
      JsonArray@100000023 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000022 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000021 : Record 99008535;
      OutStr@100000020 : OutStream;
      TempBlob1@100000019 : Record 99008535;
      InStr@100000018 : InStream;
      ApiResult@100000017 : Text;
      JSONMgt@100000016 : Codeunit 5459;
      ApiRequest@100000015 : Text;
      Base64Text@100000014 : Text;
      InStr1@100000013 : InStream;
      TextRead@100000012 : Text;
      OutStr1@100000011 : OutStream;
      TempBlob2@100000010 : Record 99008535;
      Instr2@100000009 : InStream;
      Bytes@100000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000005 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000004 : Record 50006;
      Window@100000003 : Dialog;
      NoOfRecs@100000002 : Integer;
      CurrRec@100000001 : Integer;
      TempPath@100000000 : Text;
      APILog@100000043 : Record 50019;
      m@100000054 : Integer;
      n@100000053 : Integer;
      l@100000052 : Integer;
      value@100000051 : Text;
      CurrentElement@100000050 : Text;
      CurrentValue@100000049 : Text;
      ValuePair@100000048 : Text;
      Status@100000047 : Text;
      FormatChar@100000046 : TextConst 'ENU={}"''[]';
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."Name Change URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";

      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);


      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"partyCode": "' + AttachedToNo + '",');
      OutStr.WRITETEXT('"oldName":"' + OldName + '",');
      OutStr.WRITETEXT('"newName": "'+ NewName + '",');
      OutStr.WRITETEXT('"creationDate": "'+ FORMAT(CURRENTDATETIME,0,9) + '",');
      OutStr.WRITETEXT('"flag": "'+ 'Y' + '"');
      OutStr.WRITETEXT('}');



      HttpWebReqMgt.AddBodyBlob(TempBlob);
      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);

      //NL.001 --start
      IF NOT JSONMgt.InitializeFromString(ApiResult) THEN
        EXIT(FALSE)
      ELSE BEGIN


      m := 0;
      n := 1;

      value := ApiResult;
      value := DELCHR(value,'=','{}');
      l := STRLEN(value);

      WHILE m < l DO BEGIN
        ValuePair := SELECTSTR(n,value);  // get comma separated pairs of values and element names

        m := STRPOS(value,ValuePair)+STRLEN(ValuePair); // move pointer to the end of the current pair in Value

        ValuePair := DELCHR(ValuePair,'=',FormatChar);

        CurrentElement := COPYSTR(ValuePair,1,STRPOS(ValuePair,':'));
        CurrentElement := DELCHR(CurrentElement,'=',':');

        CurrentValue := COPYSTR(ValuePair,STRPOS(ValuePair,':'));
        CurrentValue := DELCHR(CurrentValue,'=',':');

      CASE CurrentElement OF
              'status':
                // must be a new record or lookup the existing record
                BEGIN
                  Status := CurrentValue;
                  END;
              'errorMessage':
                BEGIN
                  ErrorMessage := CurrentValue;
                END;
      END;
      n := n +1;//for getting all the data
      END;
      COMMIT;
      IF Status = 'Success' THEN BEGIN
        APILog.RESET;
        APILog.SETRANGE("Record Type",AttachedToType);
        APILog.SETRANGE("Record No.",AttachedToNo);
        APILog.SETRANGE(OldName,OldName);
        APILog.SETRANGE(NewName,NewName);
        IF APILog.FINDSET THEN BEGIN
          APILog.Flag := TRUE;
          APILog.MODIFY;
        END;
        APILog.LogEntries('Name Change API',BaseURL,FORMAT(AttachedToType),AttachedToNo,TRUE,'',OldName,NewName,'','','','');
        EXIT(TRUE);
      END
      ELSE
      IF Status = 'InternalError' THEN BEGIN
        //MESSAGE(ErrorMessage);
        APILog.LogEntries('Name Change API',BaseURL,FORMAT(AttachedToType),AttachedToNo,FALSE,ErrorMessage,OldName,NewName,'','','','');
        EXIT(FALSE);
      END
      ELSE
      IF Status = 'DataError' THEN BEGIN
        APILog.LogEntries('Name Change API',BaseURL,FORMAT(AttachedToType),AttachedToNo,FALSE,ErrorMessage,OldName,NewName,'','','','');
        EXIT(FALSE);
      END;
        //NL.001 --end

      END; //ELSE
        //ERROR(GETLASTERRORTEXT);

      Window.CLOSE;

      END;
    END;

    PROCEDURE VegaPassportExpiryCreateCase@100000001(pExternalReferanceNo@100000000 : Code[50];PEntityNo@100000038 : Code[20]);
    VAR
      HttpWebReqMgt@100000037 : Codeunit 1297;
      BaseURL@100000036 : Text;
      User@100000035 : Text;
      Password@100000034 : Text;
      payload@100000033 : Text;
      ResponseBody@100000032 : Text;
      ErrorMessage@100000031 : Text;
      ErrorDetails@100000030 : Text;
      HttpStatusCode@100000029 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000028 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000027 : Text;
      ResponseJson@100000026 : Text;
      HttpError@100000025 : Text;
      JsonArray@100000024 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000023 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000022 : Record 99008535;
      OutStr@100000021 : OutStream;
      TempBlob1@100000020 : Record 99008535;
      InStr@100000019 : InStream;
      ApiResult@100000018 : Text;
      JSONMgt@100000017 : Codeunit 5459;
      ApiRequest@100000016 : Text;
      Base64Text@100000015 : Text;
      InStr1@100000014 : InStream;
      TextRead@100000013 : Text;
      OutStr1@100000012 : OutStream;
      TempBlob2@100000011 : Record 99008535;
      Instr2@100000010 : InStream;
      Bytes@100000009 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000006 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000005 : Record 50006;
      Window@100000004 : Dialog;
      NoOfRecs@100000003 : Integer;
      CurrRec@100000002 : Integer;
      TempPath@100000001 : Text;
      Entity@100000039 : Record 9068505;
      AddressRec@100000040 : Record 9068451;
      DfxVEGA@100000041 : Record 50020;
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."VEGA CreateCase";
      User := DFXSetup."VEGA UserID";
      Password := DFXSetup."VEGA Password";

      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);




          Entity.RESET;
          IF Entity.GET(PEntityNo) THEN BEGIN

            AddressRec.RESET;
            AddressRec.SETRANGE(Type,AddressRec.Type::Entity);
            AddressRec.SETRANGE("No.",Entity."Entity No.");
            IF AddressRec.FINDFIRST THEN;
             {IF AddressRec."E-Mail" = '' THEN BEGIN
               MESSAGE('Email is NULL! Can''t proceed further');
             END;}

            DfxVEGA.RESET;
            DfxVEGA.SETRANGE("Entry No.",pExternalReferanceNo);
            IF DfxVEGA.FINDFIRST THEN;
            IF DfxVEGA."RM Mail" = '' THEN BEGIN
               MESSAGE('Email is NULL! Can''t proceed further');
             END;

            HttpWebReqMgt.Initialize(BaseURL);
            HttpWebReqMgt.DisableUI;
            HttpWebReqMgt.SetMethod('POST');
            HttpWebReqMgt.SetContentType('application/json');
            HttpWebReqMgt.SetReturnType('application/json');
            HttpWebReqMgt.AddBasicAuthentication(User,Password);
            TempBlob.INIT;
            TempBlob.Blob.CREATEOUTSTREAM(OutStr);
            OutStr.WRITETEXT('{');
            OutStr.WRITETEXT('"externalObjectReference": "' + pExternalReferanceNo +'",');
            OutStr.WRITETEXT('"entityTitle": "'+ Entity.Title +'",');
            OutStr.WRITETEXT('"entityFirstName": "' + Entity."Name 2" + '",');
            OutStr.WRITETEXT('"entityMiddleName":"' + Entity.Name + '",');
            OutStr.WRITETEXT('"entitySurname": "'+ Entity.Initials + '",');
            OutStr.WRITETEXT('"entityTelephoneNo": "'+ AddressRec."Phone No." + '",');
            OutStr.WRITETEXT('"entityEmail": "'+ DfxVEGA."RM Mail" + '",'); //Mail to RM instead of Entity directly
            OutStr.WRITETEXT('"dateOfBirth": "'+ FORMAT(Entity."Date of Birth",0,9) + '"');
            OutStr.WRITETEXT('}');



            HttpWebReqMgt.AddBodyBlob(TempBlob);
            ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);

            TempBlob1.INIT;
            TempBlob1.Blob.CREATEINSTREAM(InStr);
            IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
              ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
              JSONMgt.InitializeFromString(ApiResult);
              ParsePassportCreateCase(ApiResult,pExternalReferanceNo);
            END ELSE BEGIN
             MESSAGE(GETLASTERRORTEXT);
            END;
          END;
      Window.CLOSE;
    END;

    PROCEDURE VegaPassportExpiryGetStatus@100000004(pExternalReferanceNo@100000000 : Code[50]);
    VAR
      HttpWebReqMgt@100000037 : Codeunit 1297;
      BaseURL@100000036 : Text;
      User@100000035 : Text;
      Password@100000034 : Text;
      payload@100000033 : Text;
      ResponseBody@100000032 : Text;
      ErrorMessage@100000031 : Text;
      ErrorDetails@100000030 : Text;
      HttpStatusCode@100000029 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000028 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000027 : Text;
      ResponseJson@100000026 : Text;
      HttpError@100000025 : Text;
      JsonArray@100000024 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000023 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000022 : Record 99008535;
      OutStr@100000021 : OutStream;
      TempBlob1@100000020 : Record 99008535;
      InStr@100000019 : InStream;
      ApiResult@100000018 : Text;
      JSONMgt@100000017 : Codeunit 5459;
      ApiRequest@100000016 : Text;
      Base64Text@100000015 : Text;
      InStr1@100000014 : InStream;
      TextRead@100000013 : Text;
      OutStr1@100000012 : OutStream;
      TempBlob2@100000011 : Record 99008535;
      Instr2@100000010 : InStream;
      Bytes@100000009 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000006 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000005 : Record 50006;
      Window@100000004 : Dialog;
      NoOfRecs@100000003 : Integer;
      CurrRec@100000002 : Integer;
      TempPath@100000001 : Text;
      Entity@100000039 : Record 9068505;
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."VEGA GETStatus";
      User := DFXSetup."VEGA UserID";
      Password := DFXSetup."VEGA Password";

      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);


            HttpWebReqMgt.Initialize(BaseURL);
            HttpWebReqMgt.DisableUI;
            HttpWebReqMgt.SetMethod('POST');
            HttpWebReqMgt.SetContentType('application/json');
            HttpWebReqMgt.SetReturnType('application/json');
            HttpWebReqMgt.AddBasicAuthentication(User,Password);
            TempBlob.INIT;
            TempBlob.Blob.CREATEOUTSTREAM(OutStr);
            OutStr.WRITETEXT('{');
            OutStr.WRITETEXT('"externalObjectReference": "' + pExternalReferanceNo +'"');
            OutStr.WRITETEXT('}');



            HttpWebReqMgt.AddBodyBlob(TempBlob);
            ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
            TempBlob1.INIT;
            TempBlob1.Blob.CREATEINSTREAM(InStr);
            IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
              ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
              JSONMgt.InitializeFromString(ApiResult);
              ParsePassportGetStatus(ApiResult,pExternalReferanceNo);
            END ELSE BEGIN
              ERROR(GETLASTERRORTEXT);
            END;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ParsePassportCreateCase@100000006(pJson@100000004 : Text;pExternalReferanceNo@100000005 : Code[50]);
    VAR
      VegaTemp@100000000 : TEMPORARY Record 50020;
      DFXVEGAInterface@100000001 : Record 50020;
      JSONMgt@100000003 : Codeunit 5459;
      RecordRef@100000002 : RecordRef;
      RecVega@100000006 : Record 50020;
    BEGIN
      IF NOT JSONMgt.InitializeFromString(pJson) THEN;
        //EXIT(FALSE);

      WITH VegaTemp DO BEGIN
        CLEAR(VegaTemp);
        RecordRef.GETTABLE(VegaTemp);
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'status',FIELDNO("API Status"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'errorMessage',FIELDNO("Error Message"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'objectReference',FIELDNO("Object Reference"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'caseNumber',FIELDNO("Case ID"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'percentageComplete',FIELDNO("Percentage Complete"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'journeyAdminLink',FIELDNO("Review URL"));
        RecordRef.SETTABLE(VegaTemp);
      END;
      IF VegaTemp."API Status" = 'Success' THEN BEGIN
        RecVega.RESET;
      IF RecVega.GET(pExternalReferanceNo) THEN BEGIN
        RecVega."API Status" := VegaTemp."API Status";
        RecVega."Error Message" := VegaTemp."Error Message";
        RecVega."Object Reference" := VegaTemp."Object Reference";
        RecVega."Case ID" := VegaTemp."Case ID";
        RecVega."Percentage Complete" := VegaTemp."Percentage Complete";
        RecVega."Review URL" := VegaTemp."Review URL";
        RecVega.Status := RecVega.Status::InProcess;
        RecVega.MODIFY;
      END
      END
      ELSE
      IF VegaTemp."API Status" = 'InternalError' THEN
        MESSAGE(VegaTemp."Error Message");
    END;

    LOCAL PROCEDURE ParsePassportGetStatus@100000011(pJson@100000001 : Text;pExternalReferanceNo@100000000 : Code[50]);
    VAR
      VegaTemp@100000006 : Record 50020;
      DFXVEGAInterface@100000005 : Record 50020;
      JSONMgt@100000004 : Codeunit 5459;
      RecordRef@100000003 : RecordRef;
      DataJson@100000002 : Text[2048];
    BEGIN
      IF NOT JSONMgt.InitializeFromString(pJson) THEN;
       // EXIT(FALSE);

      WITH VegaTemp DO BEGIN
        CLEAR(VegaTemp);
        VegaTemp.RESET;
        VegaTemp.SETRANGE("Entry No.",pExternalReferanceNo);
        VegaTemp.FINDFIRST;
        RecordRef.GETTABLE(VegaTemp);
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'status',FIELDNO("API Status"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'errorMessage',FIELDNO("Error Message"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'objectReference',FIELDNO("Object Reference"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'caseStatus',FIELDNO("Case Status"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'caseName',FIELDNO("External Case ID"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'additionalInformation',FIELDNO("Status Message"));
        RecordRef.SETTABLE(VegaTemp);
        VegaTemp.MODIFY(TRUE);

      IF VegaTemp."API Status" = 'InternalError' THEN
        ERROR(VegaTemp."Error Message");

      CASE VegaTemp."Case Status" OF
        'In Review':StatusUpdate(VegaTemp."Entry No.",'In Review',VegaTemp."Status Message");
        'In Progress' : StatusUpdate(VegaTemp."Entry No.",'In Progress',VegaTemp."Status Message");
        'Completed - Closed' : StatusUpdate(VegaTemp."Entry No.",'Completed - Closed',VegaTemp."Status Message");
        'Completed - Approved' : Completedataentry(pJson,pExternalReferanceNo);
        'Completed - Rejected' : StatusUpdate(VegaTemp."Entry No.",'Completed - Rejected',VegaTemp."Status Message");
        END;
      END;
    END;

    LOCAL PROCEDURE Completedataentry@100000008(pValue@100000000 : Text;pExternalReferanceNo@100000015 : Code[50]);
    VAR
      p@100000002 : Integer;
      x@100000001 : Integer;
      CurrentObject@100000003 : Text;
      ValuePair@100000005 : Text;
      CurrentElement@100000007 : Text;
      CurrentValue@100000008 : Text;
      FormatChar@100000010 : TextConst 'ENU={}"''[]';
      JSONMgt@100000012 : Codeunit 5459;
      RecordRef@100000011 : RecordRef;
      DataJson@100000004 : Text;
      TempBlob@100000016 : Record 99008535;
      Outstr@100000017 : OutStream;
      Value@100000018 : Text;
      DFXDMSLite@100000019 : Codeunit 50004;
      Instr@100000020 : InStream;
      FileName@100000021 : Text;
      m@100000022 : Integer;
      n@100000023 : Integer;
      l@100000006 : Integer;
      DFXVEGA@100000009 : Record 50020;
      DFXVEGA1@100000013 : Record 50020;
    BEGIN
      p := STRLEN(pValue);//To get the data from customer details of passport
      x := STRPOS(pValue,':{');

      IF STRPOS(pValue,'[]')>0 THEN EXIT; // empty response, no need to parse


      CurrentObject := COPYSTR(pValue,x-1,p);
      CurrentObject := DELSTR(CurrentObject,1,2);
      CurrentElement := CONVERTSTR(CurrentObject,'}','*');
      CurrentElement := DELCHR(CurrentElement,'=','*');
      CurrentElement := INSSTR(CurrentElement,'}',p);//Contain the JSON of data only


      IF NOT JSONMgt.InitializeFromString(CurrentElement) THEN;
      //  EXIT(FALSE);

      WITH DFXVEGA DO BEGIN
        CLEAR(DFXVEGA);
        DFXVEGA.RESET;
        DFXVEGA.SETRANGE("Entry No.",pExternalReferanceNo);
        DFXVEGA.FINDFIRST;
        RecordRef.GETTABLE(DFXVEGA);
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_IssueDate',FIELDNO("New Passport Issue Date"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_DocumentNumber',FIELDNO("New Passport Number"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_ExpiryDate',FIELDNO("New Passport Expiry Date"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_NationalityCode',FIELDNO("New Passport Country of Issue"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'fileName',FIELDNO("File Name"));
        //JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_IDScanDocument',FIELDNO(scan
        RecordRef.SETTABLE(DFXVEGA);
        DFXVEGA.Status := DFXVEGA.Status::Processed;
        DFXVEGA."Case ID" := DFXVEGA."Object Reference";
        IF DFXVEGA.MODIFY(TRUE) THEN BEGIN
          EntityMetadataModify(DFXVEGA);
          NAVLITE_Metadata_Insert(DFXVEGA);
        END;

      END;

      {
      m := 0;
      n := 1;

      Value := CurrentElement;
      Value := DELCHR(Value,'=','{}');
      l := STRLEN(Value);

      WHILE m < l DO BEGIN
        ValuePair := SELECTSTR(n,Value);  // get comma separated pairs of values and element names

        m := STRPOS(Value,ValuePair)+STRLEN(ValuePair); // move pointer to the end of the current pair in Value

        ValuePair := DELCHR(ValuePair,'=',FormatChar);

        CurrentElement := COPYSTR(ValuePair,1,STRPOS(ValuePair,':'));
        CurrentElement := DELCHR(CurrentElement,'=',':');

        CurrentValue := COPYSTR(ValuePair,STRPOS(ValuePair,':'));
        CurrentValue := DELCHR(CurrentValue,'=',':');

      CASE CurrentElement OF
              'idVerification_IDScanDocument':
                // must be a new record or lookup the existing record
                BEGIN
                  Base64 := CurrentValue;
                  END;
      END;
      n := n +1;//for getting all the data
      END;

      CLEAR(FileName);
      FileName := 'Passport - ' + DFXVEGA."Entity No." + ' - ' + FORMAT(TODAY);

      TempBlob.FromBase64String(Base64);
      IF DFXDMSLite.NAVLFDocumentFlowAPI(TempBlob,FileName) THEN
        NAVLITE_Metadata_Insert(DFXVEGA,FileName);
      }
    END;

    LOCAL PROCEDURE EntityMetadataModify@100000019(VAR Rec@100000000 : Record 50020);
    VAR
      Entity@100000003 : Record 9068505;
    BEGIN
      IF Rec.Status = Rec.Status::Processed THEN BEGIN
        IF Rec."New Passport Number" <> '' THEN BEGIN
          Entity.RESET;
          IF Entity.GET(Rec."Entity No.") THEN BEGIN
            IF Rec."First/Second" = Rec."First/Second"::First THEN BEGIN
              Entity."Passport number" := Rec."New Passport Number";
              Entity."Passport/ID Issue Date" := Rec."New Passport Issue Date";
              Entity."Passport expiry date" := Rec."New Passport Expiry Date";
              Entity."Passport country of issue" := Rec."New Passport Country of Issue";
              Entity.MODIFY;
            END
            ELSE IF Rec."First/Second" = Rec."First/Second"::Second THEN BEGIN
              Entity."Passport/ID Number (2)" := Rec."New Passport Number";
              Entity."Passport/ID Issue Date (2)" := Rec."New Passport Issue Date";
              Entity."Passport/ID Expiry Date (2)" := Rec."New Passport Expiry Date";
              Entity."Passport/ID Country (2)" := Rec."New Passport Country of Issue";
              Entity.MODIFY;
            END
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE NAVLITE_Metadata_Insert@100000002(pRecVEGA@100000000 : Record 50020);
    VAR
      Entity@100000001 : Record 9068505;
      NAVLITE@100000002 : Record 50004;
      DFXBulkDocumentLink@100000003 : Record 50015;
    BEGIN
      IF Entity.GET(pRecVEGA."Entity No.") THEN
        BEGIN
          NAVLITE.INIT;
          NAVLITE.Type := NAVLITE.Type::Entity;
          NAVLITE."No." := Entity."Entity No.";
          NAVLITE.Name := Entity."Name 2" + Entity.Name;
          NAVLITE."First Partition Code" := Entity."First Partition Code";
          NAVLITE."Second Partition Code" := Entity."Second Partition Code";
          NAVLITE.Jurisdiction := Entity.Jurisdiction;
          NAVLITE.NAVUserID := USERID;
          NAVLITE."Document Date" := pRecVEGA."Passport Expiry Date";
          NAVLITE.INSERT(TRUE);

          DFXBulkDocumentLink.INIT;
          DFXBulkDocumentLink.ID := NAVLITE.ID;
          DFXBulkDocumentLink.Type := DFXBulkDocumentLink.Type::Entity;
          DFXBulkDocumentLink."No." := Entity."Entity No.";
          DFXBulkDocumentLink.VALIDATE("Document Type",'P12');
          DFXBulkDocumentLink.VALIDATE("Document Sub Type",'R02');
          DFXBulkDocumentLink."File Name" := pRecVEGA."File Name";
          DFXBulkDocumentLink.INSERT(TRUE);
        END;
    END;

    PROCEDURE StatusUpdate@100000015(pExternalReferanceNo@100000001 : Code[50];PCaseStatus@100000000 : Text;pStatusMessage@100000002 : Text);
    VAR
      vegaRec@100000003 : Record 50020;
    BEGIN
      vegaRec.RESET;
      vegaRec.SETRANGE("Entry No.",pExternalReferanceNo);
      IF vegaRec.FINDFIRST THEN BEGIN
        CASE vegaRec."Case Status" OF
          'In Review': BEGIN
            vegaRec.Status := vegaRec.Status::InReview;
            vegaRec."Status Message" := pStatusMessage;
        END;
        'In Progress' : BEGIN
            vegaRec.Status := vegaRec.Status::InProcess;
            vegaRec."Status Message" := pStatusMessage;
        END;
        'Completed - Closed' : BEGIN
            vegaRec.Status := vegaRec.Status::IdleRejected;
            vegaRec."Status Message" := pStatusMessage;
        END;
        'Completed - Rejected': BEGIN
            vegaRec.Status := vegaRec.Status::Rejected;
            vegaRec."Status Message" := pStatusMessage;
        END;
        END;
        vegaRec.MODIFY;
      END;
    END;

    BEGIN
    {
      //DFX-01 CR Addtional Fields in NOM Table and field mapping
    }
    END.
  }
}

OBJECT Codeunit 50007 DFX CRM Integration
{
  OBJECT-PROPERTIES
  {
    Date=13-07-22;
    Time=13:42:47;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=VAR
            sample@100000000 : TextConst 'ENU={
            "no":"CO5436543",
            "name": "Renu",
            "currencyCode": "string",
            "parentalConsentReceived": "string",
            "minor": "string",
            "privacyBlocked": "string",
            "region": "string",
            "area": "string",
            "territoryCode": "string",
            "workFaxNo": "string",
            "workPhoneNo": "string",
            "dateCreated": "2022-07-01T05:24:23.632Z",
            "dateOfBirth": "2022-07-01T05:24:23.632Z",
            "externalID": "string",
            "currency_Code": "string",
            "vATRegistrationNo": "string",
            "languageCode": "string",
            "homePage": "string",
            "faxNo": "string",
            "email": "string",
            "mobileNo": "9988765332",
            "phoneNo": "0988765",
            "county": "string",
            "city": "Salem",
            "name2": "Priya",
            "type": 0,
            "salesPersonCode": "string",
            "address": "string",
            "address2": "string",
            "address3": "string",
            "country_Region": "string",
            "postCode": "string",
            "option": "string"}';
            Function@100000001 : 'Create,Update,Delete';
            delete@100000002 : TextConst 'ENU={
            "no": "CON76543"}';
            Update@100000003 : TextConst 'ENU={
          
              "no":"1",
          
            "name": "ASh",
          
            "currencyCode": "INR",
          
            "parentalConsentReceived": true,
          
            "minor": true,
          
            "privacyBlocked": true,
          
            "territoryCode": "string",
          
            "workFaxNo": "string",
          
            "workPhoneNo": "string",
          
            "dateCreated": "2022-07-12",
          
            "dateOfBirth": "2022-07-12",
          
            "externalID": "string",
          
            "vATRegistrationNo": "string",
          
            "languageCode": "ENG",
          
            "homePage": "www.google.com",
          
            "faxNo": "string",
          
            "email": "string",
          
            "mobileNo": "7010927957",
          
            "phoneNo": "045452410410",
          
            "county": "India",
          
            "city": "Palani",
          
            "name2": "Suresh",
          
            "type": 0,
          
            "address": "41 Gandhi Road,",
          
            "address2": "string",
          
            "address3": "string",
          
            "country_Region": "Asia",
          
            "postCode": "624601",
          
            "option": "update"
          
          }';
            Create@100000004 : TextConst 'ENU={
          
            "name": "Amuthan",
          
            "currencyCode": "string",
          
            "parentalConsentReceived": true,
          
            "minor": true,
          
            "privacyBlocked": true,
          
            "territoryCode": "string",
          
            "workFaxNo": "string",
          
            "workPhoneNo": "04412312121",
          
            "dateCreated": "2022-07-05T04:11:41.634Z",
          
            "dateOfBirth": "2022-07-05T04:11:41.634Z",
          
            "externalID": "string",
          
            "vATRegistrationNo": "string",
          
            "languageCode": "string",
          
            "homePage": "www.google.com",
          
            "faxNo": "string",
          
            "email": "amuthasakaran@datafabricx.com",
          
            "mobileNo": "string",
          
            "phoneNo": "9952401981",
          
            "county": "string",
          
            "city": "string",
          
            "name2": "string",
          
            "type": 0,
          
            "address": "string",
          
            "address2": "string",
          
            "address3": "string",
          
            "country_Region": "string",
          
            "postCode": "string",
          
            "option": "create"
          
          }';
          BEGIN
            //CreateContact('rr4332','Kavikannan');

            //Contact(Update,"Function"::Update);
            //Contact(Create,"Function"::Create);
             MESSAGE('SUCCESS');
          END;

  }
  CODE
  {
    VAR
      JSONMgt@100000000 : Codeunit 5459;

    [Internal]
    PROCEDURE CreateContact@100000001(No@100000000 : Code[20];Name@100000001 : Text[100];Name2@100000023 : Text[100];Type@100000014 : Integer;SalesPersonCode@100000003 : Code[10];Address@100000004 : Text;Address2@100000005 : Text;Address3@100000006 : Text;Country_Region@100000007 : Text;PostCode@100000008 : Text;City@100000009 : Text;County@100000010 : Text;PhoneNo@100000011 : Text;MobileNo@100000012 : Text;Email@100000013 : Text;FaxNo@100000015 : Text;HomePage@100000016 : Text;LanguageCode@100000017 : Text;VATRegistrationNo@100000018 : Text;CurrencyCode@100000019 : Text;ExternalID@100000020 : Code[20];DateOfBirth@100000021 : Date;DateCreated@100000022 : Date;WorkPhoneNo@100000024 : Text;WorkFaxNo@100000025 : Text;TerritoryCode@100000026 : Text;Area@100000027 : Text;Region@100000028 : Text;PrivacyBlocked@100000029 : Text;Minor@100000030 : Text) : Boolean;
    VAR
      Contact@100000002 : Record 5050;
    BEGIN
      Contact.RESET;
      Contact.SETRANGE("No.",No);
      IF NOT Contact.FINDFIRST THEN BEGIN
        Contact.INIT;
        Contact."No." := No;
        Contact.Name := Name;
        IF Contact.INSERT(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE)
      END ELSE
        ERROR('Contact already Exists!');
    END;

    [External]
    PROCEDURE Contact@100000000(Json@1000000000 : Text;Function@1000000003 : Text) : Code[250];
    VAR
      RecordRef@1000000002 : RecordRef;
      Contact@100000000 : Record 5050;
      RecContact@100000001 : Record 5050;
      contact1@100000002 : Record 5050;
      No@100000003 : Code[20];
      DocMgmntCU@100000004 : Codeunit 9068511;
      NoSeriesManagement@100000005 : Codeunit 396;
    BEGIN
      IF NOT JSONMgt.InitializeFromString(Json) THEN
        EXIT('JSON is invalid');

      IF "Function" = 'create' THEN BEGIN
          WITH Contact DO BEGIN
            CLEAR(Contact);
            RecordRef.GETTABLE(Contact);
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'name', FIELDNO(Name));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'name2', FIELDNO("Name 2"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'type', FIELDNO(Type));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'salesPersonCode', FIELDNO("Salesperson Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'address', FIELDNO(Address));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'address2', FIELDNO("Address 2"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'address3', FIELDNO("Address 3"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'country_Region', FIELDNO("Country/Region Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'postCode', FIELDNO("Post Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'city', FIELDNO(City));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'county', FIELDNO(County));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'phoneNo', FIELDNO("Phone No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'mobileNo', FIELDNO("Mobile Phone No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'email', FIELDNO("E-Mail"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'faxNo', FIELDNO("Fax No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'homePage', FIELDNO("Home Page"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'languageCode', FIELDNO("Language Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'vATRegistrationNo', FIELDNO("VAT Registration No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'currencyCode', FIELDNO("Currency Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'externalID', FIELDNO("External ID"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'dateOfBirth', FIELDNO("Date of Birth"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'dateCreated', FIELDNO("Date Created"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'workPhoneNo', FIELDNO("Work Phone No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'workFaxNo', FIELDNO("Work Fax No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'territoryCode', FIELDNO("Territory Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'privacyBlocked', FIELDNO("Privacy Blocked"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'minor', FIELDNO(Minor));
            RecordRef.SETTABLE(Contact);
            No := NoSeriesManagement.GetNextNo('CONTACT',TODAY,TRUE);
            Contact."No." := No;
            IF Contact.INSERT(TRUE)THEN
              EXIT(Contact."No.");
            IF Contact.Name = '' THEN
              ERROR('Name is Mandatory!');
            //IF Contact."Salesperson Code" = '' THEN
           //   ERROR('SalespersonCode is mandatory!');

          END;
        END
        ELSE IF "Function" = 'update' THEN BEGIN
          WITH Contact DO BEGIN
            CLEAR(Contact);
            RecordRef.GETTABLE(Contact);
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'no', FIELDNO("No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'name', FIELDNO(Name));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'name2', FIELDNO("Name 2"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'type', FIELDNO(Type));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'salesPersonCode', FIELDNO("Salesperson Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'address', FIELDNO(Address));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'address2', FIELDNO("Address 2"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'address3', FIELDNO("Address 3"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'country_Region', FIELDNO("Country/Region Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'postCode', FIELDNO("Post Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'city', FIELDNO(City));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'county', FIELDNO(County));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'phoneNo', FIELDNO("Phone No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'mobileNo', FIELDNO("Mobile Phone No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'email', FIELDNO("E-Mail"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'faxNo', FIELDNO("Fax No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'homePage', FIELDNO("Home Page"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'languageCode', FIELDNO("Language Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'vATRegistrationNo', FIELDNO("VAT Registration No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'currencyCode', FIELDNO("Currency Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'externalID', FIELDNO("External ID"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'dateOfBirth', FIELDNO("Date of Birth"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'dateCreated', FIELDNO("Date Created"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'workPhoneNo', FIELDNO("Work Phone No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'workFaxNo', FIELDNO("Work Fax No."));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'territoryCode', FIELDNO("Territory Code"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'area', FIELDNO(Area));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'region', FIELDNO(Region));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'privacyBlocked', FIELDNO("Privacy Blocked"));
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'minor', FIELDNO(Minor));
            RecordRef.SETTABLE(Contact);
            RecContact.RESET;
            RecContact.SETRANGE("No.",Contact."No.");
            IF RecContact.FINDFIRST THEN BEGIN
              IF Contact.MODIFY(TRUE) THEN
                EXIT(Contact."No.");
            END ELSE
            ERROR('Contact doesn''t exist: %1',Contact."No.");
            END;
        END
        ELSE IF "Function" = 'delete' THEN BEGIN
        WITH Contact DO BEGIN
            CLEAR(Contact);
            RecordRef.GETTABLE(Contact);
            JSONMgt.GetValueAndSetToRecFieldNo(RecordRef, 'no', FIELDNO("No."));
            RecordRef.SETTABLE(Contact);
          RecContact.RESET;
          RecContact.GET(Contact."No.");
          IF RecContact.DELETE THEN
            EXIT(Contact."No.")
          ELSE
            ERROR('Contact doesn''t exist: %1',Contact."No.");
          END
        END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50009 Update Contact
{
  OBJECT-PROPERTIES
  {
    Date=12-01-21;
    Time=17:07:15;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF Contact.FINDSET THEN
              REPEAT
                APIFns.ContactIntegration(Contact);
              UNTIL Contact.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      APIFns@100000000 : Codeunit 50000;
      Contact@100000001 : Record 5050;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50011 DFX DMSLite_040422
{
  OBJECT-PROPERTIES
  {
    Date=04-04-22;
    Time=18:20:12;
    Modified=Yes;
    Version List=NAVLITE;
  }
  PROPERTIES
  {
    OnRun=VAR
            FunctionType@1000000000 : ',CreateNew,Update,Delete';
            AttachedToType@1000000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
            handtest@1000000003 : TextConst 'ENU="{
                      ""Action"":{
          ""Function"": ""HANDSHAKE""},
                                     ""Records"":[{
                                     ""EntryNo"":""26"",
                                                 ""LFUID"":""29239""
                                                           }
                                                           ]
                                                           } "';
            Createtest@1000000002 : TextConst 'ENU={
                      "Action":{
          "Function": "CREATENEW"
          },
          "Records":[{
          "AttachedToType": "Client",
          "AttachedToNo": "CLI092",
          "LFEntryID": "12347656",
          "FileName": "abcd.txt",
          "DocDescription" : "test",
          "LFDocType" : "CLREP",
          "LFDocSubType" : "STATE",
          "LFUID" : "60000"
          }
          ]
          }';
            StrCon@1000000004 : Text;
            StrCheck@1000000005 : Text;
            Return@100000000 : Boolean;
          BEGIN
            MESSAGE('Success');
            //LinkDocument(AttachedToType::Client,'CL00001',
            //UpdateDocStroreFromExternal(AttachedToType::" ",'E00000073',231980,'','','','','','',FunctionType::Update,'LF',Today,Today,'','',Today,'');
            //UpdateDFXDocStroreFromExternal(AttachedToType::Client,'CLI0000003',282,'','Client and Document Type Details.xlsx','','','C02. Certificate','I02. Introducer Certificate',FunctionType::CreateNew,'LF',TODAY,TODAY,'Investment','INV00001',TODAY,'Test'
          END;

  }
  CODE
  {
    VAR
      DocMgmntCU@100000000 : Codeunit 9068511;

    PROCEDURE NumberUpation@1000000001(Type@1000000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';No@1000000000 : Text;Name@1000000004 : Text) Number : Text;
    VAR
      ClientRec@1000000003 : Record 9068500;
      EntityRec@1000000002 : Record 9068505;
    BEGIN
      IF No <> '' THEN BEGIN
        CASE Type OF
              Type::Client : BEGIN
              ClientRec.RESET;
              IF ClientRec.GET(No) THEN
                No := ClientRec."Client No.";
              END;
              Type::Entity : BEGIN
              EntityRec.RESET;
              IF EntityRec.GET(No) THEN
                No := EntityRec."Entity No.";
              END
        END;
      END ELSE
        CASE Type OF
              Type::Client : BEGIN
                ClientRec.RESET;
                ClientRec.SETFILTER(Name,'%1','@*' + Name + '*');
                IF ClientRec.FINDFIRST THEN
                No := ClientRec."Client No.";
              END;
              Type::Entity : BEGIN
                EntityRec.RESET;
                EntityRec.SETFILTER(Name,'%1','@*' + Name + '*');
                IF EntityRec.FINDFIRST THEN
                No := EntityRec."Entity No.";
              END
        END;
      EXIT(No);
    END;

    [External]
    PROCEDURE UpdateDocStroreFromExternal@1000000011(AttachedToType@1000000000 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@1000000001 : Code[20];LFEntryID@1000000002 : Integer;FilePath@1000000011 : Text[250];FileName@1000000003 : Text;FileType@1000000010 : Code[10];DocDescription@1000000004 : Text[150];ExtDocType@1000000005 : Text[150];ExtDocSubType@1000000006 : Text[150];Function@1000000009 : ',CreateNew,Update,Delete';ExternalDMS@1000000016 : Text;CreationDate@1000000018 : Date;ModifiedDate@1000000017 : Date;LinkType@1000000019 : Text;NavAttribute@1000000020 : Text;DocumentDate@100000006 : Date;FreeText@100000007 : Text);
    VAR
      CorrespondenceStore@1000000007 : Record 9068660;
      DocMgmntCU@1000000008 : Codeunit 9068511;
      No@1000000012 : Text;
      FunctionType@1000000013 : ',CreateNew,Update,Delete';
      DocType@1000000014 : Text;
      DocSubType@1000000015 : Text;
      ID@100000000 : Text;
      Owner@100000001 : Record 9068443;
      Intermediary@100000002 : Record 9068447;
      Prospect@100000003 : Record 9068440;
      Entity@100000004 : Record 9068505;
      CorrespondenceStore2@100000005 : Record 9068660;
    BEGIN
      CLEAR(No);
      CLEAR(DocType);
      CLEAR(DocSubType);

      No := NumberUpation(AttachedToType,AttachedToNo,'');

      IF AttachedToType = AttachedToType::" " THEN
        ERROR('Type not specified');

      IF AttachedToNo = '' THEN
        ERROR('No. is empty');

      IF "Function" = FunctionType::CreateNew THEN
      BEGIN
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF NOT CorrespondenceStore.FINDFIRST THEN BEGIN
            CorrespondenceStore.INIT;
            CorrespondenceStore."No." := No;
            CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
            CorrespondenceStore."Document Inserted By" := ExternalDMS;
            CorrespondenceStore.FilePath := FilePath;
            CorrespondenceStore.FileName := FileName;
            CorrespondenceStore."MS Office Doc Type" := FileType;
            CorrespondenceStore.Subject := DocDescription;
            CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
            CorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            CorrespondenceStore.Meta_Date_1 := CreationDate;
            CorrespondenceStore.Meta_Date_2 := ModifiedDate;
            CorrespondenceStore.Meta_Text_5 := FreeText;
            CorrespondenceStore."Document Date" := DocumentDate;
            ID :=  CorrespondenceStore.ID;

           { DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code
      }

            DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;


            IF AttachedToType = AttachedToType::Client THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

            CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");


            IF CorrespondenceStore.INSERT(TRUE) THEN BEGIN

                  IF AttachedToType = AttachedToType::Entity THEN BEGIN
                    EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                    EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                    EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

                  END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                    Unlink(AttachedToType,AttachedToNo,ID);
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                  END ELSE
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

            END;

      END
          ELSE
          ERROR('Entry already exists');
      END
      ELSE IF "Function" = FunctionType::Update THEN
      BEGIN
              CorrespondenceStore.RESET;
              IF AttachedToType = AttachedToType::Client THEN
                CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Client);
              IF AttachedToType = AttachedToType::Entity THEN
                CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Entity);
              IF AttachedToType = AttachedToType::Resource THEN
                CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Resource);
              IF AttachedToType = AttachedToType::"Client Owner" THEN
                CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::"Client Owner");
            CorrespondenceStore.SETRANGE("No.",No);
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF CorrespondenceStore.FINDFIRST THEN BEGIN
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_5 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


             {DocType := GetDocType(ExtDocType);
              DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;}

              IF AttachedToType = AttachedToType::Client THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
              IF AttachedToType = AttachedToType::Entity THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
              IF AttachedToType = AttachedToType::Resource THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
              IF AttachedToType = AttachedToType::"Client Owner" THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

              IF CorrespondenceStore.MODIFY THEN BEGIN
                IF AttachedToType = AttachedToType::Entity THEN BEGIN
                  EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                  EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                  EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

                  END ELSE
                IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                END ELSE
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

              END
           END
           ELSE IF NOT CorrespondenceStore.FINDFIRST THEN BEGIN
            CorrespondenceStore.INIT;
            CorrespondenceStore."No." := No;
            CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
            CorrespondenceStore."Document Inserted By" := ExternalDMS;
            CorrespondenceStore.FilePath := FilePath;
            CorrespondenceStore.FileName := FileName;
            CorrespondenceStore."MS Office Doc Type" := FileType;
            CorrespondenceStore.Subject := DocDescription;
            CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
            CorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            CorrespondenceStore.Meta_Date_1 := CreationDate;
            CorrespondenceStore.Meta_Date_2 := ModifiedDate;
            CorrespondenceStore.Meta_Text_5 := FreeText;
            CorrespondenceStore."Document Date" := DocumentDate;

            DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


            {DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;}


            IF AttachedToType = AttachedToType::Client THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

            CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");


            IF CorrespondenceStore.INSERT(TRUE) THEN BEGIN


              IF AttachedToType = AttachedToType::Entity THEN BEGIN
                EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

              END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
               END ELSE
                LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);
            END;
      END
      END
      ELSE IF "Function" = FunctionType::Delete THEN BEGIN
              CorrespondenceStore.RESET;
              CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
              IF CorrespondenceStore.FINDSET THEN BEGIN
              REPEAT
                CorrespondenceStore.DELETE
              UNTIL CorrespondenceStore.NEXT = 0;
              END ELSE
                ERROR('Entry Does not exist');

          END;
    END;

    LOCAL PROCEDURE GetNAVDocType@1000000016(ExtDoctype@1000000000 : Text[150]) : Code[10];
    VAR
      ExternalDocTypeRec@1000000001 : Record 50007;
    BEGIN
      ExternalDocTypeRec.SETRANGE("External Doc Type", ExtDoctype);
      IF ExternalDocTypeRec.FINDFIRST THEN
        EXIT(ExternalDocTypeRec."NAV Doc Type");

      EXIT('');
    END;

    LOCAL PROCEDURE GetNAVDocSubType@1000000019(ExtDocType@1000000000 : Text[150];ExtDocSubType@1000000001 : Text[150]) : Code[20];
    VAR
      ExternalDocSubTypeRec@1000000002 : Record 50008;
    BEGIN
      ExternalDocSubTypeRec.SETRANGE("External Doc Type", ExtDocType);
      ExternalDocSubTypeRec.SETRANGE("External Sub Doc Type", ExtDocSubType);
      IF ExternalDocSubTypeRec.FINDFIRST THEN
        EXIT(ExternalDocSubTypeRec."NAV Doc Sub Type");

      EXIT('');
    END;

    LOCAL PROCEDURE GetDocType@100000003(ExtDoctype@1000000000 : Text[150]) : Text;
    VAR
      CorrespondenceDocType@100000000 : Record 9068657;
    BEGIN
      CorrespondenceDocType.RESET;
      CorrespondenceDocType.SETRANGE(Type,ExtDoctype);
      IF CorrespondenceDocType.FINDFIRST THEN
        EXIT(CorrespondenceDocType.Type);

      EXIT('');
    END;

    LOCAL PROCEDURE GetDocSubType@100000002(ExtDocType@1000000000 : Text[150];ExtDocSubType@1000000001 : Text[150]) : Text;
    VAR
      DocumentTypeSubType@100000000 : Record 9068463;
    BEGIN
      DocumentTypeSubType.RESET;
      DocumentTypeSubType.SETRANGE("Document Type Description",ExtDocType);
      DocumentTypeSubType.SETRANGE("Document Sub Type Description",ExtDocSubType);
      IF DocumentTypeSubType.FINDFIRST THEN
        EXIT(DocumentTypeSubType."Document Sub Type Description");

      EXIT('');
    END;

    [External]
    PROCEDURE LinkDocument@1000000000(AttachedToType@1000000017 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@1000000004 : Code[20];LFEntryID@1000000003 : Integer;LinkType@1000000016 : Text;NAVAttribute@1000000005 : Text);
    VAR
      CorrespondenceStoreLink@1000000002 : Record 9069078;
      CorrespondenceStoreLink2@1000000001 : Record 9069078;
      CorrespondenceStore@1000000000 : Record 9068660;
      LinkTypeFilter@1000000006 : Text;
      LinkCodeFilter@1000000007 : Text;
      NoFilter@1000000008 : Text;
      StrCon@1000000010 : Text;
      ClientAccount@1000000009 : Record 9068624;
      ClientAsset@1000000011 : Record 9068546;
      ClientPortfolio@1000000012 : Record 9068565;
      ClientInvestment@1000000013 : Record 9068542;
      ClientCustomer@1000000014 : Record 9068602;
      ClientVendor@1000000015 : Record 9068604;
      LinkCode@100000000 : Text;
    BEGIN
      IF NAVAttribute <> '' THEN BEGIN
        IF LinkType <> '' THEN
        BEGIN

      IF NAVAttribute = 'TBD' THEN
        LinkType := '';

          CASE AttachedToType OF
          AttachedToType::Client :
            CorrespondenceStore.SETFILTER(Type,'Client');
          AttachedToType::Entity:
            CorrespondenceStore.SETFILTER(Type,'Entity');
          AttachedToType::Intermediary:
            CorrespondenceStore.SETFILTER(Type,'Intermediary');
          AttachedToType::"Client Owner" :
            CorrespondenceStore.SETFILTER(Type,'Client Owner');
          AttachedToType::"Potential Client":
            CorrespondenceStore.SETFILTER(Type,'Potential Client');
          AttachedToType::Prospect :
            CorrespondenceStore.SETFILTER(Type,'Prospect');
          AttachedToType::Resource :
            CorrespondenceStore.SETFILTER(Type,'Resource');
          END;

          CorrespondenceStore.SETFILTER("No.",AttachedToNo);
          CorrespondenceStore.SETRANGE("Temporary",FALSE);

          StrCon := CONVERTSTR(NAVAttribute,'-',',');
          LinkCodeFilter := SELECTSTR(1,StrCon);


           IF LinkType = 'Account' THEN BEGIN
             LinkCode := DELSTR(LinkCodeFilter,3);
             IF LinkCode = 'BK' THEN
               LinkTypeFilter := 'Bank'
             ELSE IF LinkCode = 'LN' THEN
               LinkTypeFilter := 'Loan'
          END
          ELSE IF LinkType = 'Invoice' THEN
              LinkTypeFilter := 'Client Invoice'
          ELSE IF LinkType = 'Payment' THEN
              LinkTypeFilter := ''
          ELSE
              LinkTypeFilter := LinkType;

          //CorrespondenceStore.SETRANGE("Corresp. Store Link Exists",FALSE);
          CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
          CorrespondenceStore.FILTERGROUP(0);

          IF CorrespondenceStore.FINDFIRST THEN BEGIN

            IF CorrespondenceStore.ID <> '' THEN BEGIN
              CorrespondenceStoreLink2.INIT;
              CorrespondenceStoreLink2.Type        := CorrespondenceStore.Type;
              CorrespondenceStoreLink2."No."       := CorrespondenceStore."No.";

              IF (LinkTypeFilter = 'Yacht') OR (LinkTypeFilter = 'Property') OR (LinkTypeFilter = 'Aviation') OR (LinkTypeFilter = 'Intellectual Property')
              OR (LinkTypeFilter = 'Life Assurance') OR (LinkTypeFilter = 'Miscellaneous Asset') THEN BEGIN
                  EVALUATE(CorrespondenceStoreLink2."Link Type",'Asset');
              END ELSE
              EVALUATE(CorrespondenceStoreLink2."Link Type",LinkTypeFilter);

              CorrespondenceStoreLink2."Link Code" := LinkCodeFilter;
              CorrespondenceStoreLink2.VALIDATE(ID,CorrespondenceStore.ID);
              CorrespondenceStoreLink2."External DMS Status" := CorrespondenceStoreLink2."External DMS Status"::Processed;
              CorrespondenceStoreLink.RESET;
              CorrespondenceStoreLink.SETRANGE(Type,CorrespondenceStoreLink2.Type);
              CorrespondenceStoreLink.SETRANGE("No.",CorrespondenceStoreLink2."No.");
              CorrespondenceStoreLink.SETRANGE("Link Type",CorrespondenceStoreLink2."Link Type");
              CorrespondenceStoreLink.SETRANGE("Link Code",CorrespondenceStoreLink2."Link Code");
              CorrespondenceStoreLink.SETRANGE("Correspondence Store Type",CorrespondenceStoreLink2."Correspondence Store Type");
              CorrespondenceStoreLink.SETRANGE(ID,CorrespondenceStoreLink2.ID);
              IF NOT CorrespondenceStoreLink.FINDFIRST THEN
                CorrespondenceStoreLink2.INSERT(TRUE)
              ELSE
                CorrespondenceStoreLink2.MODIFY(TRUE);

      END;
      END
      END; {ELSE
            ERROR('Link Type is Empty');
          END ELSE
          ERROR('NAVAttribute is Empty');
          }
      END;
    END;

    [External]
    PROCEDURE HandShakeStatus@1000000002(LFEntryID@1000000000 : Integer;Status@1000000002 : Text);
    VAR
      CorrespondenceStore@1000000001 : Record 9068660;
    BEGIN
      CorrespondenceStore.RESET;
      CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
      IF CorrespondenceStore.FINDFIRST THEN BEGIN
        CorrespondenceStore."Additional Information" := Status;
        IF CorrespondenceStore."Additional Information" <> 'Processed' THEN
          CorrespondenceStore.MODIFY
        ELSE IF CorrespondenceStore."Additional Information" = 'Processed' THEN
          ERROR('Entry already processed');
      END
    END;

    [External]
    PROCEDURE UnlinkDocument@100000001(AttachedToType@100000005 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@100000004 : Code[20];LFEntryID@100000011 : Integer;LinkType@100000002 : Text;NAVAttribute@100000001 : Text);
    VAR
      CorrespondenceStoreLink@100000000 : Record 9069078;
      LinkTypeFilter@100000008 : Text;
      LinkCodeFilter@100000007 : Text;
      LinkCode@100000006 : Text;
      StrCon@100000009 : Text;
      LinkTypeOption@100000010 : ' ,Asset,Safe Custody,Bank,Loan,Agent,Investment,Client Entity,Client Entity History,Customer,Vendor,Portfolio,Transaction Monitoring,Interaction,Activity,Business Rule,Client Invoice,Meeting';
      CorrespondenceStore@100000003 : Record 9068660;
      ID@100000012 : Code[10];
    BEGIN
      //IF AttachedToType = AttachedToType::Client THEN
      IF NAVAttribute <> '' THEN BEGIN
        IF LinkType <> '' THEN
        BEGIN
          StrCon := CONVERTSTR(NAVAttribute,'-',',');
          LinkCodeFilter := SELECTSTR(1,StrCon);


          IF LinkType = 'Account' THEN BEGIN
            LinkCode := DELSTR(LinkCodeFilter,3);
            IF LinkCode = 'BK' THEN
              LinkTypeFilter := 'Bank'
            ELSE IF LinkCode = 'LN' THEN
               LinkTypeFilter := 'Loan'
          END ELSE
            LinkTypeFilter := LinkType;

          CASE LinkTypeFilter OF
            'Bank' :
              LinkTypeOption := LinkTypeOption::Bank;
            'Asset' :
              LinkTypeOption := LinkTypeOption::Asset;
            'Loan':
              LinkTypeOption := LinkTypeOption::Loan;
            'Portfolio' :
              LinkTypeOption := LinkTypeOption::Portfolio;
            'Investment' :
              LinkTypeOption := LinkTypeOption::Investment;
            'Agent' :
              LinkTypeOption := LinkTypeOption::Agent;
            'Meeting' :
              LinkTypeOption := LinkTypeOption::Meeting;
          END;

          CorrespondenceStore.RESET;

          CASE AttachedToType OF
          AttachedToType::Client :
            CorrespondenceStore.SETFILTER(Type,'Client');
          AttachedToType::Entity:
            CorrespondenceStore.SETFILTER(Type,'Entity');
          AttachedToType::Intermediary:
            CorrespondenceStore.SETFILTER(Type,'Intermediary');
          AttachedToType::"Client Owner" :
            CorrespondenceStore.SETFILTER(Type,'Client Owner');
          AttachedToType::"Potential Client" :
            CorrespondenceStore.SETFILTER(Type,'Potential Client');
          AttachedToType::Prospect :
            CorrespondenceStore.SETFILTER(Type,'Prospect');
          AttachedToType::Resource :
            CorrespondenceStore.SETFILTER(Type,'Resource');
          END;

          CorrespondenceStore.SETFILTER("No.",AttachedToNo);
          CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
          IF CorrespondenceStore.FINDFIRST THEN
            ID := CorrespondenceStore.ID;

          CorrespondenceStoreLink.RESET;
          CorrespondenceStoreLink.SETRANGE("No.",AttachedToNo);
          CorrespondenceStoreLink.SETRANGE(Type,CorrespondenceStoreLink.Type::Client);
          CorrespondenceStoreLink.SETRANGE("Link Type",LinkTypeOption);
          CorrespondenceStoreLink.SETRANGE("Link Code",LinkCodeFilter);
         // CorrespondenceStoreLink.SETRANGE("Correspondence Store Type",CorrespondenceStoreLink."Correspondence Store Type"::"0");
          CorrespondenceStoreLink.SETRANGE(ID,ID);
          IF CorrespondenceStoreLink.FINDFIRST THEN
            CorrespondenceStoreLink.DELETE
          ELSE
            ERROR('Record not found');
        END ELSE
            ERROR('Link Type is Empty');
          END ELSE
          ERROR('NAVAttribute is Empty');
    END;

    LOCAL PROCEDURE CheckEntryIDExist@100000000(AttachedToType@100000003 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@100000002 : Code[20];LFEntryID@100000001 : Integer) Exists : Boolean;
    VAR
      CorrespondenceStore@100000000 : Record 9068660;
      ID@100000004 : Text;
    BEGIN
      CorrespondenceStore.RESET;
      CorrespondenceStore.SETFILTER(Type,'Client');
      CorrespondenceStore.SETFILTER("No.",AttachedToNo);
      CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
      IF CorrespondenceStore.FINDFIRST THEN
        ID := CorrespondenceStore.ID;

      IF ID <> '' THEN
        Exists := TRUE
      ELSE
        Exists := FALSE;

      EXIT(Exists);
    END;

    LOCAL PROCEDURE Unlink@100000008(AttachedToType@1000000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@1000000000 : Code[20];ID@100000001 : Text);
    VAR
      CorrespondenceStoreLink@100000000 : Record 9069078;
    BEGIN
      CorrespondenceStoreLink.RESET;
      CorrespondenceStoreLink.SETFILTER(Type,'Client');
      CorrespondenceStoreLink.SETFILTER("No.",AttachedToNo);
      CorrespondenceStoreLink.SETRANGE(ID,ID);
      IF CorrespondenceStoreLink.FINDFIRST THEN
        CorrespondenceStoreLink.DELETE
      //ELSE
       //ERROR('Record not found');
    END;

    [External]
    PROCEDURE HandShake@100000020(AttachedToType@100000002 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@100000001 : Code[50];NAme@100000005 : Text;FileName@100000000 : Text;LFEntyId@100000003 : Integer) Success : Boolean;
    VAR
      CorrespondenceStore@100000004 : Record 9068660;
    BEGIN
      CASE AttachedToType OF
          AttachedToType::Client :
            CorrespondenceStore.SETFILTER(Type,'Client');
          AttachedToType::Entity:
            CorrespondenceStore.SETFILTER(Type,'Entity');
          AttachedToType::Intermediary:
            CorrespondenceStore.SETFILTER(Type,'Intermediary');
          AttachedToType::"Client Owner" :
            CorrespondenceStore.SETFILTER(Type,'Client Owner');
          AttachedToType::"Potential Client":
            CorrespondenceStore.SETFILTER(Type,'Potential Client');
          AttachedToType::Prospect :
            CorrespondenceStore.SETFILTER(Type,'Prospect');
          AttachedToType::Resource :
            CorrespondenceStore.SETFILTER(Type,'Resource');
          END;

      CorrespondenceStore.SETRANGE("No.",AttachedToNo);
      CorrespondenceStore.SETRANGE(FileName,FileName);
      CorrespondenceStore.FINDFIRST;
      IF CorrespondenceStore."LaserFiche Entry ID" = 0 THEN BEGIN
        CorrespondenceStore."LaserFiche Entry ID" := LFEntyId;
        IF CorrespondenceStore.MODIFY THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;

    END;

    LOCAL PROCEDURE EntityOwnerLink@100000009(AttachedToNo@100000018 : Code[20];LFEntryID@100000017 : Integer;FilePath@100000016 : Text[250];FileName@100000015 : Text;FileType@100000014 : Code[10];DocDescription@100000013 : Text[150];ExtDocType@100000012 : Text[150];ExtDocSubType@100000011 : Text[150];ExternalDMS@100000009 : Text;CreationDate@100000008 : Date;ModifiedDate@100000007 : Date;DocumentDate@100000020 : Date;FreeText@100000010 : Text);
    VAR
      Owner@100000006 : Record 9068443;
      Entity@100000005 : Record 9068505;
      AttachedToType@100000004 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000003 : Record 9068660;
      CorrespondenceStore2@100000002 : Record 9068660;
      ID@100000000 : Text;
      DocType@100000001 : Text;
      DocSubType@100000019 : Text;
    BEGIN
      Entity.GET(AttachedToNo);
      IF Entity."Owner No." <> ''  THEN
        BEGIN
          Owner.RESET;
          Owner.SETRANGE("No.",Entity."Owner No.");
          IF Owner.FINDFIRST THEN BEGIN
            CorrespondenceStore.RESET;
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::"Client Owner");
            CorrespondenceStore.SETRANGE("No.",Owner."No.");
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF CorrespondenceStore.FINDFIRST THEN BEGIN
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_5 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.MODIFY(TRUE);
              END
              ELSE BEGIN
              CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";
              CorrespondenceStore."No." := Owner."No.";
              CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_5 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");

              CorrespondenceStore.INSERT(TRUE);
              END
          END
        END
    END;

    LOCAL PROCEDURE EntityProspectLink@100000019(AttachedToNo@100000011 : Code[20];LFEntryID@100000010 : Integer;FilePath@100000009 : Text[250];FileName@100000008 : Text;FileType@100000007 : Code[10];DocDescription@100000006 : Text[150];ExtDocType@100000005 : Text[150];ExtDocSubType@100000004 : Text[150];ExternalDMS@100000002 : Text;CreationDate@100000001 : Date;ModifiedDate@100000000 : Date;DocumentDate@100000020 : Date;FreeText@100000003 : Text);
    VAR
      Prospect@100000019 : Record 9068440;
      Entity@100000018 : Record 9068505;
      AttachedToType@100000017 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000016 : Record 9068660;
      CorrespondenceStore2@100000015 : Record 9068660;
      ID@100000014 : Text;
      DocType@100000013 : Text;
      DocSubType@100000012 : Text;
    BEGIN
      Entity.GET(AttachedToNo);
      IF Entity."Prospect No." <> ''  THEN
        BEGIN
          Prospect.RESET;
          Prospect.SETRANGE("No.",Entity."Prospect No.");
          IF Prospect.FINDFIRST THEN BEGIN
            CorrespondenceStore.RESET;
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Prospect);
            CorrespondenceStore.SETRANGE("No.",Prospect."No.");
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF CorrespondenceStore.FINDFIRST THEN BEGIN
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_5 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.MODIFY(TRUE);
              END
              ELSE BEGIN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Prospect;
              CorrespondenceStore."No." := Prospect."No.";
              CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_5 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");

              CorrespondenceStore.INSERT(TRUE);
              END
          END
        END
    END;

    LOCAL PROCEDURE EntityIntermediaryLink@100000021(AttachedToNo@100000011 : Code[20];LFEntryID@100000010 : Integer;FilePath@100000009 : Text[250];FileName@100000008 : Text;FileType@100000007 : Code[10];DocDescription@100000006 : Text[150];ExtDocType@100000005 : Text[150];ExtDocSubType@100000004 : Text[150];ExternalDMS@100000002 : Text;CreationDate@100000001 : Date;ModifiedDate@100000000 : Date;DocumentDate@100000020 : Date;FreeText@100000003 : Text);
    VAR
      Entity@100000018 : Record 9068505;
      AttachedToType@100000017 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000016 : Record 9068660;
      CorrespondenceStore2@100000015 : Record 9068660;
      ID@100000014 : Text;
      DocType@100000013 : Text;
      DocSubType@100000012 : Text;
      Intermediary@100000019 : Record 9068447;
    BEGIN
      Entity.GET(AttachedToNo);
      IF Entity."Intermediary No." <> ''  THEN
        BEGIN
          Intermediary.RESET;
          Intermediary.SETRANGE("No.",Entity."Intermediary No.");
          IF Intermediary.FINDFIRST THEN BEGIN
            CorrespondenceStore.RESET;
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Intermediary);
            CorrespondenceStore.SETRANGE("No.",Intermediary."No.");
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF CorrespondenceStore.FINDFIRST THEN BEGIN
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_5 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.MODIFY(TRUE);
              END
              ELSE BEGIN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Intermediary;
              CorrespondenceStore."No." := Intermediary."No.";
              CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore.Meta_Date_1 := CreationDate;
              CorrespondenceStore.Meta_Date_2 := ModifiedDate;
              CorrespondenceStore.Meta_Text_5 := FreeText;
              CorrespondenceStore."Document Date" := DocumentDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;

              CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");

              CorrespondenceStore.INSERT(TRUE);
              END
          END
        END
    END;

    [External]
    PROCEDURE UpdateDFXDocStroreFromExternal@100000004(AttachedToType@1000000000 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client,Customer,Vendor';AttachedToNo@1000000001 : Code[20];LFEntryID@1000000002 : Integer;FilePath@1000000011 : Text;FileName@1000000003 : Text;FileType@1000000010 : Code[10];DocDescription@1000000004 : Text[150];ExtDocType@1000000005 : Text[150];ExtDocSubType@1000000006 : Text[150];Function@1000000009 : ',CreateNew,Update,Delete';ExternalDMS@1000000016 : Text;CreationDate@1000000018 : Date;ModifiedDate@1000000017 : Date;LinkType@1000000019 : Text;NavAttribute@1000000020 : Text;DocumentDate@100000006 : Date;FreeText@100000007 : Text);
    VAR
      CorrespondenceStore@1000000007 : Record 9068660;
      DocMgmntCU@1000000008 : Codeunit 9068511;
      No@1000000012 : Text;
      FunctionType@1000000013 : ',CreateNew,Update,Delete';
      DocType@1000000014 : Text;
      DocSubType@1000000015 : Text;
      ID@100000000 : Text;
      Owner@100000001 : Record 9068443;
      Intermediary@100000002 : Record 9068447;
      Prospect@100000003 : Record 9068440;
      Entity@100000004 : Record 9068505;
      CorrespondenceStore2@100000005 : Record 9068660;
      DFXCorrespondenceStore@100000008 : Record 50016;
    BEGIN
      CLEAR(No);
      CLEAR(DocType);
      CLEAR(DocSubType);

      IF AttachedToNo = '' THEN
        ERROR('No. is empty');

      IF AttachedToType = AttachedToType::" " THEN
        ERROR('Type is empty');


      No := NumberUpation(AttachedToType,AttachedToNo,'');

      IF "Function" = FunctionType::CreateNew THEN
      BEGIN
            DFXCorrespondenceStore.SETRANGE("No.",AttachedToNo);
            DFXCorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF NOT DFXCorrespondenceStore.FINDFIRST THEN BEGIN
            DFXCorrespondenceStore.INIT;
            DFXCorrespondenceStore."No." := No;
            DFXCorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            DFXCorrespondenceStore."Source of Document" := DFXCorrespondenceStore."Source of Document"::Imported;
            DFXCorrespondenceStore."Document Inserted By" := ExternalDMS;
            DFXCorrespondenceStore.FilePath := FilePath;
            DFXCorrespondenceStore.FileName := FileName;
            DFXCorrespondenceStore."MS Office Doc Type" := FileType;
            DFXCorrespondenceStore.Subject := DocDescription;
            DFXCorrespondenceStore."External DMS Status" := DFXCorrespondenceStore."External DMS Status"::Processed;
            DFXCorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            DFXCorrespondenceStore.Meta_Date_1 := CreationDate;
            DFXCorrespondenceStore.Meta_Date_2 := ModifiedDate;
            DFXCorrespondenceStore.Meta_Text_5 := FreeText;
            DFXCorrespondenceStore."Document Date" := DocumentDate;
            ID :=  DFXCorrespondenceStore.ID;

            DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            DFXCorrespondenceStore."Document Type" := DocType;
            DFXCorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


           { DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            DFXCorrespondenceStore."Document Type" := DocType;
            DFXCorrespondenceStore."Document Sub Type" := DocSubType;}


            IF AttachedToType = AttachedToType::Client THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::"Client Owner";
              IF AttachedToType = AttachedToType::Customer THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Customer;
              IF AttachedToType = AttachedToType::Vendor THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Vendor;

            DFXCorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(DFXCorrespondenceStore.Type, DFXCorrespondenceStore."No.");


            IF DFXCorrespondenceStore.INSERT(TRUE) THEN BEGIN

                  IF AttachedToType = AttachedToType::Entity THEN BEGIN
                    EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                    EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                    EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

                  END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                    Unlink(AttachedToType,AttachedToNo,ID);
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                  END ELSE
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

            END;

      END
          ELSE
          ERROR('Entry already exists');
      END
      ELSE IF "Function" = FunctionType::Update THEN
      BEGIN
            DFXCorrespondenceStore.SETRANGE("No.",No);
            DFXCorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF DFXCorrespondenceStore.FINDFIRST THEN BEGIN
              DFXCorrespondenceStore."Source of Document" := DFXCorrespondenceStore."Source of Document"::Imported;
              DFXCorrespondenceStore."Document Inserted By" := ExternalDMS;
              DFXCorrespondenceStore.FileName := FileName;
              DFXCorrespondenceStore.FilePath := FilePath;
              DFXCorrespondenceStore.Subject := DocDescription;
              DFXCorrespondenceStore."MS Office Doc Type" := FileType;
              DFXCorrespondenceStore."External DMS Status" := DFXCorrespondenceStore."External DMS Status"::Processed;
              DFXCorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
              DFXCorrespondenceStore.Meta_Date_1 := CreationDate;
              DFXCorrespondenceStore.Meta_Date_2 := ModifiedDate;
              DFXCorrespondenceStore.Meta_Text_5 := FreeText;
              DFXCorrespondenceStore."Document Date" := DocumentDate;
              ID :=  DFXCorrespondenceStore.ID;

              {DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              DFXCorrespondenceStore."Document Type" := DocType;
              DFXCorrespondenceStore."Document Sub Type" := DocSubType;}//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


             DocType := GetDocType(ExtDocType);
              DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
              DFXCorrespondenceStore."Document Type" := DocType;
              DFXCorrespondenceStore."Document Sub Type" := DocSubType;

              IF AttachedToType = AttachedToType::Client THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Client;
              IF AttachedToType = AttachedToType::Entity THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Entity;
              IF AttachedToType = AttachedToType::Resource THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Resource;
              IF AttachedToType = AttachedToType::"Client Owner" THEN
                DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::"Client Owner";
              IF AttachedToType = AttachedToType::Customer THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Customer;
              IF AttachedToType = AttachedToType::Vendor THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Vendor;

              IF DFXCorrespondenceStore.MODIFY THEN BEGIN
                IF AttachedToType = AttachedToType::Entity THEN BEGIN
                  EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                  EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                  EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

                  END ELSE
                IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                END ELSE
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

              END
           END
           ELSE IF NOT DFXCorrespondenceStore.FINDFIRST THEN BEGIN
            DFXCorrespondenceStore.INIT;
            DFXCorrespondenceStore."No." := No;
            DFXCorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            DFXCorrespondenceStore."Source of Document" := DFXCorrespondenceStore."Source of Document"::Imported;
            DFXCorrespondenceStore."Document Inserted By" := ExternalDMS;
            DFXCorrespondenceStore.FilePath := FilePath;
            DFXCorrespondenceStore.FileName := FileName;
            DFXCorrespondenceStore."MS Office Doc Type" := FileType;
            DFXCorrespondenceStore.Subject := DocDescription;
            DFXCorrespondenceStore."External DMS Status" := DFXCorrespondenceStore."External DMS Status"::Processed;
            DFXCorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            DFXCorrespondenceStore.Meta_Date_1 := CreationDate;
            DFXCorrespondenceStore.Meta_Date_2 := ModifiedDate;
            DFXCorrespondenceStore.Meta_Text_5 := FreeText;
            DFXCorrespondenceStore."Document Date" := DocumentDate;

            {DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            DFXCorrespondenceStore."Document Type" := DocType;
            DFXCorrespondenceStore."Document Sub Type" := DocSubType;}//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


            DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            DFXCorrespondenceStore."Document Type" := DocType;
            DFXCorrespondenceStore."Document Sub Type" := DocSubType;


            IF AttachedToType = AttachedToType::Client THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::"Client Owner";
              IF AttachedToType = AttachedToType::Customer THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Customer;
              IF AttachedToType = AttachedToType::Vendor THEN
              DFXCorrespondenceStore.Type := DFXCorrespondenceStore.Type::Vendor;

            DFXCorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(DFXCorrespondenceStore.Type, DFXCorrespondenceStore."No.");


            IF DFXCorrespondenceStore.INSERT(TRUE) THEN BEGIN


              IF AttachedToType = AttachedToType::Entity THEN BEGIN
                EntityOwnerLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                EntityProspectLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);
                EntityIntermediaryLink(AttachedToNo,LFEntryID,FilePath,FileName,FileType,DocDescription,ExtDocType,ExtDocSubType,ExternalDMS,CreationDate,ModifiedDate,DocumentDate,FreeText);

              END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
               END ELSE
                LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);
            END;
      END
      END
      ELSE IF "Function" = FunctionType::Delete THEN BEGIN
              DFXCorrespondenceStore.RESET;
              DFXCorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
              IF DFXCorrespondenceStore.FINDSET THEN BEGIN
              REPEAT
                DFXCorrespondenceStore.DELETE
              UNTIL DFXCorrespondenceStore.NEXT = 0;
              END ELSE
                ERROR('Entry Does not exist');

          END;
    END;

    [EventSubscriber(Table,50016,OnAfterInsertEvent)]
    PROCEDURE DFXCorresPondenceStoreOnInsert@100000024(VAR Rec@100000000 : Record 50016;RunTrigger@100000001 : Boolean);
    VAR
      CorrespondenceStore@100000002 : Record 9068660;
    BEGIN
      IF RunTrigger THEN
        IF Rec."LaserFiche Entry ID" <> 0 THEN BEGIN
          IF Rec.Type = Rec.Type::Client THEN
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Client)
          ELSE IF Rec.Type = Rec.Type::Entity THEN
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Entity);

          CorrespondenceStore.SETRANGE("No.",Rec."No.");
          CorrespondenceStore.SETRANGE("LaserFiche Entry ID",Rec."LaserFiche Entry ID");
          IF NOT CorrespondenceStore.FINDFIRST THEN BEGIN
            CorrespondenceStore.Type := Rec.Type;
            CorrespondenceStore."No." := Rec."No.";
            CorrespondenceStore.ID := Rec.ID;
            CorrespondenceStore."External DMS Status" := Rec."External DMS Status";
            CorrespondenceStore."MS Office Doc Type" := Rec."MS Office Doc Type";
            CorrespondenceStore.Subject := Rec.Subject;
            CorrespondenceStore.Info1 := Rec.Info1;
            CorrespondenceStore.Info2 := Rec.Info2;
            CorrespondenceStore."Document GUID" := Rec."Document GUID";
            CorrespondenceStore.Name := Rec.Name;
            CorrespondenceStore."Last Date Modified" := Rec."Last Date Modified";
            CorrespondenceStore.Authorised := Rec.Authorised;
            CorrespondenceStore."Workflow No." := Rec."Workflow No.";
            CorrespondenceStore."Payment No." := Rec."Payment No.";
            CorrespondenceStore.FilePath := Rec.FilePath;
            CorrespondenceStore.FileName := Rec.FileName;
            CorrespondenceStore."Source of Document" := Rec."Source of Document";
            CorrespondenceStore."Document Inserted Date" := Rec."Document Inserted Date";
            CorrespondenceStore."Document Inserted By" := Rec."Document Inserted By";
            CorrespondenceStore."Last Accessed By" := Rec."Last Accessed By";
            CorrespondenceStore."Document in Paper Form" := Rec."Document in Paper Form";
            CorrespondenceStore."Additional Information" := Rec."Additional Information";
            CorrespondenceStore."Document Type" := Rec."Document Type";
            CorrespondenceStore."Document Type Text" := Rec."Document Type Text";
            CorrespondenceStore."Document Sub Type" := Rec."Document Sub Type";
            CorrespondenceStore."Document Sub Type Text" := Rec."Document Sub Type Text";
            CorrespondenceStore.Author := Rec.Author;
            CorrespondenceStore."F2-Restricted" := Rec."F2-Restricted";
            CorrespondenceStore."Document Date" := Rec."Document Date";
            CorrespondenceStore."Document Expiry Date" := Rec."Document Expiry Date";
            CorrespondenceStore."LaserFiche Entry ID" := Rec."LaserFiche Entry ID";
            CorrespondenceStore.Priority := Rec.Priority;

            CorrespondenceStore.INSERT;
         END ELSE BEGIN
            CorrespondenceStore."External DMS Status" := Rec."External DMS Status";
            CorrespondenceStore."MS Office Doc Type" := Rec."MS Office Doc Type";
            CorrespondenceStore.Subject := Rec.Subject;
            CorrespondenceStore.Info1 := Rec.Info1;
            CorrespondenceStore.Info2 := Rec.Info2;
            CorrespondenceStore."Document GUID" := Rec."Document GUID";
            CorrespondenceStore.Name := Rec.Name;
            CorrespondenceStore."Last Date Modified" := Rec."Last Date Modified";
            CorrespondenceStore.Authorised := Rec.Authorised;
            CorrespondenceStore."Workflow No." := Rec."Workflow No.";
            CorrespondenceStore."Payment No." := Rec."Payment No.";
            CorrespondenceStore.FilePath := Rec.FilePath;
            CorrespondenceStore.FileName := Rec.FileName;
            CorrespondenceStore."Source of Document" := Rec."Source of Document";
            CorrespondenceStore."Document Inserted Date" := Rec."Document Inserted Date";
            CorrespondenceStore."Document Inserted By" := Rec."Document Inserted By";
            CorrespondenceStore."Last Accessed By" := Rec."Last Accessed By";
            CorrespondenceStore."Document in Paper Form" := Rec."Document in Paper Form";
            CorrespondenceStore."Additional Information" := Rec."Additional Information";
            CorrespondenceStore."Document Type" := Rec."Document Type";
            CorrespondenceStore."Document Type Text" := Rec."Document Type Text";
            CorrespondenceStore."Document Sub Type" := Rec."Document Sub Type";
            CorrespondenceStore."Document Sub Type Text" := Rec."Document Sub Type Text";
            CorrespondenceStore.Author := Rec.Author;
            CorrespondenceStore."F2-Restricted" := Rec."F2-Restricted";
            CorrespondenceStore."Document Date" := Rec."Document Date";
            CorrespondenceStore."Document Expiry Date" := Rec."Document Expiry Date";
            CorrespondenceStore.Priority := Rec.Priority;

            CorrespondenceStore.MODIFY;
          END;
        END;

    END;

    PROCEDURE NAVLFDocumentFlowAPI@100000006(VAR Pcontent@100000044 : Record 99008535;pFileName@100000043 : Text);
    VAR
      HttpWebReqMgt@100000038 : Codeunit 1297;
      BaseURL@100000037 : Text;
      User@100000036 : Text;
      Password@100000035 : Text;
      payload@100000034 : Text;
      ResponseBody@100000033 : Text;
      ErrorMessage@100000032 : Text;
      ErrorDetails@100000031 : Text;
      HttpStatusCode@100000030 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000029 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000028 : Text;
      ResponseJson@100000027 : Text;
      HttpError@100000026 : Text;
      JsonArray@100000025 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000024 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000023 : Record 99008535;
      OutStr@100000022 : OutStream;
      TempBlob1@100000021 : Record 99008535;
      InStr@100000020 : InStream;
      ApiResult@100000019 : Text;
      JSONMgt@100000018 : Codeunit 5459;
      ApiRequest@100000017 : Text;
      Base64Text@100000016 : Text;
      InStr1@100000015 : InStream;
      TextRead@100000014 : Text;
      OutStr1@100000013 : OutStream;
      TempBlob2@100000012 : Record 99008535;
      Instr2@100000011 : InStream;
      Bytes@100000010 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000007 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000006 : Record 50006;
      Window@100000005 : Dialog;
      NoOfRecs@100000004 : Integer;
      CurrRec@100000003 : Integer;
      TempPath@100000002 : Text;
      DFXBulkDocumentLink@100000039 : Record 50015;
      Tempblob5@100000000 : Record 99008535;
    BEGIN
      //IF FileContent = '' THEN BEGIN
        //ERROR('Please select a file with content');
        //FileName := '';
      //END;
      //CLEAR(Base64Text);
      DFXSetup.GET;
      BaseURL := DFXSetup."LF API URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";
      //Base64Text := convert.ToBase64String(Encoding.UTF8.GetBytes(Pcontent));
      //Tempblob5.RESET;
      //Tempblob5.Blob.CREATEOUTSTREAM(Pcontent);

      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);
      TempBlob.RESET;
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"Repository": "'+ DFXSetup.Repository +'",');
      OutStr.WRITETEXT('"Files":');
      OutStr.WRITETEXT('[{');
      OutStr.WRITETEXT('"File": "' + pFileName + '",');
      OutStr.WRITETEXT('"LocalFile": "0",');
      OutStr.WRITETEXT('"Filename": "",');
      OutStr.WRITETEXT('"SecCode": "",');
      OutStr.WRITETEXT('"Properties":[],');
      OutStr.WRITETEXT('"Tags": ["Systemtag"],');
      OutStr.WRITETEXT('"Data": "'+ Pcontent.ToBase64String + '",');
      OutStr.WRITETEXT('"VolumeID": "1"');
      OutStr.WRITETEXT('}]');
      OutStr.WRITETEXT('}');



      HttpWebReqMgt.AddBodyBlob(TempBlob);
      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);

      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);
      END ELSE
       ERROR('API ISSUE -' +'Status: '+FORMAT(HttpStatusCode));
    END;

    PROCEDURE ElasticSearchAPI@100000011(SearchText@100000029 : Text);
    VAR
      HttpWebReqMgt@100000020 : Codeunit 1297;
      BaseURL@100000019 : Text;
      User@100000018 : Text;
      Password@100000017 : Text;
      payload@100000016 : Text;
      ResponseBody@100000015 : Text;
      ErrorMessage@100000014 : Text;
      ErrorDetails@100000013 : Text;
      HttpStatusCode@100000012 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000010 : Text;
      ResponseJson@100000009 : Text;
      HttpError@100000008 : Text;
      JsonArray@100000007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000005 : Record 99008535;
      OutStr@100000004 : OutStream;
      TempBlob1@100000003 : Record 99008535;
      InStr@100000002 : InStream;
      ApiResult@100000001 : Text;
      JSONMgt@100000000 : Codeunit 5459;
      ApiRequest@100000021 : Text;
      RequestStr@100000022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      BlobStr@100000023 : InStream;
      TempBlob2@100000024 : Record 99008535;
      ResStream@100000025 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      ResStreamReader@100000026 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      Response@100000027 : Text;
      DFXSetup@100000028 : Record 50006;
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."LF API URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";


      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"Repository":"'+ DFXSetup.Repository +'",');
      OutStr.WRITETEXT('"Columns":');
      OutStr.WRITETEXT('[');
      OutStr.WRITETEXT('[');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"SearchFieldType":0,');
      OutStr.WRITETEXT('"BaseField":"Text",');
      OutStr.WRITETEXT('"Value":"'+ SearchText +'",');
      OutStr.WRITETEXT('"Condition":0');
      OutStr.WRITETEXT('}');
      OutStr.WRITETEXT(']');
      OutStr.WRITETEXT('],');
      OutStr.WRITETEXT('"Page":1,');
      OutStr.WRITETEXT('"No":100,');
      OutStr.WRITETEXT('"ColumnSortType":1,');
      OutStr.WRITETEXT('"ColumnName":"Client Name",');
      OutStr.WRITETEXT('"ColumnSortOrder":0');
      OutStr.WRITETEXT('}');


      HttpWebReqMgt.AddBodyBlob(TempBlob);

      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText(ResponseBody,TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);
      END;
      MESSAGE(ApiRequest);
      MESSAGE(ApiResult);
    END;

    BEGIN
    {
      //Create functionality When a document is created in External system it will create,update,delete a entry in Correspondance store
      //NAV attribute is now on one - one.. 14-09-2021 checked if entry exxists
      //checked if entry exxists
      //IF Yes then unlink and link
      //IF No then Link only
    }
    END.
  }
}

OBJECT Codeunit 50012 Passport
{
  OBJECT-PROPERTIES
  {
    Date=15-06-21;
    Time=20:53:20;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE UpdatePassports@1000000000(EntityNumber@1000000002 : Code[20];FirstSecond@1000000000 : 'First,Second';PassportNumber@1000000001 : Text[50];IssueDate@1000000003 : Date;ExpiryDate@1000000004 : Date;CountryIssued@1000000005 : Code[10]);
    VAR
      EntityRec@1000000006 : Record 9068505;
    BEGIN
      IF NOT EntityRec.GET(EntityNumber) THEN
        EXIT;

      CASE FirstSecond OF
        FirstSecond::First : BEGIN
          EntityRec."Passport number" := PassportNumber;
          EntityRec."Passport/ID Issue Date" := IssueDate;
          EntityRec."Passport expiry date" := ExpiryDate;
          EntityRec."Passport country of issue" := CountryIssued;
        END;
        FirstSecond::Second : BEGIN
          EntityRec."Passport/ID Number (2)" := PassportNumber;
          EntityRec."Passport/ID Issue Date (2)" := IssueDate;
          EntityRec."Passport/ID Expiry Date (2)" := ExpiryDate;
          EntityRec."Passport/ID Country (2)" := CountryIssued;
        END;
      END;

      EntityRec.MODIFY;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50013 API Functions2
{
  OBJECT-PROPERTIES
  {
    Date=25-04-22;
    Time=16:15:05;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=VAR
            TestDateTime@100000000 : DateTime;
            Datetimetext@100000001 : Text;
          BEGIN
            MESSAGE('Licence');
          END;

  }
  CODE
  {
    VAR
      ClientManagementFunctions@100000000 : Codeunit 9068493;
      NavOneSystem@100000002 : Codeunit 9068249;
      DataPartitioningMgmt@100000001 : Codeunit 9072480;
      NoSeriesManagement@1000000000 : Codeunit 396;
      WSIDClient@1000000001 : Text[100];
      WSIDEntity@1000000002 : Text[100];

    [External]
    PROCEDURE CreateClient@100000002(Name@100000000 : Text[50];ClientType@100000001 : Code[10];ClientFormalName@100000002 : Text[150];CurrencyCode@100000003 : Code[10];LegalCode@100000004 : Code[20];FirstPartitionCode@100000005 : Code[10];SecondPartitionCode@100000006 : Code[10];TrustDirector@100000007 : Code[20];RelationshipManager@100000008 : Code[20];AssistRelationshipManager@100000009 : Code[20];Administrator@100000010 : Code[20];Accountant@100000011 : Code[20];ClientActivityGroup@100000012 : Code[20];CreateFiscalYear@100000013 : Boolean;InserMailingAddress@100000014 : Boolean);
    VAR
      ClientRecTEMP@100000019 : TEMPORARY Record 9068500;
      ClientRec@100000015 : Record 9068500;
      ClientGLSetup@100000016 : Record 9068618;
      NewClientGLSetup@100000017 : Record 9068618;
      ClientTypeRec@100000018 : Record 9068501;
      NewClientSetup@100000020 : Codeunit 9068482;
      CreatedProperly@100000021 : Boolean;
    BEGIN
      ClientRecTEMP.INIT;
      ClientRecTEMP.Type := ClientType;
      ClientRecTEMP.Name := Name;
      ClientRecTEMP."Client Formal Name" := ClientFormalName;
      ClientRecTEMP."Currency Code" := CurrencyCode;
      ClientRecTEMP."Global Dimension 1 Code" := LegalCode;
      ClientRecTEMP."First Partition Code" := FirstPartitionCode;
      ClientRecTEMP."Second Partition Code" := SecondPartitionCode;
      ClientRecTEMP.ClientAnalysisA := TrustDirector;
      ClientRecTEMP.ClientAnalysisB := RelationshipManager;
      ClientRecTEMP.ClientAnalysisC := AssistRelationshipManager;
      ClientRecTEMP.ClientAnalysisD := Administrator;
      ClientRecTEMP.ClientAnalysisE := Accountant;
      ClientRecTEMP.ClientAnalysisF := ClientActivityGroup;
      ClientRec := ClientRecTEMP;

      NewClientSetup.CreateClient(ClientRec, CurrencyCode, InserMailingAddress,
        ClientRec."Global Dimension 2 Code", '') ;
    END;

    [External]
    PROCEDURE CreateEntity@1000000001(Name@1000000000 : Text[50];Name2@1000000001 : Text[50];DateOfBirth@1000000002 : Date;Nationality@1000000003 : Code[10];Profession@1000000004 : Code[10];Residence@1000000005 : Code[10];Personal_Corporate@1000000006 : 'Personal,Corporate';Jurisdiction@1000000007 : Code[10];CountryofIncorporation@1000000008 : Code[10];DateOfIncorporation@1000000011 : Date;CreateOwner@100000000 : Boolean;isBank@100000001 : Boolean) EntityCode : Code[20];
    VAR
      Entity@100000003 : Record 9068505;
      Owner@100000002 : Record 9068443;
    BEGIN

      IF Personal_Corporate = Personal_Corporate::Personal THEN
        IF (STRLEN(Name) < 2) THEN
          ERROR('Name must be at least 2 characters');
      // IF Personal_Corporate = Personal_Corporate::Corporate THEN
      //  IF (STRLEN(Name2) < 2) THEN
      //    ERROR('Name2 must be at least 2 characters');

      Entity.INIT;
      Entity.Name :=  Name;
      Entity."Name 2" := Name2;
      Entity.UpdateFormalName;
      Entity."Date of Birth" := DateOfBirth;
      Entity.Nationality := Nationality;
      Entity.Profession := Profession;
      Entity.Residence := Residence;
      CASE Personal_Corporate OF
        Personal_Corporate::Personal : Entity."Personal/Corporate" := Entity."Personal/Corporate"::Personal;
        Personal_Corporate::Corporate : Entity."Personal/Corporate":= Entity."Personal/Corporate"::Corporate;
      END;
      IF isBank THEN
        Entity."Entity Type" := Entity."Entity Type"::Bank;

      Entity.Jurisdiction := Jurisdiction;
      Entity."Country of Incorporation" := CountryofIncorporation;
      Entity."Date of incorp./formation" := DateOfIncorporation;
      Entity.INSERT(TRUE);

      IF CreateOwner THEN BEGIN
        Owner.INIT;
        Owner."Entity No." := Entity."Entity No.";
        Owner.INSERT(TRUE);

        Entity."Owner No." := Owner."No.";
        Entity.MODIFY;

        ClientManagementFunctions.UpdateOwnerFromEntity(Entity,FALSE);
      END;
      //EXIT(EntityCode);
    END;

    [External]
    PROCEDURE CreateBankAccount@100000000(ClientNo@100000000 : Code[20];BankCode@100000001 : Code[20];Name@100000002 : Text[50];Name2@100000003 : Text[50];AccountInNameOf@100000004 : Text[150];BankAccountNo@100000005 : Text[30];PostingGroup@100000006 : Code[10];CurrencyCode@100000007 : Code[10];SortCode@100000008 : Text[20];SwiftCode@100000009 : Code[20];IBAN@100000010 : Code[50]);
    VAR
      ClientAccount@100000011 : Record 9068624;
    BEGIN
      ClientAccount.INIT;
      ClientAccount."Client No." := ClientNo;
      ClientAccount.VALIDATE("Bank Code",BankCode);
      ClientAccount.Name := Name;
      ClientAccount."Name 2" := Name2;
      ClientAccount."Account In Name Of" := AccountInNameOf;
      ClientAccount."Bank Account No." := BankAccountNo;
      ClientAccount.VALIDATE("Posting Group",PostingGroup);
      ClientAccount."Currency Code" := CurrencyCode;
      ClientAccount."Sort Code" := SortCode;
      ClientAccount."Swift Code" := SwiftCode;
      ClientAccount.IBAN := IBAN;
      ClientAccount.INSERT(TRUE);
    END;

    [External]
    PROCEDURE ShowInvoice@1000000000(DocumentNo@1000000000 : Code[20];FilePath@1000000003 : Text) PDFFileName : Text;
    VAR
      ClientInvoice@1000000001 : Record 9068453;
      ClientInvoiceTemplate2@1000000002 : Report 9072674;
      SalesInvoiceHeader@1000000004 : Record 112;
    BEGIN
      IF SalesInvoiceHeader.GET(DocumentNo) THEN
        IF NOT ClientInvoice.GET(SalesInvoiceHeader."Billing Guide Number") THEN
          EXIT;

      IF FilePath = '' THEN
        EXIT;

      PDFFileName :=  FilePath + FORMAT(CREATEGUID);
      PDFFileName := DELCHR(PDFFileName,'=','{-}');
      PDFFileName += '.pdf';
      ClientInvoiceTemplate2.SETTABLEVIEW(ClientInvoice);
      ClientInvoiceTemplate2.SAVEASPDF(PDFFileName);

      EXIT(PDFFileName);
    END;

    [External]
    PROCEDURE GetBillingGuideNo@1000000007(DocumentNo@1000000000 : Code[20]) BillingGuiideNo : Code[20];
    VAR
      SalesInvoiceHeader@1000000001 : Record 112;
    BEGIN
      IF SalesInvoiceHeader.GET(DocumentNo) THEN
        EXIT(SalesInvoiceHeader."Billing Guide Number");
    END;

    [External]
    PROCEDURE VistraPayment@1000000002(ClientNo@1000000000 : Code[20];InvoiceNo@1000000001 : Code[20];PaymentDate@1000000002 : Date;CurrencyCode@1000000003 : Code[10];TotalAmount@1000000004 : Decimal;BenefName@1000000005 : Text[150];BenefAddress@1000000006 : Text[50];BenefAddress2@1000000007 : Text[50];BenefBankName@1000000008 : Text[70];BenefBankAddress@1000000009 : Text[140];BenefBankAccountNo@1000000010 : Text[34]) ReturnError : Text;
    VAR
      ClientRec@1000000011 : Record 9068500;
      TWMPayments@1000000012 : Record 9072144;
      TWMPaymentsExtension@1000000013 : Record 9072145;
      TWMBankingIntegrationSetup@1000000014 : Record 9072130;
      TWMPaymentsCU@1000000015 : Codeunit 9072130;
    BEGIN

      IF NOT ClientRec.GET(ClientNo) THEN
        ERROR('Client not found');

      TWMPayments.INIT;
      TWMPayments."Document Type" := TWMPayments."Document Type"::Payment;
      TWMBankingIntegrationSetup.GET;
       TWMBankingIntegrationSetup.TESTFIELD("Payment Reference Nos.");
       TWMPayments.Reference := NoSeriesManagement.GetNextNo(TWMBankingIntegrationSetup."Payment Reference Nos.", TODAY, TRUE);
       TWMPayments."No. Series" := TWMBankingIntegrationSetup."Payment Reference Nos.";
      TWMPayments.INSERT(TRUE);

      // TWMPayments.CreateExtendedFields;
      // TWMPayments.CreateAuthSelection;
      // TWMPaymentsCU.CreateJnlTemplates(TWMPayments);
      // TWMPaymentsCU.UpdateJournals(TWMPayments);

      TWMPayments."Internal / External" := TWMPayments."Internal / External"::"External Payment";
      TWMPayments.VALIDATE("External Payment Type", TWMPayments."External Payment Type"::SWIFT);
      TWMPayments.VALIDATE("From Client",ClientRec."Client No.");
      TWMPayments.VALIDATE("Value Date",PaymentDate);
      TWMPayments.VALIDATE("To Currency",CurrencyCode);
      TWMPayments.VALIDATE("Payment Amount",TotalAmount);
      TWMPayments."Payments Details" := InvoiceNo;
      TWMPayments.VALIDATE("Beneficiary Customer",BenefName);
      TWMPayments.VALIDATE("Beneficiarys Bank Line 1",BenefBankName);
      TWMPayments."Beneficiarys Bank Line 2" := BenefBankAddress;
      TWMPayments."Beneficiary Account Number" := BenefBankAccountNo;
      TWMPayments.Status := TWMPayments.Status::"Enter Details";
      TWMPayments.MODIFY;

      IF TWMPaymentsExtension.GET(TWMPayments.Reference) THEN BEGIN
        TWMPaymentsExtension."Beneficiary Address" := BenefAddress;
        TWMPaymentsExtension."Beneficiary Address 2" := BenefAddress2;
        TWMPaymentsExtension.MODIFY;
      END;
    END;

    [External]
    PROCEDURE LinkDocument@1000000003(Type@1000000000 : ' ,Client,Entity,Prospect,Intermediary,Client Owner,Resource,,Dimension,,,External Bank Payment,,,,Potential Client,Custom1';Name@1000000001 : Text[50];FileNamePath@1000000014 : Text[500];DocumentType@1000000003 : Code[10];DocumentSubType@1000000004 : Code[20];DocumentDate@1000000005 : Date;Subject@1000000006 : Text[150];DocumentExpiryDate@1000000007 : Date;AdditionalInformation@1000000008 : Text[100]);
    VAR
      ClientRec@1000000002 : Record 9068500;
      EntityRec@1000000015 : Record 9068505;
      CorrespondenceStore@1000000011 : Record 9068660;
      DocumentFolderSetup@1000000010 : Record 9068662;
      DocumentandMailManagement@1000000009 : Codeunit 9068511;
      DocType@1000000012 : Code[50];
      TempCode@1000000013 : Code[20];
      No_@1000000016 : Code[20];
    BEGIN
      DocumentFolderSetup.GET;
      IF DocumentFolderSetup."External Doc Management System" <> DocumentFolderSetup."External Doc Management System"::"Internal Navision" THEN
        ERROR('Link Document supports only Internal Navision DMS');

      CASE Type OF
        Type::Client : BEGIN
          ClientRec.SETFILTER(Name,'%1','@*' + Name + '*');
          IF NOT ClientRec.FINDFIRST THEN
            ERROR('Client not found');
          No_ := ClientRec."Client No.";
        END;
        Type::Entity : BEGIN
          EntityRec.SETFILTER(Name,'%1','@*' + Name + '*');
          IF NOT EntityRec.FINDFIRST THEN
            ERROR('Entity not found');
          No_ := EntityRec."Entity No.";
        END;
        ELSE ERROR('Not coded');
      END;
      CorrespondenceStore.Type := Type;
      CorrespondenceStore."No." := No_;
      CorrespondenceStore.Name := ReturnEntityName(Type,No_);
      CorrespondenceStore.Subject := Subject;
      IF DocumentType <> '' THEN BEGIN
        CorrespondenceStore."Document Type" := DocumentType;
        CorrespondenceStore."Document Sub Type" := DocumentSubType;
      END ELSE
        CorrespondenceStore."Document Type" := 'Migrated';

      CorrespondenceStore."Document Date" := DocumentDate;
      CorrespondenceStore."Additional Information" := AdditionalInformation;
      CorrespondenceStore."Document Expiry Date" := DocumentExpiryDate;
      CorrespondenceStore."Document Inserted Date" := TODAY;
      CorrespondenceStore."Document Inserted By" := USERID;
      CorrespondenceStore."Last Accessed Via Navision" := TODAY;
      CorrespondenceStore."Last Accessed By" := USERID;
      CorrespondenceStore.ID := DocumentandMailManagement."Get Next Document Number"(Type,No_);
      CorrespondenceStore."Document GUID" := CREATEGUID;
      DocumentandMailManagement."Get File Details From FullPath"(FileNamePath,CorrespondenceStore."MS Office Doc Type",CorrespondenceStore.FileName,
                                  CorrespondenceStore.FilePath);
      //CorrespondenceStore.FilePath := FilePath;
      //CorrespondenceStore.FileName := FileName;
      CorrespondenceStore.INSERT;
    END;

    [External]
    PROCEDURE UpdateDocumentType@1000000006(Type@1000000000 : ' ,Client,Entity,Prospect,Intermediary,Client Owner,Resource,,Dimension,,,External Bank Payment,,,,Potential Client,Custom1';Name@1000000006 : Text[50];FileNamePath@1000000014 : Text[500];DocumentType@1000000003 : Code[10];DocumentSubType@1000000004 : Code[20]);
    VAR
      ClientRec@1000000008 : Record 9068500;
      EntityRec@1000000007 : Record 9068505;
      CorrespondenceStore@1000000011 : Record 9068660;
      DocumentFolderSetup@1000000010 : Record 9068662;
      DocumentandMailManagement@1000000009 : Codeunit 9068511;
      DocType@1000000012 : Code[10];
      TempCode@1000000013 : Code[20];
      FileName@1000000002 : Text[250];
      FilePath@1000000005 : Text[250];
      No_@1000000001 : Code[20];
    BEGIN
      // DocumentFolderSetup.GET;
      // IF DocumentFolderSetup."External Doc Management System" <> DocumentFolderSetup."External Doc Management System"::"Internal Navision" THEN
      //  ERROR('Link Document supports only Internal Navision DMS');

      CASE Type OF
        Type::Client : BEGIN
          ClientRec.SETFILTER(Name,'%1','@*' + Name + '*');
          IF NOT ClientRec.FINDFIRST THEN
            ERROR('Client not found');
          No_ := ClientRec."Client No.";
        END;
        Type::Entity : BEGIN
          EntityRec.SETFILTER(Name,'%1','@*' + Name + '*');
          IF NOT EntityRec.FINDFIRST THEN
            ERROR('Entity not found');
          No_ := EntityRec."Entity No.";
        END;
        ELSE ERROR('Not coded');
      END;

      DocumentandMailManagement."Get File Details From FullPath"(FileNamePath,DocType,FileName,
                                  FilePath);


      CorrespondenceStore.SETRANGE(Type,Type);
      CorrespondenceStore.SETRANGE("No.",No_);
      CorrespondenceStore.SETRANGE(FileName,FileName);
      CorrespondenceStore.SETRANGE(FilePath,FilePath);
      IF CorrespondenceStore.FINDFIRST THEN BEGIN
        CorrespondenceStore."Document Type" := DocumentType;
        CorrespondenceStore."Document Sub Type" := DocumentSubType;
        CorrespondenceStore.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ReturnEntityName@1000000010(Type@1000000007 : ' ,Client,Entity,Prospect,Intermediary,Client Owner,Resource,,Dimension,,,External Bank Payment,,,,Potential Client,Custom1';No_@1000000006 : Code[20]) : Text;
    VAR
      Client@1000000000 : Record 9068500;
      Entity@1000000001 : Record 9068505;
      Prospect@1000000002 : Record 9068440;
      Intermediary@1000000003 : Record 9068447;
      Owner@1000000004 : Record 9068443;
      PotentialClient@1000000005 : Record 9068732;
    BEGIN
      IF Type = Type::Client THEN BEGIN
        IF Client.GET(No_) THEN
          EXIT(Client."Search Name");
      END ELSE IF Type = Type::Prospect THEN BEGIN
        IF Prospect.GET(No_) THEN
          EXIT(Prospect."Search Name");
      END ELSE IF Type = Type::"Client Owner" THEN BEGIN
        IF Owner.GET(No_) THEN
          EXIT(Owner."Search Name");
      END ELSE IF Type = Type::Entity THEN BEGIN
        IF Entity.GET(No_) THEN
          EXIT(Entity."Search Name");
      END ELSE IF Type = Type::"Potential Client" THEN BEGIN
        IF PotentialClient.GET(No_) THEN
          EXIT(PotentialClient."Search Name");
      END ELSE IF Type = Type::Intermediary THEN BEGIN
        IF Intermediary.GET(No_) THEN
          EXIT(Intermediary."Search Name");
      END;
    END;

    [External]
    PROCEDURE PrepareCLENList@1000000004(UserID@1000000000 : Code[50];TableName@1000000001 : Code[10]);
    VAR
      ClientRec@1000000002 : Record 9068500;
      EntityRec@1000000003 : Record 9068505;
      PartitioningRestrictions@1000000004 : Record 9072487;
      PartitionedClientEntity@1000000005 : Record 50000;
      Resource@1000000006 : Record 156;
    BEGIN
      Resource.SETRANGE("Login User ID",UserID);
      IF Resource.ISEMPTY THEN
        EXIT;


      CASE TableName OF
        'CL' : BEGIN
          PartitioningRestrictions.SETRANGE("User ID",UserID);
          PartitioningRestrictions.SETRANGE("Table Name",PartitioningRestrictions."Table Name"::Client);

          PartitionedClientEntity.SETRANGE("Table Name",'CL');
          PartitionedClientEntity.SETRANGE("USER ID",UserID);

          IF ClientRec.FINDSET THEN REPEAT
            PartitionedClientEntity.SETRANGE("Client No._Entity No.",ClientRec."Client No.");
            IF PartitionedClientEntity.ISEMPTY THEN BEGIN
              PartitioningRestrictions.SETRANGE("Primary Key",ClientRec."Client No.");
              IF PartitioningRestrictions.ISEMPTY THEN BEGIN
                PartitionedClientEntity.INIT;
                PartitionedClientEntity."Table Name" := 'CL';
                PartitionedClientEntity."USER ID" := UserID;
                PartitionedClientEntity."Client No._Entity No." := ClientRec."Client No.";
                PartitionedClientEntity."Client No._Entity No." := ClientRec."First Partition Code";
                PartitionedClientEntity."First Partition Code" := ClientRec."Second Partition Code";
                PartitionedClientEntity."Client Name" := ClientRec.Name;
                PartitionedClientEntity."CL Country of Incorporation" := ClientRec."Country of Incorporation";
                PartitionedClientEntity."CL Date of Incorporation" := ClientRec."Date of Incorporation";
                PartitionedClientEntity."Registered Number" := ClientRec."Registered Number";
                ClientRec.CALCFIELDS("Currency Code");
                PartitionedClientEntity."Currency Code" := ClientRec."Currency Code";
                PartitionedClientEntity."Administrative Office" := ClientRec."Administrative Office";
                PartitionedClientEntity."Registered Office" := ClientRec."Registered Office";
                PartitionedClientEntity."Global Dimension 1 Code" := ClientRec."Global Dimension 1 Code";
                PartitionedClientEntity.ClientAnalysisA := ClientRec.ClientAnalysisA;
                PartitionedClientEntity.ClientAnalysisB := ClientRec.ClientAnalysisB;
                PartitionedClientEntity.ClientAnalysisC := ClientRec.ClientAnalysisC;
                PartitionedClientEntity.ClientAnalysisD := ClientRec.ClientAnalysisD;
                PartitionedClientEntity.ClientAnalysisE := ClientRec.ClientAnalysisE;
                PartitionedClientEntity.ClientAnalysisF := ClientRec.ClientAnalysisF;
                PartitionedClientEntity.INSERT;
              END;
            END;
          UNTIL ClientRec.NEXT = 0;
        END;
        'EN' : BEGIN
          PartitioningRestrictions.SETRANGE("User ID",UserID);
          PartitioningRestrictions.SETRANGE("Table Name",PartitioningRestrictions."Table Name"::Entity);

          PartitionedClientEntity.SETRANGE("Table Name",'EN');
          PartitionedClientEntity.SETRANGE("USER ID",UserID);

          IF EntityRec.FINDSET THEN REPEAT
            PartitionedClientEntity.SETRANGE("Client No._Entity No.",EntityRec."Entity No.");
            IF PartitionedClientEntity.ISEMPTY THEN BEGIN
              PartitioningRestrictions.SETRANGE("Primary Key",EntityRec."Entity No.");
              IF PartitioningRestrictions.ISEMPTY THEN BEGIN
                PartitionedClientEntity.INIT;
                PartitionedClientEntity."Table Name" := 'EN';
                PartitionedClientEntity."USER ID" := UserID;
                PartitionedClientEntity."Client No._Entity No." := EntityRec."Entity No.";
                PartitionedClientEntity."EN Name" := EntityRec.Name;
                PartitionedClientEntity."Date of Birth" := EntityRec."Date of Birth";
                PartitionedClientEntity.Nationality := EntityRec.Nationality;
                PartitionedClientEntity.Profession := EntityRec.Profession;
                PartitionedClientEntity.Residence := EntityRec.Residence;
                PartitionedClientEntity.Title := EntityRec.Title;
                PartitionedClientEntity."Name 2" := EntityRec."Name 2";
                PartitionedClientEntity."Entity Type" := EntityRec."Entity Type";
                PartitionedClientEntity."Marital Status" := EntityRec."Marital Status";
                PartitionedClientEntity.Gender := EntityRec.Gender;
                PartitionedClientEntity.Initials := EntityRec.Initials;
                PartitionedClientEntity."Personal/Corporate" := EntityRec."Personal/Corporate";
                PartitionedClientEntity."EN Country of Incorporation" := EntityRec."Country of Incorporation";
                PartitionedClientEntity."EN Jurisdiction" := EntityRec.Jurisdiction;
                PartitionedClientEntity.INSERT;
              END;
            END;
          UNTIL EntityRec.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE GetClientType@1000000005(pClientCode@1000000000 : Code[20]) ClType : Code[30];
    VAR
      ClientRec@1000000001 : Record 9068500;
    BEGIN
      IF ClientRec.GET(pClientCode) THEN BEGIN
        ClientRec.CALCFIELDS("Client Type Type");
        ClType :=  FORMAT(ClientRec."Client Type Type");
        EXIT(ClType);
      END;
    END;

    [External]
    PROCEDURE CreateCustomer@1000000008(Name@1000000014 : Text[50];ClientType@1000000013 : Code[10];SearchName@1000000012 : Text[150];CurrencyCode@1000000011 : Code[10];LegalCode@1000000010 : Code[20];FirstPartitionCode@1000000009 : Code[10];SecondPartitionCode@1000000008 : Code[10];TrustDirector@1000000007 : Code[20];RelationshipManager@1000000006 : Code[20];AssistRelationshipManager@1000000005 : Code[20];Administrator@1000000004 : Code[20];Accountant@1000000003 : Code[20];ClientActivityGroup@1000000002 : Code[20];CreateFiscalYear@1000000001 : Boolean;InserMailingAddress@1000000000 : Boolean);
    VAR
      CustRecTEMP@1000000028 : TEMPORARY Record 18;
      CustRec@1000000027 : Record 18;
      CustGLSetup@1000000026 : Record 98;
      NewCustGLSetup@1000000025 : Record 98;
      ClientTypeRec@1000000024 : Record 9068501;
      CreatedProperly@1000000022 : Boolean;
    BEGIN
      CustRecTEMP.INIT;
      //CustRecTEMP.Type := ClientType;
      CustRecTEMP.Name := Name;
      CustRecTEMP."Search Name" := SearchName;
      CustRecTEMP."Currency Code" := CurrencyCode;
      CustRecTEMP."Global Dimension 1 Code" := LegalCode;
      CustRecTEMP."First Partition Code" := FirstPartitionCode;
      CustRecTEMP."Second Partition Code" := SecondPartitionCode;
      CustRecTEMP.ClientAnalysisA := TrustDirector;
      CustRecTEMP.ClientAnalysisB := RelationshipManager;
      CustRecTEMP.ClientAnalysisC := AssistRelationshipManager;
      CustRecTEMP.ClientAnalysisD := Administrator;
      CustRecTEMP.ClientAnalysisE := Accountant;
      CustRecTEMP.ClientAnalysisF := ClientActivityGroup;
      CustRec := CustRecTEMP;
      CustRec.INSERT(TRUE);

      //NewClientSetup.CreateClient(CustRec, CurrencyCode, InserMailingAddress,
        //CustRec."Global Dimension 2 Code", '') ;
    END;

    [External]
    PROCEDURE UpdateEntity@1000000012(EntityNo@1000000043 : Text;Type@1000000042 : Text[50];Personal_Corporate@1000000041 : 'Personal,Corporate';Name@1000000040 : Text[50];Name2@1000000039 : Text[50];AnonimisedName@1000000038 : Text[50];Initials@1000000037 : Text[50];SearchName@1000000036 : Text[50];Gender@1000000035 : ',Male,Female';PEP@1000000034 : Boolean;EP@1000000033 : Boolean;Classification@1000000032 : Text[50];"Externa ReferenceNo"@1000000031 : Text[50];Passportnumber@1000000030 : Text[50];Passportcountryofissue@1000000029 : Text[50];"Passport/IDIssueDate"@1000000028 : Date;Passportexpirydate@1000000027 : Date;"Passport/IDNumber(2)"@1000000026 : Text[50];"Passport/IDCountry(2)"@1000000025 : Text[50];"Passport/IDIssueDate(2)"@1000000024 : Date;"Passport/IDExpiryDate(2)"@1000000023 : Date;DateofBirth@1000000022 : Date;Nationality@1000000021 : Text[50];BankSwiftCode@1000000020 : Text[50];BankSortCode@1000000019 : Text[50];Inactive@1000000018 : Boolean;NINumber@1000000017 : Text[50];Profession@1000000016 : Text[50];"OwnerNo."@1000000015 : Text[50];Manager@1000000014 : Text[50];Administrator@1000000013 : Text[50];FirstPartitionCode@1000000012 : Text[50];FormalName@1000000011 : Text[50];LastRiskAssessmentDate@1000000010 : Date;NextRiskAssessmentDueDate@1000000009 : Date;CurrentRiskRating@1000000008 : Text[50];CurrentRiskWeight@1000000007 : Integer;Address1@1000000006 : Text[50];Address2@1000000005 : Text[50];Address3@1000000004 : Text[50];City@1000000003 : Text[50];PostCode@1000000002 : Text[50];County@1000000001 : Text[50];CountryCode@1000000000 : Text[50]);
    VAR
      Entity@1000000044 : Record 9068505;
    BEGIN
      Entity.RESET;
      Entity.SETRANGE("Entity No.",EntityNo);
      IF Entity.FINDFIRST THEN BEGIN
        Entity.Type := Type;
        Entity."Personal/Corporate" := Personal_Corporate;
        Entity.Name :=  Name;
        Entity."Name 2" := Name2;
        Entity.UpdateFormalName;
        Entity."Anonimised Name" := AnonimisedName;
        Entity.Initials := Initials;
        Entity."Search Name" := SearchName;
        Entity.Gender := Gender;
        Entity.PEP := PEP;
        Entity.EP := EP;
        Entity.Classification := Classification;
        Entity."External Reference No" := "Externa ReferenceNo";
        Entity."Passport number" := Passportnumber;
        Entity."Passport country of issue" := Passportcountryofissue;
        Entity."Passport/ID Issue Date" := "Passport/IDIssueDate";
        Entity."Passport expiry date" := Passportexpirydate;
        Entity."Passport/ID Number (2)" := "Passport/IDNumber(2)";
        Entity."Passport/ID Country (2)" := "Passport/IDCountry(2)";
        Entity."Passport/ID Issue Date (2)" := "Passport/IDIssueDate(2)";
        Entity."Passport/ID Expiry Date (2)" := "Passport/IDExpiryDate(2)";
        Entity."Date of Birth" := DateofBirth;
        Entity.Nationality := Nationality;
        Entity."Bank Swift Code" := BankSwiftCode;
        Entity."Bank Sort Code" := BankSortCode;
        Entity.Inactive :=Inactive;
        Entity."NI Number" := NINumber;
        Entity.Profession := Profession;
        Entity."Owner No." := "OwnerNo.";
        Entity.Profession := Profession;
        Entity.Manager := Manager;
        Entity.Administrator := Administrator;
        Entity."First Partition Code" := FirstPartitionCode;
        Entity."Formal Name" := FormalName;
        Entity."Last Risk Assessment Date" := LastRiskAssessmentDate;
        Entity."Next Risk Assessment Due Date" := NextRiskAssessmentDueDate;
        Entity."Current Risk Rating" := CurrentRiskRating;
        Entity."Current Risk Weight" := CurrentRiskWeight;
        Entity."Address 1" := Address1;
        Entity."Address 2" := Address2;
        Entity."Address 3" := Address3;
        Entity.City := City;
        Entity."Post Code" := PostCode;
        Entity.County := County;
        Entity."Country Code" := CountryCode;

        //Entity.Residence := Residence;
        //CASE Personal_Corporate OF
        //Personal_Corporate::Personal : Entity."Personal/Corporate" := Entity."Personal/Corporate"::Personal;
        // Personal_Corporate::Corporate : Entity."Personal/Corporate":= Entity."Personal/Corporate"::Corporate;
        //END;

      //  Entity.Jurisdiction := Jurisdiction;
       // Entity."Country of Incorporation" := CountryofIncorporation;
       // Entity."Date of incorp./formation" := DateOfIncorporation;

        Entity.MODIFY(TRUE);
      END;
    END;

    [External]
    PROCEDURE UpdateOwner@1000000011(Owner_Type@1000000000 : 'Corporate,Personal';No@1000000001 : Text[50];Type@1000000002 : Text[50];Surname@1000000003 : Text[50];Forename_s@1000000004 : Text[50];Anonimised_Name@1000000005 : Text[50];Director@1000000006 : Text[50];Status_Code@1000000007 : Text[50];Currency_Code@1000000008 : Text[50];Search_Name@1000000009 : Text[50];Last_Review_Completed@1000000010 : Date;Next_Review_Due@1000000011 : Date;Closed@1000000012 : Boolean;Formal_Name@1000000013 : Text[50];External_Reference_No@1000000014 : Text[50]);
    VAR
      Owner@1000000015 : Record 9068443;
    BEGIN
      Owner.RESET;
      Owner.SETRANGE("No.",No);
      Owner.SETRANGE("Owner Type",Owner_Type);
      IF Owner.FINDFIRST THEN BEGIN
        Owner.Type := Type;
        //Owner.VALIDATE(owner.Surname,Surname);
        Owner.Surname := Surname;
        Owner."Forename(s)" := Forename_s;
        Owner."Anonimised Name" := Anonimised_Name;
        Owner.Director := Director;
        Owner."Status Code" := Status_Code;
        Owner."Currency Code" := Currency_Code;
        Owner."Search Name" := Search_Name;
        Owner."Last Review Completed" := Last_Review_Completed;
        Owner."Next Review Due" := Next_Review_Due;
        Owner.Closed := Closed;
        Owner."Formal Name" := Formal_Name;
        Owner."External Reference No." := External_Reference_No;
        Owner.MODIFY(TRUE);
      END
    END;

    [External]
    PROCEDURE isEntityPEP@1000000009(pEntityNo@1000000000 : Code[20]) : Boolean;
    VAR
      EntityRec@1000000001 : Record 9068505;
    BEGIN
      IF EntityRec.GET(pEntityNo) AND EntityRec.PEP THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE PrepareClientDetails@1000000013(WSID@1000000000 : Text[100]);
    VAR
      ClientRec@1000000001 : Record 9068500;
      ClientDetails@1000000002 : Record 50001;
      TaxDetails@1000000003 : Record 9068793;
      i@1000000004 : Integer;
    BEGIN
      ClientRec.RESET;
      ClientRec.SETRANGE(Name,WSID);
      IF ClientRec.FINDFIRST THEN BEGIN
      //IF ClientRec.GET(pClientNo) THEN BEGIN
        ClientDetails.SETRANGE(WSID,WSID);
        ClientDetails.DELETEALL;


        ClientDetails.INIT;

        TaxDetails.SETRANGE("Record Type",TaxDetails."Record Type"::Client);
        TaxDetails.SETRANGE("Record No.",ClientRec."Client No.");
        IF TaxDetails.FINDSET THEN BEGIN
          i := 1;
          REPEAT
          ClientDetails."Client No." := ClientRec."Client No.";
          ClientDetails."Entry No." := i;
          ClientDetails.Type := ClientRec.Type;
          ClientDetails.Name := ClientRec.Name;
          ClientDetails."Proper law":= ClientRec."Proper law";
          ClientDetails.Jurisdiction:= ClientRec.Jurisdiction;
          ClientDetails."Tax Status" := ClientRec."Tax Status";
          ClientDetails.WSID := ClientRec.Name;
          ClientDetails."FATCA Account Classification" := ClientRec."FATCA Account Classification";
          ClientDetails."CRS Account Classification" := ClientRec."CRS Account Classification";


            ClientDetails."Tax Code" := TaxDetails."Tax Code";
            ClientDetails."Tax Return Country Code" := TaxDetails."Tax Return Country Code";
            ClientDetails."TIN Type" := TaxDetails."TIN Type";
            ClientDetails.TIN := TaxDetails.TIN;
            ClientDetails."Tax Category" := TaxDetails."Tax Category";
            //ClientDetails."Entry No." := i;
            ClientDetails.INSERT;
            i += 1;

          UNTIL TaxDetails.NEXT = 0;

        END ELSE BEGIN
          ClientDetails."Client No." := ClientRec."Client No.";
          ClientDetails."Entry No." := i;
          ClientDetails.Type := ClientRec.Type;
          ClientDetails.Name := ClientRec.Name;
          ClientDetails."Proper law":= ClientRec."Proper law";
          ClientDetails.Jurisdiction:= ClientRec.Jurisdiction;
          ClientDetails."Tax Status" := ClientRec."Tax Status";
          ClientDetails."FATCA Account Classification" := ClientRec."FATCA Account Classification";
          ClientDetails."CRS Account Classification" := ClientRec."CRS Account Classification";
          ClientDetails.WSID := ClientRec.Name;
          ClientDetails.INSERT;
        END;
        //ClientDetails.INSERT;
      END;
    END;

    [External]
    PROCEDURE PrepareEntityDetails@1000000015(WSID@1000000000 : Text[100]);
    VAR
      EntityRec@1000000001 : Record 9068505;
      EntityDetails@1000000002 : Record 50002;
      TaxDetails@1000000003 : Record 9068793;
      i@1000000004 : Integer;
      TempWSID@1000000005 : Text[100];
    BEGIN
      EntityRec.RESET;
      //TempWSID := 'Mr ' + WSID;
      EntityRec.SETFILTER("Formal Name",'%1','*' + WSID + '*');
      IF EntityRec.FINDFIRST THEN BEGIN
      //IF EntityRec.GET(pEntityNo) THEN BEGIN
        EntityDetails.SETRANGE(WSID,WSID);
        EntityDetails.DELETEALL;

        EntityDetails.INIT;

        TaxDetails.SETRANGE("Record Type",TaxDetails."Record Type"::Entity);
        TaxDetails.SETRANGE("Record No.",EntityRec."Entity No.");

        IF TaxDetails.FINDSET THEN BEGIN
          i := 1;
         REPEAT
            EntityDetails."Entity No." := EntityRec."Entity No.";
            EntityDetails."Entry No." := i;
            EntityDetails.Name := EntityRec.Name;
            EntityDetails."Name 2" := EntityRec."Name 2";
            EntityDetails."Personal/Corporate":= EntityRec."Personal/Corporate";
            EntityDetails.Jurisdiction:= EntityRec.Jurisdiction;
            EntityDetails.Residence := EntityRec.Residence;
            EntityDetails."Passport number" := EntityRec."Passport number";
            EntityDetails."Passport country of issue" := EntityRec."Passport country of issue";
            EntityDetails."Passport/ID Issue Date" := EntityRec."Passport/ID Issue Date";
            EntityDetails."Passport expiry date" := EntityRec."Passport expiry date";
            EntityDetails."Passport/ID Number (2)" := EntityRec."Passport/ID Number (2)";
            EntityDetails."Passport/ID Country (2)" := EntityRec."Passport/ID Country (2)";
            EntityDetails."Passport/ID Issue Date (2)" := EntityRec."Passport/ID Issue Date (2)";
            EntityDetails."Passport/ID Expiry Date (2)" := EntityRec."Passport/ID Expiry Date (2)";
            EntityDetails.WSID := EntityRec."Name 2" + ' ' + EntityRec.Name;

            EntityDetails."FATCA Classification" := EntityRec."FATCA Classification";
            EntityDetails."CRS Classification" := EntityRec."CRS Classification";



            EntityDetails."Tax Code" := TaxDetails."Tax Code";
            EntityDetails."Tax Return Country Code" := TaxDetails."Tax Return Country Code";
            EntityDetails."TIN Type" := TaxDetails."TIN Type";
            EntityDetails.TIN := TaxDetails.TIN;
            EntityDetails."Tax Category" := TaxDetails."Tax Category";
           // EntityDetails."Entry No." := i;
            EntityDetails.INSERT;
            i += 1;

          UNTIL TaxDetails.NEXT = 0;

        END ELSE BEGIN
            EntityDetails."Entity No." := EntityRec."Entity No.";
            EntityDetails."Entry No." := i;
            EntityDetails.Name := EntityRec.Name;
            EntityDetails."Name 2" := EntityRec."Name 2";
            EntityDetails."Personal/Corporate":= EntityRec."Personal/Corporate";
            EntityDetails.Jurisdiction:= EntityRec.Jurisdiction;
            EntityDetails.Residence := EntityRec.Residence;
            EntityDetails."Passport number" := EntityRec."Passport number";
            EntityDetails."Passport country of issue" := EntityRec."Passport country of issue";
            EntityDetails."Passport/ID Issue Date" := EntityRec."Passport/ID Issue Date";
            EntityDetails."Passport expiry date" := EntityRec."Passport expiry date";
            EntityDetails."Passport/ID Number (2)" := EntityRec."Passport/ID Number (2)";
            EntityDetails."Passport/ID Country (2)" := EntityRec."Passport/ID Country (2)";
            EntityDetails."Passport/ID Issue Date (2)" := EntityRec."Passport/ID Issue Date (2)";
            EntityDetails."Passport/ID Expiry Date (2)" := EntityRec."Passport/ID Expiry Date (2)";
            EntityDetails.WSID := EntityRec."Name 2" + ' ' + EntityRec.Name;

            EntityDetails."FATCA Classification" := EntityRec."FATCA Classification";
            EntityDetails."CRS Classification" := EntityRec."CRS Classification";

          EntityDetails.INSERT;
        END;
        //EntityDetails.INSERT;
      END;
    END;

    [EventSubscriber(Table,9068500,OnAfterInsertEvent)]
    PROCEDURE SubscriberCreateClient@1000000014(VAR Rec@1000000000 : Record 9068500;RunTrigger@1000000001 : Boolean);
    BEGIN
      CLEAR(WSIDClient);
      WSIDClient := Rec.Name;
      IMANAGEClientCreation(WSIDClient);
    END;

    [External]
    PROCEDURE IMANAGEClientCreation@1000000016(VAR WSID@1000000000 : Text[100]);
    BEGIN
    END;

    [EventSubscriber(Table,9068505,OnAfterInsertEvent)]
    PROCEDURE SubscriberCreateEntity@1000000017(VAR Rec@1000000000 : Record 9068505;RunTrigger@1000000001 : Boolean);
    BEGIN
      CLEAR(WSIDEntity);
      WSIDEntity := Rec."Name 2" + ' ' + Rec.Name;
      IMANAGEEntityCreation(WSIDEntity);
    END;

    [External]
    PROCEDURE IMANAGEEntityCreation@1000000018(VAR WSID@1000000000 : Text[100]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50101 Accuro_Fns_VEGA_EntityName_Par
{
  OBJECT-PROPERTIES
  {
    Date=20-07-22;
    Time=18:10:00;
    Modified=Yes;
    Version List=NOM;
  }
  PROPERTIES
  {
    Subtype=Normal;
    OnRun=VAR
            RecDFXVEGA@100000001 : Record 50020;
            APILog@100000000 : Record 50019;
            Entity@100000002 : Record 9068505;
            LOGFunction@100000003 : 'Insert,Delete,Modify,Rename';
          BEGIN
            //CompileDirectorTrust;
            //MESSAGE('Success');
            APILog.RESET;
            APILog.SETRANGE(API,'Name Change');
            APILog.SETRANGE(Flag,FALSE);
            APILog.SETRANGE("Function",LOGFunction::Insert);
            IF APILog.FINDFIRST THEN
            REPEAT
            NameChangeAPICall(APILog."Record Type",APILog."Record No.",APILog.Name,APILog.OldName,APILog.NewName);
            UNTIL APILog.NEXT = 0;


            APILog.RESET;
            APILog.SETRANGE(API,'Partition');
            APILog.SETRANGE(Flag,FALSE);
            APILog.SETRANGE("Function",LOGFunction::Modify);
            IF APILog.FINDFIRST THEN
            REPEAT
            PartitionCodeAPICall(APILog."Record Type",APILog."Record No.",APILog.Name,APILog.OldPartitionCode,APILog.NewPartitionCode,APILog.OldPartitionGroup,APILog.NewPartitionGroup,APILog."Function");
            UNTIL APILog.NEXT = 0;
            //END;

            {
            IF RecDFXVEGA.FINDFIRST THEN
              REPEAT
               // IF RecDFXVEGA.Status = RecDFXVEGA.Status::UnProcessed THEN BEGIN
                 // VegaPassportExpiryCreateCase(RecDFXVEGA."Entry No.",RecDFXVEGA."Entity No.");
                //END
                //ELSE
                IF (RecDFXVEGA.Status = RecDFXVEGA.Status::InProcess) OR (RecDFXVEGA.Status = RecDFXVEGA.Status::InReview) THEN BEGIN
                  VegaPassportExpiryGetStatus(RecDFXVEGA."Entry No.");
              END
            UNTIL RecDFXVEGA.NEXT = 0;
            }
          END;

  }
  CODE
  {
    VAR
      text1@100000000 : Text[2048];
      Base64@100000001 : Text;

    PROCEDURE CompileDirectorTrust@100000000();
    VAR
      ClientRec@100000005 : Record 9068500;
      ClientRec2@100000007 : Record 9068500;
      EntityRec@100000006 : Record 9068505;
      ClientEntity@100000004 : Record 9068508;
      ClientSetup@100000003 : Record 9068496;
      ClientTypeRec@100000002 : Record 9068501;
      NoticeOfMeeting@100000001 : Record 50003;
      SubClientEntity@100000000 : Record 9068508;
      BusinessGroupRole@100000008 : Record 9068252;
      Resource@100000009 : Record 156;
    BEGIN
      ClientSetup.GET;

      NoticeOfMeeting.DELETEALL;

      IF ClientRec.FINDSET THEN REPEAT
        ClientRec.CALCFIELDS("Client Type Type");
        IF ClientRec."Client Type Type" IN [ClientRec."Client Type Type"::Company,ClientRec."Client Type Type"::Trust] THEN BEGIN
          ClientEntity.SETRANGE("Client No.",ClientRec."Client No.");
          ClientEntity.SETFILTER("Entity Type",'%1|%2',ClientSetup."Director Code",ClientSetup."Trustee Code");
          IF ClientEntity.FINDSET THEN REPEAT
            NoticeOfMeeting.INIT;
            NoticeOfMeeting."Master Client No." := ClientRec."Client No.";
            NoticeOfMeeting."Master Client Name" := ClientRec."Client Formal Name";
            IF ClientRec."Client Type Type" = ClientRec."Client Type Type"::Company THEN //DFX-01 Start
              NoticeOfMeeting."Client Type" :=  'Company';
            IF ClientRec."Client Type Type" = ClientRec."Client Type Type"::Trust THEN
              NoticeOfMeeting."Client Type" :=  'Trust';
            NoticeOfMeeting."First Partition Code" := ClientRec."First Partition Code";//DFX-01 End
            NoticeOfMeeting."Director Quorum" := ClientRec."Directors' Quorum";
            NoticeOfMeeting."Purpose-Activity Code" := ClientRec."Purpose-Activity Code"; // In House
            NoticeOfMeeting."Purpose/Objective" := ClientRec."Purpose/Objective"; // In House
            CASE ClientEntity.Type OF
              ClientEntity.Type::Client : BEGIN
                NoticeOfMeeting.Type := NoticeOfMeeting.Type::Client;
                NoticeOfMeeting."Corporate Director/Trustee" := ClientEntity."Entity No.";
                NoticeOfMeeting."Corp Director/Trustee Name" := ClientEntity.GetFormalName;
              END;
              ClientEntity.Type::Entity : BEGIN
                IF EntityRec.GET(ClientEntity."Entity No.") THEN BEGIN
                  IF EntityRec."Personal/Corporate" = EntityRec."Personal/Corporate"::Personal THEN BEGIN
                    NoticeOfMeeting.Type := NoticeOfMeeting.Type::"Personal Entity";
                    NoticeOfMeeting."Individual Director/Trustee" := ClientEntity."Entity No.";
                    NoticeOfMeeting."Indv Director/Trust Name" := ClientEntity.GetFormalName;
                  END ELSE BEGIN
                    NoticeOfMeeting.Type := NoticeOfMeeting.Type::"Corporate Entity";
                    NoticeOfMeeting."Corporate Director/Trustee" := ClientEntity."Entity No.";
                    NoticeOfMeeting."Corp Director/Trustee Name" := ClientEntity.GetFormalName;
                  END;
                END;
              END;

              ClientEntity.Type::Resource : BEGIN //DFX-01 Begin
                IF Resource.GET(ClientEntity."Entity No.") THEN BEGIN
                  NoticeOfMeeting.Type := NoticeOfMeeting.Type::Resource;
                    NoticeOfMeeting."Individual Director/Trustee" := ClientEntity."Entity No.";
                    NoticeOfMeeting."Indv Director/Trust Name" := ClientEntity.GetFormalName;
                  END;
              END; //DFX-01 End

            END;

            BusinessGroupRole.RESET;//DFX-01 Start
            BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"First Partition");
            BusinessGroupRole.SETRANGE("Table Name",'Client');
            BusinessGroupRole.SETRANGE(Role,ClientRec."First Partition Code");
            IF BusinessGroupRole.FINDSET THEN
              NoticeOfMeeting."Partition Group" := BusinessGroupRole."Business Group Code";//DFX-01 End

            NoticeOfMeeting."Fiduciary Director/Trustee" := NoticeOfMeeting."Corporate Director/Trustee";
            NoticeOfMeeting."Fid Director/Trustee Name" := NoticeOfMeeting."Corp Director/Trustee Name";

            IF NoticeOfMeeting.Type = NoticeOfMeeting.Type::Client THEN BEGIN
              NoticeOfMeeting."Director/Trustee" := '';
              NoticeOfMeeting."Director/Trustee name" := '';
            END;

            IF NoticeOfMeeting."Director/Trustee name" = '' THEN
              NoticeOfMeeting."Director/Trustee" := '';

            IF NoticeOfMeeting.INSERT THEN;

            IF ClientEntity.Type = ClientEntity.Type::Client THEN BEGIN
              SubClientEntity.RESET;
              SubClientEntity.SETRANGE("Client No.",ClientEntity."Entity No.");
              SubClientEntity.SETFILTER("Entity Type",'%1|%2',ClientSetup."Director Code",ClientSetup."Trustee Code");
              IF SubClientEntity.FINDSET THEN REPEAT
                CLEAR(NoticeOfMeeting);
                NoticeOfMeeting.INIT;
                NoticeOfMeeting."Master Client No." := ClientRec."Client No.";
                NoticeOfMeeting."Master Client Name" := ClientRec."Client Formal Name";
                IF ClientRec."Client Type Type" = ClientRec."Client Type Type"::Company THEN //DFX-01 Start
                  NoticeOfMeeting."Client Type" :=  'Company';
                IF ClientRec."Client Type Type" = ClientRec."Client Type Type"::Trust THEN
                  NoticeOfMeeting."Client Type" :=  'Trust';
                NoticeOfMeeting."First Partition Code" := ClientRec."First Partition Code";//DFX-01 End
                NoticeOfMeeting."Director Quorum" := ClientRec."Directors' Quorum";
                NoticeOfMeeting."Purpose-Activity Code" := ClientRec."Purpose-Activity Code"; // In House
                NoticeOfMeeting."Purpose/Objective" := ClientRec."Purpose/Objective"; // In House

                ClientRec2.GET(SubClientEntity."Client No.");
                NoticeOfMeeting."Corporate Director/Trustee" := SubClientEntity."Client No.";
                NoticeOfMeeting."Corp Director/Trustee Name" := ClientRec2."Client Formal Name";
                IF ClientRec."Client Type Type" = ClientRec2."Client Type Type"::Company THEN //DFX-01 Start
                  NoticeOfMeeting."Client Type" :=  'Company';
                IF ClientRec."Client Type Type" = ClientRec2."Client Type Type"::Trust THEN
                  NoticeOfMeeting."Client Type" :=  'Trust';
                NoticeOfMeeting."First Partition Code" := ClientRec2."First Partition Code";//DFX-01 End
                NoticeOfMeeting."Purpose-Activity Code" := ClientRec2."Purpose-Activity Code"; // In House
                NoticeOfMeeting."Purpose/Objective" := ClientRec2."Purpose/Objective"; // In House
                NoticeOfMeeting."Director/Trustee" := SubClientEntity."Entity No.";
                NoticeOfMeeting."Director/Trustee name" := SubClientEntity.GetFormalName;

                CASE SubClientEntity.Type OF
                  SubClientEntity.Type::Client : NoticeOfMeeting.Type := NoticeOfMeeting.Type::Client;
                  SubClientEntity.Type::Resource : NoticeOfMeeting.Type := NoticeOfMeeting.Type::Resource;
                  SubClientEntity.Type::Entity : BEGIN
                    IF EntityRec.GET(SubClientEntity."Entity No.") THEN BEGIN
                      IF EntityRec."Personal/Corporate" = EntityRec."Personal/Corporate"::Personal THEN
                        NoticeOfMeeting.Type := NoticeOfMeeting.Type::"Personal Entity"
                      ELSE
                        NoticeOfMeeting.Type := NoticeOfMeeting.Type::"Corporate Entity";
                    END;
                  END;
                END;
                NoticeOfMeeting."Director Quorum" := ClientRec2."Directors' Quorum";
                NoticeOfMeeting."Purpose-Activity Code" := ClientRec."Purpose-Activity Code"; // In House
                NoticeOfMeeting."Purpose/Objective" := ClientRec."Purpose/Objective"; // In House
                BusinessGroupRole.RESET;//DFX-01 Start
                BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"First Partition");
                BusinessGroupRole.SETRANGE("Table Name",'Client');
                BusinessGroupRole.SETRANGE(Role,ClientRec2."First Partition Code");
                IF BusinessGroupRole.FINDSET THEN
                    NoticeOfMeeting."Partition Group" := BusinessGroupRole."Business Group Code";//DFX-01 End
                NoticeOfMeeting."Fiduciary Director/Trustee" := NoticeOfMeeting."Corporate Director/Trustee";
                NoticeOfMeeting."Fid Director/Trustee Name" := NoticeOfMeeting."Corp Director/Trustee Name";

                IF NoticeOfMeeting.Type = NoticeOfMeeting.Type::Client THEN BEGIN
                  NoticeOfMeeting."Director/Trustee" := '';
                  NoticeOfMeeting."Director/Trustee name" := '';
                END;
                IF NoticeOfMeeting."Director/Trustee name" = '' THEN
                  NoticeOfMeeting."Director/Trustee" := '';

                IF NoticeOfMeeting.INSERT THEN;
              UNTIL SubClientEntity.NEXT = 0;
            END;
          UNTIL ClientEntity.NEXT = 0;

        END;
      UNTIL ClientRec.NEXT = 0;
    END;

    [EventSubscriber(Page,9072492,OnModifyRecordEvent)]
    LOCAL PROCEDURE ClientPartitionSubModify@100000005(VAR Rec@100000000 : Record 9068500;VAR xRec@100000001 : Record 9068500;VAR AllowModify@100000002 : Boolean);
    VAR
      AllObj@100000012 : Record 2000000038;
      Client@100000011 : Record 9068500;
      Entity@100000010 : Record 9068505;
      Name@100000009 : Text;
      Function@100000008 : 'Insert,Delete,Modify';
      AdditionalDataPartitionCode@100000007 : Record 9072482;
      AddtionalCodes@100000006 : Text;
      LastStringPos@100000005 : Integer;
      PartitionCodes@100000004 : Text;
      oldPartitionCodes@100000003 : Text;
      oldAddtionalCodes@100000013 : Text;
      LastStringPos1@100000014 : Integer;
      BusinessGroupRole@100000015 : Record 9068252;
      AddtionalGroup@100000021 : Text;
      LastStringPos2@100000020 : Integer;
      PartitionGroup@100000019 : Text;
      oldPartitionGroup@100000018 : Text;
      oldAddtionalGroup@100000017 : Text;
      LastStringPos4@100000016 : Integer;
      BusinessGroupRole1@100000022 : Record 9068252;
    BEGIN
      IF xRec."First Partition Code" <> Rec."First Partition Code" THEN BEGIN
        AllObj.RESET;
        AllObj.SETRANGE("Object Type",AllObj."Object Type"::Table);
        AllObj.SETRANGE("Object Name",Rec.TABLENAME);
        IF AllObj.FINDFIRST THEN;
          oldAddtionalCodes := xRec."First Partition Code" + ',';
              AddtionalCodes := Rec."First Partition Code" + ',';
        AdditionalDataPartitionCode.RESET;
        AdditionalDataPartitionCode.SETRANGE("Main Code",FALSE);
        AdditionalDataPartitionCode.SETRANGE("Table No.",AllObj."Object ID");
        AdditionalDataPartitionCode.SETRANGE("PK Value",Rec."Client No.");
          IF AdditionalDataPartitionCode.FINDSET THEN BEGIN
              REPEAT
                oldAddtionalCodes += AdditionalDataPartitionCode."Additional Code" + ',';
                AddtionalCodes += AdditionalDataPartitionCode."Additional Code" + ',';
              UNTIL AdditionalDataPartitionCode.NEXT = 0;
        END;
        LastStringPos1 := STRLEN(oldAddtionalCodes) - 1;
        oldPartitionCodes := COPYSTR(oldAddtionalCodes,1,LastStringPos1);
        LastStringPos := STRLEN(AddtionalCodes) - 1;
        PartitionCodes := COPYSTR(AddtionalCodes,1,LastStringPos);



      BusinessGroupRole.RESET;
      BusinessGroupRole.SETFILTER("Table No.",'<>%1',0);
      BusinessGroupRole.SETRANGE(Role,xRec."First Partition Code");
      BusinessGroupRole.SETRANGE("Table Name",'Client');
      BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"First Partition");
      IF BusinessGroupRole.FINDSET THEN REPEAT
        oldAddtionalGroup += BusinessGroupRole."Business Group Code" + ',';
      UNTIL BusinessGroupRole.NEXT = 0;
      IF STRLEN(oldAddtionalGroup)>0 THEN BEGIN
        LastStringPos2 := STRLEN(oldAddtionalGroup) - 1;
        oldPartitionGroup := COPYSTR(oldAddtionalGroup,1,LastStringPos2);
      END;

      BusinessGroupRole1.RESET;
      BusinessGroupRole1.SETFILTER("Table No.",'<>%1',0);
      BusinessGroupRole1.SETRANGE(Role,Rec."First Partition Code");
      BusinessGroupRole1.SETRANGE("Table Name",'Client');
      BusinessGroupRole1.SETRANGE("Business Group Type",BusinessGroupRole1."Business Group Type"::"First Partition");
      IF BusinessGroupRole1.FINDSET THEN REPEAT
        AddtionalGroup += BusinessGroupRole1."Business Group Code" + ',';
      UNTIL BusinessGroupRole1.NEXT = 0;
      IF STRLEN(AddtionalGroup) > 0  THEN BEGIN
        LastStringPos4 := STRLEN(AddtionalGroup) - 1;
        PartitionGroup := COPYSTR(AddtionalGroup,1,LastStringPos4);
      END;


      APILogPartitionCodeEntry('Client',Rec."Client No.",Rec."Client Formal Name",oldPartitionCodes,PartitionCodes,oldPartitionGroup,PartitionGroup,"Function"::Modify);
      //PartitionCodeAPICall('Client',Rec."Client No.",Rec."Client Formal Name",oldPartitionCodes,PartitionCodes,"Function"::Modify);
      END;
    END;

    [EventSubscriber(Page,9072493,OnModifyRecordEvent)]
    LOCAL PROCEDURE EntityPartitionSubModify@100000009(VAR Rec@100000000 : Record 9068505;VAR xRec@100000001 : Record 9068505;VAR AllowModify@100000002 : Boolean);
    VAR
      AllObj@100000014 : Record 2000000038;
      Client@100000013 : Record 9068500;
      Entity@100000012 : Record 9068505;
      Name@100000011 : Text;
      Function@100000010 : 'Insert,Delete,Modify';
      AdditionalDataPartitionCode@100000009 : Record 9072482;
      AddtionalCodes@100000008 : Text;
      LastStringPos@100000007 : Integer;
      PartitionCodes@100000006 : Text;
      oldPartitionCodes@100000005 : Text;
      oldAddtionalCodes@100000004 : Text;
      LastStringPos1@100000003 : Integer;
      BusinessGroupRole@100000022 : Record 9068252;
      AddtionalGroup@100000021 : Text;
      LastStringPos2@100000020 : Integer;
      PartitionGroup@100000019 : Text;
      oldPartitionGroup@100000018 : Text;
      oldAddtionalGroup@100000017 : Text;
      LastStringPos4@100000016 : Integer;
      BusinessGroupRole1@100000015 : Record 9068252;
    BEGIN
      IF xRec."First Partition Code" <> Rec."First Partition Code" THEN BEGIN
      AllObj.RESET;
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::Table);
      AllObj.SETRANGE("Object Name",Rec.TABLENAME);
      IF AllObj.FINDFIRST THEN;
      oldAddtionalCodes := xRec."First Partition Code" + ',';
      AddtionalCodes := Rec."First Partition Code" + ',';
      AdditionalDataPartitionCode.RESET;
      AdditionalDataPartitionCode.SETRANGE("Main Code",FALSE);
      AdditionalDataPartitionCode.SETRANGE("Table No.",AllObj."Object ID");
      AdditionalDataPartitionCode.SETRANGE("PK Value",Rec."Entity No.");
        IF AdditionalDataPartitionCode.FINDSET THEN BEGIN
            REPEAT
              oldAddtionalCodes += AdditionalDataPartitionCode."Additional Code" + ',';
              AddtionalCodes += AdditionalDataPartitionCode."Additional Code" + ',';
            UNTIL AdditionalDataPartitionCode.NEXT = 0;
      END;
      LastStringPos1 := STRLEN(oldAddtionalCodes) - 1;
      oldPartitionCodes := COPYSTR(oldAddtionalCodes,1,LastStringPos1);
      LastStringPos := STRLEN(AddtionalCodes) - 1;
      PartitionCodes := COPYSTR(AddtionalCodes,1,LastStringPos);

      BusinessGroupRole.RESET;
      BusinessGroupRole.SETFILTER("Table No.",'<>%1',0);
      BusinessGroupRole.SETRANGE(Role,xRec."First Partition Code");
      BusinessGroupRole.SETRANGE("Table Name",'Entity');
      BusinessGroupRole.SETRANGE("Business Group Type",BusinessGroupRole."Business Group Type"::"First Partition");
      IF BusinessGroupRole.FINDSET THEN REPEAT
      oldAddtionalGroup += BusinessGroupRole."Business Group Code" + ',';
      UNTIL BusinessGroupRole.NEXT = 0;
      IF STRLEN(oldAddtionalGroup)>0 THEN BEGIN
      LastStringPos2 := STRLEN(oldAddtionalGroup) - 1;
      oldPartitionGroup := COPYSTR(oldAddtionalGroup,1,LastStringPos2);
      END;

      BusinessGroupRole1.RESET;
      BusinessGroupRole1.SETFILTER("Table No.",'<>%1',0);
      BusinessGroupRole1.SETRANGE(Role,Rec."First Partition Code");
      BusinessGroupRole1.SETRANGE("Table Name",'Entity');
      BusinessGroupRole1.SETRANGE("Business Group Type",BusinessGroupRole1."Business Group Type"::"First Partition");
      IF BusinessGroupRole1.FINDSET THEN REPEAT
      AddtionalGroup += BusinessGroupRole1."Business Group Code" + ',';
      UNTIL BusinessGroupRole1.NEXT = 0;
      IF STRLEN(AddtionalGroup) > 0  THEN BEGIN
      LastStringPos4 := STRLEN(AddtionalGroup) - 1;
      PartitionGroup := COPYSTR(AddtionalGroup,1,LastStringPos4);
      END;


      Name := Rec."Name 2" + ' ' + Rec.Name ;

      APILogPartitionCodeEntry('Entity',Rec."Entity No.",Name,oldPartitionCodes,PartitionCodes,oldPartitionGroup,PartitionGroup,"Function"::Modify);
      END;
    END;

    LOCAL PROCEDURE PartitionCodeAPICall@100000003(AttachedToType@100000037 : Text;AttachedToNo@100000038 : Code[250];Name@100000039 : Text[250];OldPartitionCode@100000040 : Code[250];NewPartitionCode@100000041 : Code[250];OldPartitionGroup@100000044 : Text[250];NewPartitionGroup@100000045 : Text[250];Function@100000042 : 'Insert,Delete,Modify,Rename') : Boolean;
    VAR
      HttpWebReqMgt@100000036 : Codeunit 1297;
      BaseURL@100000035 : Text;
      User@100000034 : Text;
      Password@100000033 : Text;
      payload@100000032 : Text;
      ResponseBody@100000031 : Text;
      ErrorMessage@100000030 : Text;
      ErrorDetails@100000029 : Text;
      HttpStatusCode@100000028 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000027 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000026 : Text;
      ResponseJson@100000025 : Text;
      HttpError@100000024 : Text;
      JsonArray@100000023 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000022 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000021 : Record 99008535;
      OutStr@100000020 : OutStream;
      TempBlob1@100000019 : Record 99008535;
      InStr@100000018 : InStream;
      ApiResult@100000017 : Text;
      JSONMgt@100000016 : Codeunit 5459;
      ApiRequest@100000015 : Text;
      Base64Text@100000014 : Text;
      InStr1@100000013 : InStream;
      TextRead@100000012 : Text;
      OutStr1@100000011 : OutStream;
      TempBlob2@100000010 : Record 99008535;
      Instr2@100000009 : InStream;
      Bytes@100000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000005 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000004 : Record 50006;
      Window@100000003 : Dialog;
      NoOfRecs@100000002 : Integer;
      CurrRec@100000001 : Integer;
      TempPath@100000000 : Text;
      APILog@100000043 : Record 50019;
      m@100000054 : Integer;
      n@100000053 : Integer;
      l@100000052 : Integer;
      value@100000051 : Text;
      CurrentElement@100000050 : Text;
      CurrentValue@100000049 : Text;
      ValuePair@100000048 : Text;
      Status@100000047 : Text;
      FormatChar@100000046 : TextConst 'ENU={}"''[]';
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."Partition Code URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";

      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);


      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"AttachedToType": "'+ AttachedToType +'",');
      OutStr.WRITETEXT('"AttachedToNo": "'+ AttachedToNo +'",');
      OutStr.WRITETEXT('"PartyName": "' + Name + '",');
      OutStr.WRITETEXT('"OldParitionCode":"' + OldPartitionCode + '",');
      OutStr.WRITETEXT('"NewParitionCode": "'+ NewPartitionCode + '",');
      OutStr.WRITETEXT('"Function": "'+ FORMAT("Function") + '",');
      OutStr.WRITETEXT('"EventDateTime": "'+ FORMAT(CURRENTDATETIME,0,9) + '",');
      OutStr.WRITETEXT('"oldPartitionGroup": "'+ OldPartitionGroup+'",');
      OutStr.WRITETEXT('"newPartitionGroup": "'+ NewPartitionGroup+'"');
      OutStr.WRITETEXT('}');



      HttpWebReqMgt.AddBodyBlob(TempBlob);
      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);

      //NL.001 --start
      IF NOT JSONMgt.InitializeFromString(ApiResult) THEN
        EXIT(FALSE)
      ELSE BEGIN


      m := 0;
      n := 1;

      value := ApiResult;
      value := DELCHR(value,'=','{}');
      l := STRLEN(value);

      WHILE m < l DO BEGIN
        ValuePair := SELECTSTR(n,value);  // get comma separated pairs of values and element names

        m := STRPOS(value,ValuePair)+STRLEN(ValuePair); // move pointer to the end of the current pair in Value

        ValuePair := DELCHR(ValuePair,'=',FormatChar);

        CurrentElement := COPYSTR(ValuePair,1,STRPOS(ValuePair,':'));
        CurrentElement := DELCHR(CurrentElement,'=',':');

        CurrentValue := COPYSTR(ValuePair,STRPOS(ValuePair,':'));
        CurrentValue := DELCHR(CurrentValue,'=',':');

      CASE CurrentElement OF
              'status':
                // must be a new record or lookup the existing record
                BEGIN
                  Status := CurrentValue;
                  END;
              'message':
                BEGIN
                  ErrorMessage := CurrentValue;
                END;
      END;
      n := n +1;//for getting all the data
      END;
      COMMIT;
      IF Status = 'success' THEN BEGIN
        APILog.RESET;
        APILog.SETRANGE("Record Type",AttachedToType);
        APILog.SETRANGE("Record No.",AttachedToNo);
        APILog.SETRANGE(OldPartitionCode,OldPartitionCode);
        APILog.SETRANGE(NewPartitionCode,NewPartitionCode);
        APILog.SETRANGE(OldPartitionGroup,OldPartitionGroup);
        APILog.SETRANGE(NewPartitionGroup,NewPartitionGroup);
        APILog.SETRANGE("Function","Function");
        IF APILog.FINDSET THEN BEGIN
          APILog.Flag := TRUE;
          APILog.MODIFY;
        END;
        APILog.LogEntries('Partition API',BaseURL,FORMAT(AttachedToType),AttachedToNo,TRUE,'','','',OldPartitionCode,NewPartitionCode,OldPartitionGroup,NewPartitionGroup);
        EXIT(TRUE);
      END
      ELSE
      IF Status = 'InternalError' THEN BEGIN
        //MESSAGE(ErrorMessage);
        APILog.LogEntries('Partition API',BaseURL,FORMAT(AttachedToType),AttachedToNo,FALSE,ErrorMessage,'','',OldPartitionCode,NewPartitionCode,OldPartitionGroup,NewPartitionGroup);
        EXIT(FALSE);
      END
      ELSE
      IF Status = 'DuplicationError' THEN BEGIN
        APILog.LogEntries('Partition API',BaseURL,FORMAT(AttachedToType),AttachedToNo,FALSE,ErrorMessage,'','',OldPartitionCode,NewPartitionCode,OldPartitionGroup,NewPartitionGroup);
        EXIT(FALSE);
      END;
        //NL.001 --end

      END; //ELSE
        //ERROR(GETLASTERRORTEXT);

      Window.CLOSE;

      END;
    END;

    LOCAL PROCEDURE APILogPartitionCodeEntry@100000007(AttachedToType@100000005 : Text;AttachedToNo@100000004 : Code[100];Name@100000003 : Text[100];OldPartitionCode@100000002 : Code[250];NewPartitionCode@100000001 : Code[250];OldPartitionGroup@100000008 : Code[250];NewPartitionGroup@100000007 : Code[250];Function@100000000 : 'Insert,Delete,Modify,Rename');
    VAR
      APILog@100000006 : Record 50019;
    BEGIN
      APILog.RESET;
      APILog.SETRANGE(API,'Partition');
      APILog.SETRANGE("Record Type",AttachedToType);
      APILog.SETRANGE("Record No.",AttachedToNo);
      APILog.SETRANGE(OldPartitionCode,OldPartitionCode);
      APILog.SETRANGE(NewPartitionCode,NewPartitionCode);
      APILog.SETRANGE("Function","Function");
      IF NOT APILog.FINDFIRST THEN BEGIN
        APILog.INIT;
        APILog.API := 'Partition';
        APILog."Record Type" := AttachedToType;
        APILog."Record No." := AttachedToNo;
        APILog.Name := Name;
        APILog.OldPartitionCode := OldPartitionCode;
        APILog.NewPartitionCode := NewPartitionCode;
        APILog.OldPartitionGroup := OldPartitionGroup;
        APILog.NewPartitionGroup := NewPartitionGroup;
        APILog.Status := APILog.Status::Success;
        APILog."Function" := "Function";
        APILog.Flag := FALSE;
        APILog."Created Date" := CREATEDATETIME(TODAY,TIME);
        APILog.INSERT;
      END;
    END;

    PROCEDURE VegaPassportExpiryCreateCase@100000001(pExternalReferanceNo@100000000 : Code[50];PEntityNo@100000038 : Code[20]);
    VAR
      HttpWebReqMgt@100000037 : Codeunit 1297;
      BaseURL@100000036 : Text;
      User@100000035 : Text;
      Password@100000034 : Text;
      payload@100000033 : Text;
      ResponseBody@100000032 : Text;
      ErrorMessage@100000031 : Text;
      ErrorDetails@100000030 : Text;
      HttpStatusCode@100000029 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000028 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000027 : Text;
      ResponseJson@100000026 : Text;
      HttpError@100000025 : Text;
      JsonArray@100000024 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000023 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000022 : Record 99008535;
      OutStr@100000021 : OutStream;
      TempBlob1@100000020 : Record 99008535;
      InStr@100000019 : InStream;
      ApiResult@100000018 : Text;
      JSONMgt@100000017 : Codeunit 5459;
      ApiRequest@100000016 : Text;
      Base64Text@100000015 : Text;
      InStr1@100000014 : InStream;
      TextRead@100000013 : Text;
      OutStr1@100000012 : OutStream;
      TempBlob2@100000011 : Record 99008535;
      Instr2@100000010 : InStream;
      Bytes@100000009 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000006 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000005 : Record 50006;
      Window@100000004 : Dialog;
      NoOfRecs@100000003 : Integer;
      CurrRec@100000002 : Integer;
      TempPath@100000001 : Text;
      Entity@100000039 : Record 9068505;
      AddressRec@100000040 : Record 9068451;
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."VEGA CreateCase";
      User := DFXSetup."VEGA UserID";
      Password := DFXSetup."VEGA Password";

      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);




          Entity.RESET;
          IF Entity.GET(PEntityNo) THEN BEGIN

            AddressRec.RESET;
            AddressRec.SETRANGE(Type,AddressRec.Type::Entity);
            AddressRec.SETRANGE("No.",Entity."Entity No.");
            IF AddressRec.FINDFIRST THEN;
             IF AddressRec."E-Mail" = '' THEN BEGIN
               MESSAGE('Email is NULL! Can''t proceed further');
             END;

            HttpWebReqMgt.Initialize(BaseURL);
            HttpWebReqMgt.DisableUI;
            HttpWebReqMgt.SetMethod('POST');
            HttpWebReqMgt.SetContentType('application/json');
            HttpWebReqMgt.SetReturnType('application/json');
            HttpWebReqMgt.AddBasicAuthentication(User,Password);
            TempBlob.INIT;
            TempBlob.Blob.CREATEOUTSTREAM(OutStr);
            OutStr.WRITETEXT('{');
            OutStr.WRITETEXT('"externalObjectReference": "' + pExternalReferanceNo +'",');
            OutStr.WRITETEXT('"entityTitle": "'+ Entity.Title +'",');
            OutStr.WRITETEXT('"entityFirstName": "' + Entity."Name 2" + '",');
            OutStr.WRITETEXT('"entityMiddleName":"' + Entity.Name + '",');
            OutStr.WRITETEXT('"entitySurname": "'+ Entity.Initials + '",');
            OutStr.WRITETEXT('"entityTelephoneNo": "'+ AddressRec."Phone No." + '",');
            OutStr.WRITETEXT('"entityEmail": "'+ AddressRec."E-Mail" + '",');
            OutStr.WRITETEXT('"dateOfBirth": "'+ FORMAT(Entity."Date of Birth",0,9) + '"');
            OutStr.WRITETEXT('}');



            HttpWebReqMgt.AddBodyBlob(TempBlob);
            ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
           // MESSAGE(ApiRequest);

            TempBlob1.INIT;
            TempBlob1.Blob.CREATEINSTREAM(InStr);
            IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
              ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
              JSONMgt.InitializeFromString(ApiResult);
              //MESSAGE(ApiResult);
              ParsePassportCreateCase(ApiResult,pExternalReferanceNo);
            END ELSE BEGIN
             ERROR(GETLASTERRORTEXT);
            END;
          END;
      Window.CLOSE;
    END;

    PROCEDURE VegaPassportExpiryGetStatus@100000004(pExternalReferanceNo@100000000 : Code[50]);
    VAR
      HttpWebReqMgt@100000037 : Codeunit 1297;
      BaseURL@100000036 : Text;
      User@100000035 : Text;
      Password@100000034 : Text;
      payload@100000033 : Text;
      ResponseBody@100000032 : Text;
      ErrorMessage@100000031 : Text;
      ErrorDetails@100000030 : Text;
      HttpStatusCode@100000029 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000028 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000027 : Text;
      ResponseJson@100000026 : Text;
      HttpError@100000025 : Text;
      JsonArray@100000024 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000023 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000022 : Record 99008535;
      OutStr@100000021 : OutStream;
      TempBlob1@100000020 : Record 99008535;
      InStr@100000019 : InStream;
      ApiResult@100000018 : Text;
      JSONMgt@100000017 : Codeunit 5459;
      ApiRequest@100000016 : Text;
      Base64Text@100000015 : Text;
      InStr1@100000014 : InStream;
      TextRead@100000013 : Text;
      OutStr1@100000012 : OutStream;
      TempBlob2@100000011 : Record 99008535;
      Instr2@100000010 : InStream;
      Bytes@100000009 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000006 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000005 : Record 50006;
      Window@100000004 : Dialog;
      NoOfRecs@100000003 : Integer;
      CurrRec@100000002 : Integer;
      TempPath@100000001 : Text;
      Entity@100000039 : Record 9068505;
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."VEGA GETStatus";
      User := DFXSetup."VEGA UserID";
      Password := DFXSetup."VEGA Password";

      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);


            HttpWebReqMgt.Initialize(BaseURL);
            HttpWebReqMgt.DisableUI;
            HttpWebReqMgt.SetMethod('POST');
            HttpWebReqMgt.SetContentType('application/json');
            HttpWebReqMgt.SetReturnType('application/json');
            HttpWebReqMgt.AddBasicAuthentication(User,Password);
            TempBlob.INIT;
            TempBlob.Blob.CREATEOUTSTREAM(OutStr);
            OutStr.WRITETEXT('{');
            OutStr.WRITETEXT('"externalObjectReference": "' + pExternalReferanceNo +'"');
            OutStr.WRITETEXT('}');



            HttpWebReqMgt.AddBodyBlob(TempBlob);
            ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
           // MESSAGE(ApiRequest);
            TempBlob1.INIT;
            TempBlob1.Blob.CREATEINSTREAM(InStr);
            IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
              ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
              JSONMgt.InitializeFromString(ApiResult);
             // MESSAGE(ApiResult);

              ParsePassportGetStatus1(ApiResult,pExternalReferanceNo);
            END ELSE BEGIN
              ERROR(GETLASTERRORTEXT);
            END;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ParsePassportCreateCase@100000006(pJson@100000004 : Text;pExternalReferanceNo@100000005 : Code[50]);
    VAR
      VegaTemp@100000000 : TEMPORARY Record 50020;
      DFXVEGAInterface@100000001 : Record 50020;
      JSONMgt@100000003 : Codeunit 5459;
      RecordRef@100000002 : RecordRef;
      RecVega@100000006 : Record 50020;
    BEGIN
      IF NOT JSONMgt.InitializeFromString(pJson) THEN;
        //EXIT(FALSE);

      WITH VegaTemp DO BEGIN
        CLEAR(VegaTemp);
        RecordRef.GETTABLE(VegaTemp);
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'status',FIELDNO("API Status"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'errorMessage',FIELDNO("Error Message"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'objectReference',FIELDNO("Object Reference"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'caseStatus',FIELDNO("Case Status"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'percentageComplete',FIELDNO("Percentage Complete"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'data',FIELDNO(Data));
        RecordRef.SETTABLE(VegaTemp);
      END;
      IF VegaTemp."API Status" = 'Success' THEN BEGIN
        RecVega.RESET;
      IF RecVega.GET(pExternalReferanceNo) THEN BEGIN
        RecVega.Status := RecVega.Status::InProcess;
        RecVega.MODIFY;
      END
      END
      ELSE
      IF VegaTemp."API Status" = 'InternalError' THEN
        MESSAGE(VegaTemp."Error Message");
    END;

    LOCAL PROCEDURE ParsePassportGetStatus@100000014(pJson@100000004 : Text;pExternalReferanceNo@100000006 : Code[50]);
    VAR
      DFXVega@100000000 : Record 50020;
      DFXVEGAInterface@100000001 : Record 50020;
      JSONMgt@100000003 : Codeunit 5459;
      RecordRef@100000002 : RecordRef;
      DataJson@100000005 : Text[2048];
    BEGIN
      {IF NOT JSONMgt.InitializeFromString(pJson) THEN;
       // EXIT(FALSE);

      WITH DFXVega DO BEGIN
        CLEAR(DFXVega);
        DFXVega.RESET;
        DFXVega.SETRANGE("Entry No.",pExternalReferanceNo);
        DFXVega.FINDFIRST;
        RecordRef.GETTABLE(DFXVega);
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'status',FIELDNO("API Status"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'errorMessage',FIELDNO("Error Message"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'objectReference',FIELDNO("Case ID"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'caseStatus',FIELDNO("Case Status"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'percentageComplete',FIELDNO("Percentage Complete"));
        //JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'data',FIELDNO(Data));
        RecordRef.SETTABLE(DFXVega);
        DFXVega.MODIFY(TRUE);

      //IF VegaTemp."API Status" = 'Sucess' THEN
      //  EXIT(TRUE)
      //ELSE
      IF DFXVega."API Status" = 'InternalError' THEN
        ERROR(DFXVega."Error Message");

      IF DFXVega.Data = 'null' THEN BEGIN
        IF DFXVega."Percentage Complete" = 100 THEN
          Completedataentry(pJson,pExternalReferanceNo);
      END ELSE
        ERROR('Response Error');

      END;
      }
    END;

    LOCAL PROCEDURE Completedataentry@100000008(pValue@100000000 : Text;pExternalReferanceNo@100000015 : Code[50]);
    VAR
      p@100000002 : Integer;
      x@100000001 : Integer;
      CurrentObject@100000003 : Text;
      ValuePair@100000005 : Text;
      CurrentElement@100000007 : Text;
      CurrentValue@100000008 : Text;
      FormatChar@100000010 : TextConst 'ENU={}"''[]';
      JSONMgt@100000012 : Codeunit 5459;
      RecordRef@100000011 : RecordRef;
      DataJson@100000004 : Text;
      TempBlob@100000016 : Record 99008535;
      Outstr@100000017 : OutStream;
      Value@100000018 : Text;
      DFXDMSLite@100000019 : Codeunit 50004;
      Instr@100000020 : InStream;
      FileName@100000021 : Text;
      m@100000022 : Integer;
      n@100000023 : Integer;
      l@100000006 : Integer;
      DFXVEGA@100000009 : Record 50020;
      DFXVEGA1@100000013 : Record 50020;
    BEGIN
      p := STRLEN(pValue);//To get the data from customer details of passport
      x := STRPOS(pValue,':{');

      IF STRPOS(pValue,'[]')>0 THEN EXIT; // empty response, no need to parse


      CurrentObject := COPYSTR(pValue,x-1,p);
      CurrentObject := DELSTR(CurrentObject,1,2);
      CurrentElement := CONVERTSTR(CurrentObject,'}','*');
      CurrentElement := DELCHR(CurrentElement,'=','*');
      CurrentElement := INSSTR(CurrentElement,'}',p);//Contain the JSON of data only


      IF NOT JSONMgt.InitializeFromString(CurrentElement) THEN;
      //  EXIT(FALSE);

      WITH DFXVEGA DO BEGIN
        CLEAR(DFXVEGA);
        DFXVEGA.RESET;
        DFXVEGA.SETRANGE("Entry No.",pExternalReferanceNo);
        DFXVEGA.FINDFIRST;
        RecordRef.GETTABLE(DFXVEGA);
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_IssueDate',FIELDNO("New Passport Issue Date"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_DocumentNumber',FIELDNO("New Passport Number"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_ExpiryDate',FIELDNO("New Passport Expiry Date"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_NationalityCode',FIELDNO("New Passport Country of Issue"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'fileName',FIELDNO("File Name"));
        //JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'idVerification_IDScanDocument',FIELDNO(scan
        RecordRef.SETTABLE(DFXVEGA);
        DFXVEGA.Status := DFXVEGA.Status::Processed;
        DFXVEGA."Case ID" := DFXVEGA."Object Reference";
        IF DFXVEGA.MODIFY(TRUE) THEN BEGIN
          EntityMetadataModify(DFXVEGA);
          NAVLITE_Metadata_Insert(DFXVEGA);
        //MESSAGE('Case Successful')
        END;

      END;

      {
      m := 0;
      n := 1;

      Value := CurrentElement;
      Value := DELCHR(Value,'=','{}');
      l := STRLEN(Value);

      WHILE m < l DO BEGIN
        ValuePair := SELECTSTR(n,Value);  // get comma separated pairs of values and element names

        m := STRPOS(Value,ValuePair)+STRLEN(ValuePair); // move pointer to the end of the current pair in Value

        ValuePair := DELCHR(ValuePair,'=',FormatChar);

        CurrentElement := COPYSTR(ValuePair,1,STRPOS(ValuePair,':'));
        CurrentElement := DELCHR(CurrentElement,'=',':');

        CurrentValue := COPYSTR(ValuePair,STRPOS(ValuePair,':'));
        CurrentValue := DELCHR(CurrentValue,'=',':');

      CASE CurrentElement OF
              'idVerification_IDScanDocument':
                // must be a new record or lookup the existing record
                BEGIN
                  Base64 := CurrentValue;
                  END;
      END;
      n := n +1;//for getting all the data
      END;

      CLEAR(FileName);
      FileName := 'Passport - ' + DFXVEGA."Entity No." + ' - ' + FORMAT(TODAY);

      TempBlob.FromBase64String(Base64);
      IF DFXDMSLite.NAVLFDocumentFlowAPI(TempBlob,FileName) THEN
        NAVLITE_Metadata_Insert(DFXVEGA,FileName);
      }
    END;

    LOCAL PROCEDURE EntityMetadataModify@100000019(VAR Rec@100000000 : Record 50020);
    VAR
      Entity@100000003 : Record 9068505;
    BEGIN
      IF Rec.Status = Rec.Status::Processed THEN BEGIN
        IF Rec."New Passport Number" <> '' THEN BEGIN
          Entity.RESET;
          IF Entity.GET(Rec."Entity No.") THEN BEGIN
            IF Rec."First/Second" = Rec."First/Second"::First THEN BEGIN
              Entity."Passport number" := Rec."New Passport Number";
              Entity."Passport/ID Issue Date" := Rec."New Passport Issue Date";
              Entity."Passport expiry date" := Rec."New Passport Expiry Date";
              Entity."Passport country of issue" := Rec."New Passport Country of Issue";
              Entity.MODIFY;
            END
            ELSE IF Rec."First/Second" = Rec."First/Second"::Second THEN BEGIN
              Entity."Passport/ID Number (2)" := Rec."New Passport Number";
              Entity."Passport/ID Issue Date (2)" := Rec."New Passport Issue Date";
              Entity."Passport/ID Expiry Date (2)" := Rec."New Passport Expiry Date";
              Entity."Passport/ID Country (2)" := Rec."New Passport Country of Issue";
              Entity.MODIFY;
            END
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE NAVLITE_Metadata_Insert@100000002(pRecVEGA@100000000 : Record 50020);
    VAR
      Entity@100000001 : Record 9068505;
      NAVLITE@100000002 : Record 50004;
      DFXBulkDocumentLink@100000003 : Record 50015;
    BEGIN
      IF Entity.GET(pRecVEGA."Entity No.") THEN
        BEGIN
          NAVLITE.INIT;
          NAVLITE.Type := NAVLITE.Type::Entity;
          NAVLITE."No." := Entity."Entity No.";
          NAVLITE.Name := Entity."Name 2" + Entity.Name;
          NAVLITE."First Partition Code" := Entity."First Partition Code";
          NAVLITE."Second Partition Code" := Entity."Second Partition Code";
          NAVLITE.Jurisdiction := Entity.Jurisdiction;
          NAVLITE.NAVUserID := USERID;
          NAVLITE."Document Date" := pRecVEGA."Passport Expiry Date";
          NAVLITE.INSERT(TRUE);

          DFXBulkDocumentLink.INIT;
          DFXBulkDocumentLink.ID := NAVLITE.ID;
          DFXBulkDocumentLink.Type := DFXBulkDocumentLink.Type::Entity;
          DFXBulkDocumentLink."No." := Entity."Entity No.";
          DFXBulkDocumentLink.VALIDATE("Document Type",'R02');
          DFXBulkDocumentLink.VALIDATE("Document Sub Type",'P12');
          DFXBulkDocumentLink."File Name" := pRecVEGA."File Name";
          DFXBulkDocumentLink.INSERT(TRUE);
        END;
    END;

    LOCAL PROCEDURE ParsePassportGetStatus1@100000011(pJson@100000001 : Text;pExternalReferanceNo@100000000 : Code[50]);
    VAR
      VegaTemp@100000006 : Record 50020;
      DFXVEGAInterface@100000005 : Record 50020;
      JSONMgt@100000004 : Codeunit 5459;
      RecordRef@100000003 : RecordRef;
      DataJson@100000002 : Text[2048];
    BEGIN
      IF NOT JSONMgt.InitializeFromString(pJson) THEN;
       // EXIT(FALSE);

      WITH VegaTemp DO BEGIN
        CLEAR(VegaTemp);
        VegaTemp.RESET;
        VegaTemp.SETRANGE("Entry No.",pExternalReferanceNo);
        VegaTemp.FINDFIRST;
        RecordRef.GETTABLE(VegaTemp);
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'status',FIELDNO("API Status"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'errorMessage',FIELDNO("Error Message"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'objectReference',FIELDNO("Object Reference"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'caseStatus',FIELDNO("Case Status"));
        JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'percentageComplete',FIELDNO("Percentage Complete"));
       //JSONMgt.GetValueAndSetToRecFieldNo(RecordRef,'data',FIELDNO(Data));
        RecordRef.SETTABLE(VegaTemp);
        VegaTemp.MODIFY(TRUE);

      //IF VegaTemp."API Status" = 'Sucess' THEN
      //  EXIT(TRUE)
      //ELSE
      IF VegaTemp."API Status" = 'InternalError' THEN
        ERROR(VegaTemp."Error Message");

        IF VegaTemp."Percentage Complete" = 33 THEN
          InReviewUpdate(pExternalReferanceNo);

      //IF VegaTemp.Data <> 'null' THEN BEGIN
        IF VegaTemp."Percentage Complete" = 100 THEN
          Completedataentry(pJson,pExternalReferanceNo);
      //END ELSE
       // ERROR('Response data not received');

      END;
    END;

    LOCAL PROCEDURE InReviewUpdate@100000012(pExternalReferanceNo@100000001 : Code[50]);
    VAR
      vegaRec@100000000 : Record 50020;
    BEGIN
      vegaRec.RESET;
      vegaRec.SETRANGE("Entry No.",pExternalReferanceNo);
      IF vegaRec.FINDFIRST THEN BEGIN
        vegaRec.Status := vegaRec.Status::InReview;
        vegaRec.MODIFY;
      END;
    END;

    PROCEDURE RejectStatusUpdate@100000015(pExternalReferanceNo@100000001 : Code[50];PEntityNo@100000000 : Code[20];RejectMessage@100000002 : Text);
    VAR
      vegaRec@100000003 : Record 50020;
    BEGIN
      vegaRec.RESET;
      vegaRec.SETRANGE("Entry No.",pExternalReferanceNo);
      IF vegaRec.FINDFIRST THEN BEGIN
        vegaRec.Status := vegaRec.Status::Rejected;
        vegaRec."Status Message" := 'Rejected';
        vegaRec.MODIFY;
      END;
    END;

    [EventSubscriber(Table,9068505,OnAfterModifyFunction)]
    PROCEDURE EntityNameModify@100000010(VAR Sender@100000000 : Record 9068505;xRecEntity@100000001 : Record 9068505;Entity@100000002 : Record 9068505);
    VAR
      pOldName@100000003 : Text;
      pNewName@100000004 : Text;
    BEGIN
      {CLEAR(pOldName);
      CLEAR(pNewName);


      IF xRecEntity.Name <> Entity.Name THEN BEGIN
        pOldName := xRecEntity."Name 2" + ' ' + xRecEntity.Name;
        pNewName := Entity."Name 2" + ' ' + Entity.Name ;
      END;


      IF xRecEntity."Name 2" <> Entity."Name 2" THEN BEGIN
        pOldName := xRecEntity."Name 2" + ' ' + xRecEntity.Name;
        pNewName := Entity."Name 2" + ' ' + Entity.Name ;
      END;

      APILogNameChangeEntry('Entity',Entity."Entity No.",pNewName,pOldName,pNewName);
      }
    END;

    [EventSubscriber(Table,9068500,OnAfterModifyEvent)]
    PROCEDURE ClientNameModify@100000013(VAR Rec@100000000 : Record 9068500;VAR xRec@100000001 : Record 9068500;RunTrigger@100000002 : Boolean);
    BEGIN
      {IF xRec.Name <> Rec.Name THEN BEGIN
        APILogNameChangeEntry('Client',Rec."Client No.",Rec.Name,xRec.Name,Rec.Name);
      END;
      }
    END;

    LOCAL PROCEDURE APILogNameChangeEntry@100000016(AttachedToType@100000005 : Text;AttachedToNo@100000004 : Code[100];Name@100000003 : Text[100];OldName@100000002 : Code[250];NewName@100000001 : Code[250]);
    VAR
      APILog@100000006 : Record 50019;
    BEGIN
      APILog.RESET;
      APILog.SETRANGE(API,'Name Change');
      APILog.SETRANGE("Record Type",AttachedToType);
      APILog.SETRANGE("Record No.",AttachedToNo);
      APILog.SETRANGE(OldName,OldName);
      APILog.SETRANGE(NewName,NewName);
      IF NOT APILog.FINDFIRST THEN BEGIN
        APILog.INIT;
        APILog.API := 'Name Change';
        APILog."Record Type" := AttachedToType;
        APILog."Record No." := AttachedToNo;
        APILog.Name := NewName;
        APILog.OldName := OldName;
        APILog.NewName := NewName;
        APILog.Status := APILog.Status::Success;
        APILog.Flag := FALSE;
        APILog."Created Date" := CREATEDATETIME(TODAY,TIME);
        APILog.INSERT;
      END;
    END;

    LOCAL PROCEDURE NameChangeAPICall@100000022(AttachedToType@100000037 : Text;AttachedToNo@100000038 : Code[250];Name@100000039 : Text[250];OldName@100000040 : Code[250];NewName@100000041 : Code[250]) : Boolean;
    VAR
      HttpWebReqMgt@100000036 : Codeunit 1297;
      BaseURL@100000035 : Text;
      User@100000034 : Text;
      Password@100000033 : Text;
      payload@100000032 : Text;
      ResponseBody@100000031 : Text;
      ErrorMessage@100000030 : Text;
      ErrorDetails@100000029 : Text;
      HttpStatusCode@100000028 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000027 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000026 : Text;
      ResponseJson@100000025 : Text;
      HttpError@100000024 : Text;
      JsonArray@100000023 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000022 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000021 : Record 99008535;
      OutStr@100000020 : OutStream;
      TempBlob1@100000019 : Record 99008535;
      InStr@100000018 : InStream;
      ApiResult@100000017 : Text;
      JSONMgt@100000016 : Codeunit 5459;
      ApiRequest@100000015 : Text;
      Base64Text@100000014 : Text;
      InStr1@100000013 : InStream;
      TextRead@100000012 : Text;
      OutStr1@100000011 : OutStream;
      TempBlob2@100000010 : Record 99008535;
      Instr2@100000009 : InStream;
      Bytes@100000008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000005 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000004 : Record 50006;
      Window@100000003 : Dialog;
      NoOfRecs@100000002 : Integer;
      CurrRec@100000001 : Integer;
      TempPath@100000000 : Text;
      APILog@100000043 : Record 50019;
      m@100000054 : Integer;
      n@100000053 : Integer;
      l@100000052 : Integer;
      value@100000051 : Text;
      CurrentElement@100000050 : Text;
      CurrentValue@100000049 : Text;
      ValuePair@100000048 : Text;
      Status@100000047 : Text;
      FormatChar@100000046 : TextConst 'ENU={}"''[]';
    BEGIN
      DFXSetup.GET;
      BaseURL := DFXSetup."Name Change URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";

      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);


      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"attachedToType": "'+ AttachedToType +'",');
      OutStr.WRITETEXT('"attachedToNo": "'+ AttachedToNo +'",');
      OutStr.WRITETEXT('"partyName": "' + Name + '",');
      OutStr.WRITETEXT('"oldName":"' + OldName + '",');
      OutStr.WRITETEXT('"newName": "'+ NewName + '",');
      OutStr.WRITETEXT('"createdDate": "'+ FORMAT(CURRENTDATETIME,0,9) + '",');
      OutStr.WRITETEXT('"modifiedDate": "'+ FORMAT(CURRENTDATETIME,0,9) + '"');
      OutStr.WRITETEXT('}');



      HttpWebReqMgt.AddBodyBlob(TempBlob);
      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);

      //NL.001 --start
      IF NOT JSONMgt.InitializeFromString(ApiResult) THEN
        EXIT(FALSE)
      ELSE BEGIN


      m := 0;
      n := 1;

      value := ApiResult;
      value := DELCHR(value,'=','{}');
      l := STRLEN(value);

      WHILE m < l DO BEGIN
        ValuePair := SELECTSTR(n,value);  // get comma separated pairs of values and element names

        m := STRPOS(value,ValuePair)+STRLEN(ValuePair); // move pointer to the end of the current pair in Value

        ValuePair := DELCHR(ValuePair,'=',FormatChar);

        CurrentElement := COPYSTR(ValuePair,1,STRPOS(ValuePair,':'));
        CurrentElement := DELCHR(CurrentElement,'=',':');

        CurrentValue := COPYSTR(ValuePair,STRPOS(ValuePair,':'));
        CurrentValue := DELCHR(CurrentValue,'=',':');

      CASE CurrentElement OF
              'status':
                // must be a new record or lookup the existing record
                BEGIN
                  Status := CurrentValue;
                  END;
              'message':
                BEGIN
                  ErrorMessage := CurrentValue;
                END;
      END;
      n := n +1;//for getting all the data
      END;
      COMMIT;
      IF Status = 'Success' THEN BEGIN
        APILog.RESET;
        APILog.SETRANGE("Record Type",AttachedToType);
        APILog.SETRANGE("Record No.",AttachedToNo);
        APILog.SETRANGE(OldName,OldName);
        APILog.SETRANGE(NewName,NewName);
        IF APILog.FINDSET THEN BEGIN
          APILog.Flag := TRUE;
          APILog.MODIFY;
        END;
        APILog.LogEntries('Name Change API',BaseURL,FORMAT(AttachedToType),AttachedToNo,TRUE,'',OldName,NewName,'','','','');
        EXIT(TRUE);
      END
      ELSE
      IF Status = 'InternalError' THEN BEGIN
        //MESSAGE(ErrorMessage);
        APILog.LogEntries('Name Change API',BaseURL,FORMAT(AttachedToType),AttachedToNo,FALSE,ErrorMessage,OldName,NewName,'','','','');
        EXIT(FALSE);
      END
      ELSE
      IF Status = 'DataError' THEN BEGIN
        APILog.LogEntries('Name Change API',BaseURL,FORMAT(AttachedToType),AttachedToNo,FALSE,ErrorMessage,OldName,NewName,'','','','');
        EXIT(FALSE);
      END;
        //NL.001 --end

      END; //ELSE
        //ERROR(GETLASTERRORTEXT);

      Window.CLOSE;

      END;
    END;

    BEGIN
    {
      //DFX-01 CR Addtional Fields in NOM Table and field mapping
    }
    END.
  }
}

OBJECT Codeunit 50103 DFX DMSLite_Working
{
  OBJECT-PROPERTIES
  {
    Date=23-03-22;
    Time=19:45:19;
    Modified=Yes;
    Version List=DFX Suite-1;
  }
  PROPERTIES
  {
    OnRun=VAR
            FunctionType@1000000000 : ',CreateNew,Update,Delete';
            AttachedToType@1000000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
            handtest@1000000003 : TextConst 'ENU="{
                      ""Action"":{
          ""Function"": ""HANDSHAKE""},
                                     ""Records"":[{
                                     ""EntryNo"":""26"",
                                                 ""LFUID"":""29239""
                                                           }
                                                           ]
                                                           } "';
            Createtest@1000000002 : TextConst 'ENU={
                      "Action":{
          "Function": "CREATENEW"
          },
          "Records":[{
          "AttachedToType": "Client",
          "AttachedToNo": "CLI092",
          "LFEntryID": "12347656",
          "FileName": "abcd.txt",
          "DocDescription" : "test",
          "LFDocType" : "CLREP",
          "LFDocSubType" : "STATE",
          "LFUID" : "60000"
          }
          ]
          }';
            StrCon@1000000004 : Text;
            StrCheck@1000000005 : Text;
            Return@100000000 : Boolean;
          BEGIN
            //MESSAGE('Success');
            //LinkDocument(AttachedToType::Client,'CL00001',
            //HandShake(40797,'processed');
            //UpdateDocStroreFromExternal(AttachedToType::Client,'CLI0000001',4101018,'','Documents','','sampledoc','Accounting','Distribution Movements',FunctionType::Update,'LF',160821D,020221D,'Investment','INV00003')
            //UnlinkDocument(AttachedToType::Client,'CLI0000001',12121,'Asset','ASS003');
            //Return := HandShake(AttachedToType::Client,'CL00005','BOURNE LEISURE','CL00005 - Bourne Leisure - Account Opening',45450);
            //MESSAGE(FORMAT(Return));
            //ElasticSearch3;
            //ES;
            //LFAPI
            //SampleAPI1
            //LFAPI1('TEST','TEST.TXT');
            //ES1('Sample');
          END;

  }
  CODE
  {
    VAR
      DocMgmntCU@100000000 : Codeunit 9068511;
      HttpWebReq@100000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      GlobalProgressDialogEnabled@100000002 : Boolean;
      TraceLogEnabled@100000004 : Boolean;
      GlobalSkipCheckHttps@100000003 : Boolean;
      HttpWebRes@100000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      HttpWebReq1@100000006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      ProcessingWindowMsg@100000007 : TextConst 'ENU=Please wait while the server is processing your request.\This may take several minutes.;ENG=Please wait while the server is processing your request.\This may take several minutes.';

    [EventSubscriber(Table,50016,OnAfterInsertEvent)]
    PROCEDURE DFXCorresPondenceStoreOnInsert@100000024(VAR Rec@100000000 : Record 50016;RunTrigger@100000001 : Boolean);
    VAR
      CorrespondenceStore@100000002 : Record 9068660;
    BEGIN
      {IF RunTrigger THEN
        IF Rec."LaserFiche Entry ID" <> 0 THEN BEGIN
          IF Rec.Type = Rec.Type::Client THEN
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Client)
          ELSE IF Rec.Type = Rec.Type::Entity THEN
            CorrespondenceStore.SETRANGE(Type,CorrespondenceStore.Type::Entity);

          CorrespondenceStore.SETRANGE("No.",Rec."No.");
          IF NOT CorrespondenceStore.FINDFIRST THEN BEGIN
            CorrespondenceStore.Type := Rec.Type;
            CorrespondenceStore."No." := Rec."No.";
            CorrespondenceStore.ID := Rec.ID;
            CorrespondenceStore."External DMS Status" := Rec."External DMS Status";
            CorrespondenceStore."MS Office Doc Type" := Rec."MS Office Doc Type";
            CorrespondenceStore.Subject := Rec.Subject;
            CorrespondenceStore.Info1 := Rec.Info1;
            CorrespondenceStore.Info2 := Rec.Info2;
            CorrespondenceStore."Document GUID" := Rec."Document GUID";
            CorrespondenceStore.Name := Rec.Name;
            CorrespondenceStore."Last Date Modified" := Rec."Last Date Modified";
            CorrespondenceStore.Authorised := Rec.Authorised;
            CorrespondenceStore."Workflow No." := Rec."Workflow No.";
            CorrespondenceStore."Payment No." := Rec."Payment No.";
            CorrespondenceStore.FilePath := Rec.FilePath;
            CorrespondenceStore.FileName := Rec.FileName;
            CorrespondenceStore."Source of Document" := Rec."Source of Document";
            CorrespondenceStore."Document Inserted Date" := Rec."Document Inserted Date";
            CorrespondenceStore."Document Inserted By" := Rec."Document Inserted By";
            CorrespondenceStore."Last Accessed By" := Rec."Last Accessed By";
            CorrespondenceStore."Document in Paper Form" := Rec."Document in Paper Form";
            CorrespondenceStore."Additional Information" := Rec."Additional Information";
            CorrespondenceStore."Document Type" := Rec."Document Type";
            CorrespondenceStore."Document Type Text" := Rec."Document Type Text";
            CorrespondenceStore."Document Sub Type" := Rec."Document Sub Type";
            CorrespondenceStore."Document Sub Type Text" := Rec."Document Sub Type Text";
            CorrespondenceStore.Author := Rec.Author;
            CorrespondenceStore."F2-Restricted" := Rec."F2-Restricted";
            CorrespondenceStore."Document Date" := Rec."Document Date";
            CorrespondenceStore."Document Expiry Date" := Rec."Document Expiry Date";
            CorrespondenceStore."LaserFiche Entry ID" := Rec."LaserFiche Entry ID";
            CorrespondenceStore.Priority := Rec.Priority;

            CorrespondenceStore.INSERT;
         END ELSE BEGIN
            CorrespondenceStore."External DMS Status" := Rec."External DMS Status";
            CorrespondenceStore."MS Office Doc Type" := Rec."MS Office Doc Type";
            CorrespondenceStore.Subject := Rec.Subject;
            CorrespondenceStore.Info1 := Rec.Info1;
            CorrespondenceStore.Info2 := Rec.Info2;
            CorrespondenceStore."Document GUID" := Rec."Document GUID";
            CorrespondenceStore.Name := Rec.Name;
            CorrespondenceStore."Last Date Modified" := Rec."Last Date Modified";
            CorrespondenceStore.Authorised := Rec.Authorised;
            CorrespondenceStore."Workflow No." := Rec."Workflow No.";
            CorrespondenceStore."Payment No." := Rec."Payment No.";
            CorrespondenceStore.FilePath := Rec.FilePath;
            CorrespondenceStore.FileName := Rec.FileName;
            CorrespondenceStore."Source of Document" := Rec."Source of Document";
            CorrespondenceStore."Document Inserted Date" := Rec."Document Inserted Date";
            CorrespondenceStore."Document Inserted By" := Rec."Document Inserted By";
            CorrespondenceStore."Last Accessed By" := Rec."Last Accessed By";
            CorrespondenceStore."Document in Paper Form" := Rec."Document in Paper Form";
            CorrespondenceStore."Additional Information" := Rec."Additional Information";
            CorrespondenceStore."Document Type" := Rec."Document Type";
            CorrespondenceStore."Document Type Text" := Rec."Document Type Text";
            CorrespondenceStore."Document Sub Type" := Rec."Document Sub Type";
            CorrespondenceStore."Document Sub Type Text" := Rec."Document Sub Type Text";
            CorrespondenceStore.Author := Rec.Author;
            CorrespondenceStore."F2-Restricted" := Rec."F2-Restricted";
            CorrespondenceStore."Document Date" := Rec."Document Date";
            CorrespondenceStore."Document Expiry Date" := Rec."Document Expiry Date";
            CorrespondenceStore.Priority := Rec.Priority;

            CorrespondenceStore.MODIFY;
          END;
        END;

         }
    END;

    PROCEDURE LFAPI1@100000013(FileContent@100000026 : Text;FileName@100000034 : Text);
    VAR
      HttpWebReqMgt@100000014 : Codeunit 1297;
      BaseURL@100000013 : Text;
      User@100000012 : Text;
      Password@100000011 : Text;
      payload@100000010 : Text;
      ResponseBody@100000009 : Text;
      ErrorMessage@100000008 : Text;
      ErrorDetails@100000007 : Text;
      HttpStatusCode@100000006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000004 : Text;
      ResponseJson@100000003 : Text;
      HttpError@100000002 : Text;
      JsonArray@100000001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000015 : Record 99008535;
      OutStr@100000016 : OutStream;
      TempBlob1@100000017 : Record 99008535;
      InStr@100000018 : InStream;
      ApiResult@100000019 : Text;
      JSONMgt@100000020 : Codeunit 5459;
      ApiRequest@100000021 : Text;
      Base64Text@100000022 : Text;
      InStr1@100000023 : InStream;
      TextRead@100000024 : Text;
      OutStr1@100000027 : OutStream;
      TempBlob2@100000028 : Record 99008535;
      Instr2@100000029 : InStream;
      Bytes@100000030 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      convert@100000031 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@100000032 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@100000033 : DotNet "'mscorlib'.System.Text.Encoding";
      DFXSetup@100000025 : Record 50006;
      Window@100000036 : Dialog;
      NoOfRecs@100000035 : Integer;
      CurrRec@100000038 : Integer;
      TempPath@100000037 : Text;
    BEGIN
      //BaseURL := 'https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXwebapi/DMS/UploadFromDnDFile';
      //BaseURL := 'https://dfxdemo.datafabricx.com/DFXDMSLiteV2/dfxapi/DMS/UploadFromDnDFile';
      //User := 'svc-dfx-agent';
      //Password := 'InduData@2021';

      //BaseURL := 'https://winserv2012.datafabricx.com/DFXDMSLite/dfxapi/DMS/UploadFromDnDFile';

      //User := 'demouser';
      //Password := 'DFX@123';

      //User := 'datafabricx\renupriya';
      //Password := 'Welcome2dfx$';

      DFXSetup.GET;
      BaseURL := DFXSetup."LF API URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";

      {
      IF FileContent <> '' THEN BEGIN
      //Bytes := convert.ToBase64String(FileContent);
      MemoryStream := MemoryStream.MemoryStream(Bytes);
      TempBlob2.Blob.CREATEOUTSTREAM(OutStr1);
      MemoryStream.WriteTo(OutStr1);
      //OutStr1.
      Base64Text := TempBlob2.ReadAsText('',TEXTENCODING::UTF8);
      MESSAGE(Base64Text);
      END;
      }
      Base64Text := convert.ToBase64String(Encoding.UTF8.GetBytes(FileContent));
      //MESSAGE(Base64Text);

      Window.OPEN('Processing data... @1@@@@@@@@@@');
        NoOfRecs := DFXSetup.COUNT;
        REPEAT
          CurrRec += 1;
          IF NoOfRecs <= 100 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1)
          ELSE IF CurrRec MOD (NoOfRecs DIV 100) = 0 THEN
            Window.UPDATE(1,(CurrRec / NoOfRecs * 10000) DIV 1);


      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);
      //HttpWebReqMgt.CreateNTLMAuthHeader(User,Password);
      {
      HttpWebReq := HttpWebReq.Create(BaseURL);
      HttpWebReq.Method := 'POST';
      HttpWebReq.Accept := 'application/json';
      HttpWebReq.ContentType := 'application/json';
      HttpWebReq.Headers.Add('Authorization',CreateNTLMAuthHeader(User,Password));
      HttpWebReq.KeepAlive;
      HttpWebReq.PreAuthenticate := TRUE;
      HttpWebReq.UnsafeAuthenticatedConnectionSharing := TRUE;
      }

      //Base64Text := 'c2FtcGxl';

      // You can read from or write to streams by using the InStream and OutStream methods.The Temp Blob codeunit can be used to convert between the two stream types.
                              // The InStream data type can be used to read bytes from a stream object.The data is read in binary format, and you can use the Read and ReadText functions to read that format.
      //if (File.UploadIntoStream('Open File', '', 'All Files (*.*)|*.*',FileName, InStr)) then begin
      // If you use read then while written after read will not read anything because already everything in InStream variable is read -- vice versa
      //InStr.Read(TextRead);
      //Message(TextRead);

                                  // Start: Read Each Line one by one
                                  // while not InStr.EOS() do begin
                                  //     NumberOfBytesRead := InStr.ReadText(TextRead, 100);
                                  //     Message('%1\Size: %2', TextRead, NumberOfBytesRead);
                                  // end;
                                  // Stop: Read Each Line one by one
      //end;


      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"Repository": "'+ DFXSetup.Repository +'",');
      OutStr.WRITETEXT('"Files":');
      OutStr.WRITETEXT('[{');
      OutStr.WRITETEXT('"File": "' + FileName + '",');
      OutStr.WRITETEXT('"LocalFile": "0",');
      OutStr.WRITETEXT('"Filename": "",');
      OutStr.WRITETEXT('"SecCode": "",');
      OutStr.WRITETEXT('"Properties":[],');
      OutStr.WRITETEXT('"Tags": ["Systemtag"],');
      OutStr.WRITETEXT('"Data": "'+ Base64Text + '",');
      OutStr.WRITETEXT('"VolumeID": "1"');
      OutStr.WRITETEXT('}]');
      OutStr.WRITETEXT('}');



      HttpWebReqMgt.AddBodyBlob(TempBlob);
      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
      //MESSAGE(ApiRequest);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);
        //MESSAGE(FORMAT(ApiResult));
      END;
      //MESSAGE(FORMAT(HttpStatusCode));
      //MESSAGE(FORMAT(ResponseHeader));
      UNTIL DFXSetup.NEXT = 0;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ES1@100000021(SearchText@100000029 : Text);
    VAR
      HttpWebReqMgt@100000020 : Codeunit 1297;
      BaseURL@100000019 : Text;
      User@100000018 : Text;
      Password@100000017 : Text;
      payload@100000016 : Text;
      ResponseBody@100000015 : Text;
      ErrorMessage@100000014 : Text;
      ErrorDetails@100000013 : Text;
      HttpStatusCode@100000012 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000010 : Text;
      ResponseJson@100000009 : Text;
      HttpError@100000008 : Text;
      JsonArray@100000007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000005 : Record 99008535;
      OutStr@100000004 : OutStream;
      TempBlob1@100000003 : Record 99008535;
      InStr@100000002 : InStream;
      ApiResult@100000001 : Text;
      JSONMgt@100000000 : Codeunit 5459;
      ApiRequest@100000021 : Text;
      RequestStr@100000022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      BlobStr@100000023 : InStream;
      TempBlob2@100000024 : Record 99008535;
      ResStream@100000025 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      ResStreamReader@100000026 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      Response@100000027 : Text;
      DFXSetup@100000028 : Record 50006;
    BEGIN

      //BaseURL := 'https://dfxdemo.datafabricx.com/DFXDMSLiteV2/dfxapi/DMS/UploadFromDnDFile';
      //BaseURL := 'https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXApi/DMS/Documents/Query';
      //User := 'demouser';
      //Password := 'DFX@123';

      //BaseURL := 'https://winserv2012.datafabricx.com/DFXDMSLite/dfxapi/DMS/Documents/Query';
      //User := 'datafabricx\renupriya';
      //Password := 'Welcome2dfx$';

      DFXSetup.GET;
      BaseURL := DFXSetup."LF API URL";
      User := DFXSetup."API User ID";
      Password := DFXSetup."API Password";


      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);
      //HttpWebReqMgt.CreateNTLMAuthHeader(User,Password);
      //HttpWebReqMgt.AddBasicAuthentication(User,Password);
      {

      HttpWebReq := HttpWebReq.Create(BaseURL);
      HttpWebReq.Method := 'POST';
      HttpWebReq.Accept := 'application/json';
      HttpWebReq.ContentType := 'application/json';
      HttpWebReq.Headers.Add('Authorization',CreateNTLMAuthHeader(User,Password));
      HttpWebReq.KeepAlive;
      HttpWebReq.PreAuthenticate := TRUE;
      HttpWebReq.UnsafeAuthenticatedConnectionSharing := TRUE;
      }
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"Repository":"'+ DFXSetup.Repository +'",');
      OutStr.WRITETEXT('"Columns":');
      OutStr.WRITETEXT('[');
      OutStr.WRITETEXT('[');
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"SearchFieldType":0,');
      OutStr.WRITETEXT('"BaseField":"Text",');
      OutStr.WRITETEXT('"Value":"'+ SearchText +'",');
      OutStr.WRITETEXT('"Condition":0');
      OutStr.WRITETEXT('}');
      OutStr.WRITETEXT(']');
      OutStr.WRITETEXT('],');
      OutStr.WRITETEXT('"Page":1,');
      OutStr.WRITETEXT('"No":100,');
      OutStr.WRITETEXT('"ColumnSortType":1,');
      OutStr.WRITETEXT('"ColumnName":"Client Name",');
      OutStr.WRITETEXT('"ColumnSortOrder":0');
      OutStr.WRITETEXT('}');

      //MESSAGE(FORMAT(OutStr));

      HttpWebReqMgt.AddBodyBlob(TempBlob);

      //AddBodyBlob(TempBlob);



      ApiRequest:= TempBlob.ReadAsText('',TEXTENCODING::UTF8);
      MESSAGE(ApiRequest);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      //MESSAGE(FORMAT('hai'));
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText(ResponseBody,TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);
        MESSAGE(FORMAT(ApiResult));
      END;
      {
      HttpWebRes:=HttpWebRes.HttpWebResponse;
      HttpWebRes:=HttpWebReq.GetResponse();
      HttpStatusCode:=HttpWebRes.StatusCode();
      //CLEAR(Response);
      IF HttpStatusCode=200 THEN BEGIN
      ResStream:=HttpWebRes.GetResponseStream();
      ResStreamReader:=ResStreamReader.StreamReader(ResStream);
      Response:=ResStreamReader.ReadToEnd();
      END ELSE BEGIN
      ResStream:=HttpWebRes.GetResponseStream();
      ResStreamReader:=ResStreamReader.StreamReader(ResStream);
      Response:=HttpWebRes.StatusDescription;
      END;
      }
    END;

    LOCAL PROCEDURE SampleAPI1@100000027();
    VAR
      HttpWebReqMgt@100000014 : Codeunit 1297;
      BaseURL@100000013 : Text;
      User@100000012 : Text;
      Password@100000011 : Text;
      payload@100000010 : Text;
      ResponseBody@100000009 : Text;
      ErrorMessage@100000008 : Text;
      ErrorDetails@100000007 : Text;
      HttpStatusCode@100000006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000004 : Text;
      ResponseJson@100000003 : Text;
      HttpError@100000002 : Text;
      JsonArray@100000001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000015 : Record 99008535;
      OutStr@100000016 : OutStream;
      TempBlob1@100000017 : Record 99008535;
      InStr@100000018 : InStream;
      ApiResult@100000019 : Text;
      JSONMgt@100000020 : Codeunit 5459;
    BEGIN
      BaseURL := 'https://reqres.in/api/user';
      User := 'demouser';
      Password := 'DFX@123';

      HttpWebReqMgt.Initialize(BaseURL);
      HttpWebReqMgt.DisableUI;
      HttpWebReqMgt.SetMethod('POST');
      HttpWebReqMgt.SetContentType('application/json');
      HttpWebReqMgt.SetReturnType('application/json');
      HttpWebReqMgt.AddBasicAuthentication(User,Password);
      //HttpWebReqMgt.CreateNTLMAuthHeader(User,Password);
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT('{');
      OutStr.WRITETEXT('"name": "Renu",');
      OutStr.WRITETEXT('"job": "Software Engineer-001"');
      OutStr.WRITETEXT('}');

      //MESSAGE(FORMAT(OutStr));

      HttpWebReqMgt.AddBodyBlob(TempBlob);
      TempBlob1.INIT;
      TempBlob1.Blob.CREATEINSTREAM(InStr);
      IF HttpWebReqMgt.GetResponse(InStr,HttpStatusCode,ResponseHeader) THEN BEGIN
        ApiResult:= TempBlob1.ReadAsText('',TEXTENCODING::UTF8);
        JSONMgt.InitializeFromString(ApiResult);
        MESSAGE(FORMAT(HttpStatusCode));
      END;
      MESSAGE(FORMAT(ApiResult));
    END;

    LOCAL PROCEDURE LFAPIXML@100000016();
    VAR
      HttpWebReqMgt@100000020 : Codeunit 1297;
      BaseURL@100000019 : Text;
      User@100000018 : Text;
      Password@100000017 : Text;
      payload@100000016 : Text;
      ResponseBody@100000015 : Text;
      ErrorMessage@100000014 : Text;
      ErrorDetails@100000013 : Text;
      HttpStatusCode@100000012 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeader@100000011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000010 : Text;
      ResponseJson@100000009 : Text;
      HttpError@100000008 : Text;
      JsonArray@100000007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      TempBlob@100000005 : Record 99008535;
      OutStr@100000004 : OutStream;
      TempBlob1@100000003 : Record 99008535;
      InStr@100000002 : InStream;
      ApiResult@100000001 : Text;
      JSONMgt@100000000 : Codeunit 5459;
      XMLRequest@100000021 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLResponse@100000022 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      SuccessNode@100000023 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMMgt@100000024 : Codeunit 6224;
      SuccessNodeInnerText@100000025 : Text;
      Bytes@100000026 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.
    System.Array";
      FileStream@100000027 : Integer;
      FilePath2@100000028 : Text;
      FileMode@100000029 : Integer;
      convert@100000030 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Credential@100000031 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
    BEGIN
      BaseURL := 'https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXwebapi/DMS/UploadFromDnDFile';
      User := 'demouser';
      Password := 'DFX@123';

      XMLRequest := XMLRequest.XmlDocument;
      XMLResponse := XMLResponse.XmlDocument;
      CreateReq(XMLRequest);

      IF CallWebAPIReq(XMLRequest,XMLResponse,BaseURL,'Soap') THEN BEGIN
        XMLResponse.Save('C:\DataFabricx');
        SuccessNode := XMLResponse.FirstChild;
        SuccessNodeInnerText := SuccessNode.InnerText;
        IF SuccessNodeInnerText <> ''  THEN BEGIN
          FilePath2 := 'C:\DataFabricx';
          Bytes := convert.FromBase64String(SuccessNodeInnerText);
          //FileStream := FileStream.FileStream(FilePath2,FileMode.Create);
          //FileStream.write(Bytes,0,Bytes.Length);
          //FileStream.Close();
        END;
      END;
    END;

    LOCAL PROCEDURE CreateReq@100000022(XMLRequest@100000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XMLResponse@100000010 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      SuccessNode@100000009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMMgt@100000008 : Codeunit 6224;
      SuccessNodeInnerText@100000007 : Text;
      Bytes@100000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.
    System.Array";
      FileStream@100000005 : Integer;
      FilePath2@100000004 : Text;
      FileMode@100000003 : Integer;
      convert@100000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Credentials@100000001 : Integer;
      RootNode@100000011 : Text;
    BEGIN
      //RootNode := XMLRequest.CreateNode('element','Envelope','');
      //XMLDOMMgt.AddAttribute(RootNode,'Xmlns',Xmlns);
        //XMLDOMMgt.AddElement(RootNode,'Body','','',BodyNode);
      //XMLRequest.AppendChild(RootNode);
    END;

    LOCAL PROCEDURE CallWebAPIReq@100000023(XMLRequest@100000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XMLResponse@100000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";BaseUrl@100000002 : Text;SOAPAction@100000003 : Text) : Boolean;
    VAR
      Credential@100000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      User@100000006 : Text;
      Password@100000004 : Text;
    BEGIN

      HttpWebReq := HttpWebReq.Create(BaseUrl);
      HttpWebReq.UseDefaultCredentials := FALSE;
      Credential := Credential.NetworkCredential(User,Password);

      HttpWebReq.Credentials := Credential;
      HttpWebReq.Method := 'POST';
      HttpWebReq.ContentType := 'application/json' + ';charset="utf-8"';
      HttpWebReq.PreAuthenticate := TRUE;
      HttpWebReq.Headers.Add(SOAPAction,SOAPAction);
      XMLRequest.Save(HttpWebReq.GetRequestStream);
      HttpWebRes := HttpWebReq.GetResponse;
      XMLResponse.Load(HttpWebRes.GetResponseStream);
      IF HttpWebRes.StatusCode = 200 THEN BEGIN
        EXIT(TRUE)
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE LFAPI@100000035();
    VAR
      HttpWebRequestMgt@100000000 : Codeunit 1297;
      BaseURL@100000001 : Text;
      User@100000002 : Text;
      Password@100000003 : Text;
      payload@100000004 : Text;
      ResponseBody@100000009 : Text;
      ErrorMessage@100000008 : Text;
      ErrorDetails@100000007 : Text;
      HttpStatusCode@100000006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@100000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000012 : Text;
      ResponseJson@100000011 : Text;
      HttpError@100000010 : Text;
      JsonArray@100000014 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000013 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      CLEARLASTERROR;
      BaseURL := 'https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXwebapi/DMS/UploadFromDnDFile';

      User := 'demouser';
      Password := 'DFX@123';
      payload := '{"ServiceURL": "https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXwebapi/DMS/UploadFromDnDFile",' +
      '"URLRequestPath": "https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXwebapi/DMS/UploadFromDnDFile",' +
      '"Method": "POST",' +
      '"Content": {' +
      '"Repository ": "DEMOREPO",' +
      '"Files": [{' +
      '"File": "1 (6).txt",' +
      '"LocalFile": "0",' +
      '"Filename": "1 (6).txt",' +
      '"Properties":[],' +
      '"SecCode": "",' +
      '"Tags": [],' +
      '"Data": "YWJj",' +
      '"VolumeID": "1"' +
      '}]' +
      '}' +
      '}';


      // payload := '{' +
      //          '"Repository":"DEMOREPO",' +
      //          '"Columns":' +
      //          '[' +
      //              '[' +
      //                  '{' +
      //                      '"SearchFieldType":0,' +
      //                      '"BaseField":"Text",' +
      //                      '"Value":"sample text",' +
      //                      '"Condition":0' +
      //                  '}' +
      //              ']' +
      //          '],' +
      //          '"Page":1,' +
      //          '"No":100,' +
      //          '"ColumnSortType":1,' +
      //          '"ColumnName":"Client Name",' +
      //          '"ColumnSortOrder":0' +
      //      '}';



      HttpWebRequestMgt.CheckUrl(BaseURL);
      HttpWebRequestMgt.Initialize(BaseURL);
      HttpWebRequestMgt.SetContentType('application\json');
      HttpWebRequestMgt.SetMethod('POST');
      HttpWebRequestMgt.SetReturnType('application\json');
      HttpWebRequestMgt.CreateNTLMAuthHeader(User,Password);
      HttpWebRequestMgt.InvokeJSONRequest(payload,ResponseJson,HttpError);

      //HttpWebRequestMgt.AddBodyAsText(payload);
      MESSAGE(GETLASTERRORTEXT);
      MESSAGE(HttpError);
      //MESSAGE(FORMAT(HttpWebRequestMgt.SendRequestAndReadTextResponse(ResponseBody,ErrorMessage,ErrorDetails,HttpStatusCode,ResponseHeaders)));
      MESSAGE(ResponseJson);
    END;

    LOCAL PROCEDURE ES@100000061();
    VAR
      HttpWebRequestMgt@100000000 : Codeunit 1297;
      BaseURL@100000001 : Text;
      User@100000002 : Text;
      Password@100000003 : Text;
      payload@100000004 : Text;
      ResponseBody@100000009 : Text;
      ErrorMessage@100000008 : Text;
      ErrorDetails@100000007 : Text;
      HttpStatusCode@100000006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@100000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      RequestJson@100000012 : Text;
      ResponseJson@100000011 : Text;
      HttpError@100000010 : Text;
      JsonArray@100000014 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000013 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Content_JsonObject@100000015 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JSONManagement@100000016 : Codeunit 5459;
      JsonTextWriter@100000017 : Codeunit 1234;
      Column_Array@100000018 : Text;
    BEGIN
      CLEARLASTERROR;
      BaseURL := 'https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXApi/DMS/Documents/Query';

      User := 'demouser';
      Password := 'DFX@123';
      payload := '{' + '"ServiceURL": "https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXApi/DMS/Documents/Query",' + '"URLRequestPath": "",' + '"Method": "POST",' + '"Content": {' + '"Repository ": "DEMOREPO",' + '"Columns": [' + '[{' +
      '"SearchFieldType": 0,' + '"BaseField": "Text",' + '"Value": "sample text",' + '"Condition": 0' + '}]' + '],' + '"Page": 1,' + '"No": 100,' + '"ColumnSortType": 1,' + '"ColumnName": [{"Client Name": "xyz"}],' + '"ColumnSortOrder": 0' + '}' + '}';

      {


      JsonTextWriter.WriteStartObject(payload);
      JsonTextWriter.WriteStringProperty('ServiceURL','https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXApi/DMS/Documents/Query');
      JsonTextWriter.WriteStringProperty('URLRequestPath','');

      JsonTextWriter.WriteStringProperty('Method','POST');

      JsonTextWriter.WriteStringProperty('Content','');
      JsonTextWriter.WriteStringProperty('Repository','DEMOREPO');
      //JsonTextWriter.WriteStringProperty('Columns','');
      JsonTextWriter.WriteStartObject('Column Sample');
      JsonTextWriter.WriteStartArray('Columns');
      JsonTextWriter.WriteProperty('SearchFieldType');
      JsonTextWriter.WriteValue(0);
      //JsonTextWriter.WriteStringProperty('BaseField','Text');
      //JsonTextWriter.WriteStringProperty('Value','sample text');
      //JsonTextWriter.WriteStringProperty('Condition',0);
      JsonTextWriter.WriteEndArray;
      JsonTextWriter.WriteEndObject;
      JsonTextWriter.WriteStringProperty('Page',1);
      JsonTextWriter.WriteStringProperty('No',100);
      JsonTextWriter.WriteStringProperty('ColumnSortType',1);
      JsonTextWriter.WriteStringProperty('ColumnName','');
      JsonTextWriter.WriteStringProperty('ColumnSortOrder',0);
      JsonTextWriter.WriteStringProperty('SearchFieldType',0);
      JsonTextWriter.WriteStringProperty('BaseField','Text');
      JsonTextWriter.WriteStringProperty('Value','sample text');
      JsonTextWriter.WriteStringProperty('Condition',0);
      JsonTextWriter.WriteStringProperty('Client Name','xyz');

      JsonTextWriter.WriteEndObject;

      MESSAGE(JsonTextWriter.GetJSonAsText);

      }

      // payload := '{' +
      //          '"Repository":"DEMOREPO",' +
      //          '"Columns":' +
      //          '[' +
      //              '[' +
      //                  '{' +
      //                      '"SearchFieldType":0,' +
      //                      '"BaseField":"Text",' +
      //                      '"Value":"sample text",' +
      //                      '"Condition":0' +
      //                  '}' +
      //              ']' +
      //          '],' +
      //          '"Page":1,' +
      //          '"No":100,' +
      //          '"ColumnSortType":1,' +
      //          '"ColumnName":"Client Name",' +
      //          '"ColumnSortOrder":0' +
      //      '}';
      {
      JSonResponse := JSonResponse.JObject();
      JsonTextWriter := JSonResponse.CreateWriter();
      JsonTextWriter.WritePropertyName('ServiceURL');
      JsonTextWriter.WriteValue('https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXApi/DMS/Documents/QuerY');
      JsonTextWriter.WritePropertyName('URLRequestPath');
      JsonTextWriter.WriteValue('');
      }

      {
      JsonObject.Add('ServiceURL','https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXApi/DMS/Documents/Query');
      JsonObject.Add('URLRequestPath','');
      JsonObject.Add('Method','POST');
      JsonObject.Add('Content',Content_Add(Content_JsonObject));}
      {
      JSONManagement.InitializeFromString(payload);





      JSONManagement.GetPropertyValueByName('ServiceURL','https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXApi/DMS/Documents/Query');

      JSONManagement.GetPropertyValueByName('URLRequestPath','');

      JSONManagement.GetPropertyValueByName('Method','POST');

      JSONManagement.GetPropertyValueByName('Content','');
      JSONManagement.GetPropertyValueByName('Repository','DEMOREPO');
      JSONManagement.GetPropertyValueByName('Columns','');
      JSONManagement.GetPropertyValueByName('Page',1);
      JSONManagement.GetPropertyValueByName('No',100);
      JSONManagement.GetPropertyValueByName('ColumnSortType',1);
      JSONManagement.GetPropertyValueByName('ColumnName','');
      JSONManagement.GetPropertyValueByName('ColumnSortOrder',0);



      MESSAGE(payload);
      }

      HttpWebRequestMgt.CheckUrl(BaseURL);
      HttpWebRequestMgt.Initialize(BaseURL);
      HttpWebRequestMgt.SetContentType('application\json');
      HttpWebRequestMgt.SetMethod('POST');
      HttpWebRequestMgt.SetReturnType('application\json');
      HttpWebRequestMgt.CreateNTLMAuthHeader(User,Password);
      HttpWebRequestMgt.InvokeJSONRequest(FORMAT(payload),ResponseJson,HttpError);
      //HttpWebRequestMgt.AddBodyAsText(payload);
      MESSAGE(GETLASTERRORTEXT);
      MESSAGE(HttpError);
      //MESSAGE(FORMAT(HttpWebRequestMgt.SendRequestAndReadTextResponse(ResponseBody,ErrorMessage,ErrorDetails,HttpStatusCode,ResponseHeaders)));
      MESSAGE(ResponseJson);
    END;

    LOCAL PROCEDURE Content_Add@100000039(Content_JsonObject@100000002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      Column_JsonArray@100000001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray";
      JsonObject@100000000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      {JsonObject.Add('Repository','DEMOREPO');
      JsonObject.Add('Columns',Column_Array(Column_JsonArray));
      JsonObject.Add('Page',1);
      JsonObject.Add('No',100);
      JsonObject.Add('ColumnSortType',1);
      JsonObject.Add('ColumnName',Columname_Array(ColumnName_JsonArray));
      JsonObject.Add('ColumnSortOrder',0);
      }
    END;

    LOCAL PROCEDURE Column_Array@100000040(Column_JsonArray@100000002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JsonObject@100000000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      {JsonObject.Add('SearchFieldType',0);
      JsonObject.Add('BaseField','Text');
      JsonObject.Add('Value','sample text');
      JsonObject.Add('Condition',0);

      Column_JsonArray.Add(JsonObject);
      }
    END;

    LOCAL PROCEDURE ColumnName_Array@100000041(ColumnName_JsonArray@100000002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JArray");
    VAR
      JsonObject@100000000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      {JsonObject.Add('Client Name','xyz');


      ColumnName_JsonArray.Add(JsonObject);
      }
    END;

    PROCEDURE NumberUpation@1000000001(Type@1000000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';No@1000000000 : Text;Name@1000000004 : Text) Number : Text;
    VAR
      ClientRec@1000000003 : Record 9068500;
      EntityRec@1000000002 : Record 9068505;
    BEGIN
      IF No <> '' THEN BEGIN
        CASE Type OF
              Type::Client : BEGIN
              ClientRec.RESET;
              IF ClientRec.GET(No) THEN
                No := ClientRec."Client No.";
              END;
              Type::Entity : BEGIN
              EntityRec.RESET;
              IF EntityRec.GET(No) THEN
                No := EntityRec."Entity No.";
              END
        END;
      END ELSE
        CASE Type OF
              Type::Client : BEGIN
                ClientRec.RESET;
                ClientRec.SETFILTER(Name,'%1','@*' + Name + '*');
                IF ClientRec.FINDFIRST THEN
                No := ClientRec."Client No.";
              END;
              Type::Entity : BEGIN
                EntityRec.RESET;
                EntityRec.SETFILTER(Name,'%1','@*' + Name + '*');
                IF EntityRec.FINDFIRST THEN
                No := EntityRec."Entity No.";
              END
        END;
      EXIT(No);
    END;

    [External]
    PROCEDURE UpdateDocStroreFromExternal@1000000011(AttachedToType@1000000000 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@1000000001 : Code[20];LFEntryID@1000000002 : Integer;FilePath@1000000011 : Text[250];FileName@1000000003 : Text;FileType@1000000010 : Code[10];DocDescription@1000000004 : Text[150];ExtDocType@1000000005 : Text[150];ExtDocSubType@1000000006 : Text[150];Function@1000000009 : ',CreateNew,Update,Delete';ExternalDMS@1000000016 : Text;DocCreatedDate@1000000018 : Date;DocModifiedDate@1000000017 : Date;LinkType@1000000019 : Text;NavAttribute@1000000020 : Text);
    VAR
      CorrespondenceStore@1000000007 : Record 9068660;
      DocMgmntCU@1000000008 : Codeunit 9068511;
      No@1000000012 : Text;
      FunctionType@1000000013 : ',CreateNew,Update,Delete';
      DocType@1000000014 : Text;
      DocSubType@1000000015 : Text;
      ID@100000000 : Text;
    BEGIN
      CLEAR(No);
      CLEAR(DocType);
      CLEAR(DocSubType);

      No := NumberUpation(AttachedToType,AttachedToNo,'');

      IF "Function" = FunctionType::CreateNew THEN
      BEGIN
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF NOT CorrespondenceStore.FINDFIRST THEN BEGIN
            CorrespondenceStore.INIT;
            CorrespondenceStore."No." := No;
            CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
            CorrespondenceStore."Document Inserted By" := ExternalDMS;
            CorrespondenceStore.FilePath := FilePath;
            CorrespondenceStore.FileName := FileName;
            CorrespondenceStore."MS Office Doc Type" := FileType;
            CorrespondenceStore.Subject := DocDescription;
            CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
            CorrespondenceStore."Document Date" := DocCreatedDate;
            CorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            CorrespondenceStore.Meta_Date_1 := DocModifiedDate;
            ID :=  CorrespondenceStore.ID;

            DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


           { DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;}


            IF AttachedToType = AttachedToType::Client THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

            CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");


            IF CorrespondenceStore.INSERT(TRUE) THEN BEGIN

                  IF AttachedToType = AttachedToType::Entity THEN BEGIN
                    EntityOwnerLink_Create(AttachedToNo,LFEntryID);
                    IntermediaryOwnerLink_Create(AttachedToNo,LFEntryID);
                    ProspectOwnerLink_Create(AttachedToNo,LFEntryID)
                  END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                    Unlink(AttachedToType,AttachedToNo,ID);
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                  END ELSE
                    LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

            END;

      END
          ELSE
          ERROR('Entry already exists');
      END
      ELSE IF "Function" = FunctionType::Update THEN
      BEGIN
            CorrespondenceStore.SETRANGE("No.",No);
            CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
            IF CorrespondenceStore.FINDFIRST THEN BEGIN
              CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
              CorrespondenceStore."Document Inserted By" := ExternalDMS;
              CorrespondenceStore.FileName := FileName;
              CorrespondenceStore.FilePath := FilePath;
              CorrespondenceStore.Subject := DocDescription;
              CorrespondenceStore."MS Office Doc Type" := FileType;
              CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
              CorrespondenceStore."Document Date" := DocCreatedDate;
              CorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
              CorrespondenceStore.Meta_Date_1 := DocModifiedDate;
              ID :=  CorrespondenceStore.ID;

              DocType := GetNAVDocType(ExtDocType);
              DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


             { DocType := GetDocType(ExtDocType);
              DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
              CorrespondenceStore."Document Type" := DocType;
              CorrespondenceStore."Document Sub Type" := DocSubType;}

              IF AttachedToType = AttachedToType::Client THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
              IF AttachedToType = AttachedToType::Entity THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
              IF AttachedToType = AttachedToType::Resource THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
              IF AttachedToType = AttachedToType::"Client Owner" THEN
                CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

              IF CorrespondenceStore.MODIFY THEN BEGIN
                IF AttachedToType = AttachedToType::Entity THEN BEGIN
                    EntityOwnerLink_Update(AttachedToNo,LFEntryID);
                    IntermediaryOwnerLink_Update(AttachedToNo,LFEntryID);
                    ProspectOwnerLink_Update(AttachedToNo,LFEntryID)
                END ELSE
                IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
                END ELSE
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);

              END
           END
           ELSE IF NOT CorrespondenceStore.FINDFIRST THEN BEGIN
           CorrespondenceStore.INIT;
            CorrespondenceStore."No." := No;
            CorrespondenceStore."LaserFiche Entry ID" := LFEntryID;
            CorrespondenceStore."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
            CorrespondenceStore."Document Inserted By" := ExternalDMS;
            CorrespondenceStore.FilePath := FilePath;
            CorrespondenceStore.FileName := FileName;
            CorrespondenceStore."MS Office Doc Type" := FileType;
            CorrespondenceStore.Subject := DocDescription;
            CorrespondenceStore."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
            CorrespondenceStore."Document Date" := DocCreatedDate;
            CorrespondenceStore."Additional Information" := NavAttribute;//[To be determined] in migration
            CorrespondenceStore.Meta_Date_1 := DocModifiedDate;

           DocType := GetNAVDocType(ExtDocType);
            DocSubType := GetNAVDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;//Link doc type directly from correspondece doc type and doctype sub type table so remove this code


            {DocType := GetDocType(ExtDocType);
            DocSubType := GetDocSubType(ExtDocType,ExtDocSubType);
            CorrespondenceStore."Document Type" := DocType;
            CorrespondenceStore."Document Sub Type" := DocSubType;}


            IF AttachedToType = AttachedToType::Client THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Client;
            IF AttachedToType = AttachedToType::Entity THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Entity;
            IF AttachedToType = AttachedToType::Resource THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::Resource;
            IF AttachedToType = AttachedToType::"Client Owner" THEN
              CorrespondenceStore.Type := CorrespondenceStore.Type::"Client Owner";

            CorrespondenceStore.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore.Type, CorrespondenceStore."No.");


            IF CorrespondenceStore.INSERT(TRUE) THEN BEGIN


              IF AttachedToType = AttachedToType::Entity THEN BEGIN
                EntityOwnerLink_Create(AttachedToNo,LFEntryID);
                IntermediaryOwnerLink_Create(AttachedToNo,LFEntryID);
                ProspectOwnerLink_Create(AttachedToNo,LFEntryID)
              END ELSE IF CheckEntryIDExist(AttachedToType,AttachedToNo,LFEntryID) THEN BEGIN
                  Unlink(AttachedToType,AttachedToNo,ID);
                  LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute)
               END ELSE
                LinkDocument(AttachedToType,AttachedToNo,LFEntryID,LinkType,NavAttribute);
            END;
      END
      END
      ELSE IF "Function" = FunctionType::Delete THEN BEGIN
              CorrespondenceStore.RESET;
              CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
              IF CorrespondenceStore.FINDSET THEN BEGIN
              REPEAT
                CorrespondenceStore.DELETE
              UNTIL CorrespondenceStore.NEXT = 0;
              END ELSE
                ERROR('Entry Does not exist');

          END;
    END;

    LOCAL PROCEDURE GetNAVDocType@1000000016(ExtDoctype@1000000000 : Text[150]) : Code[10];
    VAR
      ExternalDocTypeRec@1000000001 : Record 50007;
    BEGIN
      ExternalDocTypeRec.SETRANGE("External Doc Type", ExtDoctype);
      IF ExternalDocTypeRec.FINDFIRST THEN
        EXIT(ExternalDocTypeRec."NAV Doc Type");

      EXIT('');
    END;

    LOCAL PROCEDURE GetNAVDocSubType@1000000019(ExtDocType@1000000000 : Text[150];ExtDocSubType@1000000001 : Text[150]) : Code[20];
    VAR
      ExternalDocSubTypeRec@1000000002 : Record 50008;
    BEGIN
      ExternalDocSubTypeRec.SETRANGE("External Doc Type", ExtDocType);
      ExternalDocSubTypeRec.SETRANGE("External Sub Doc Type", ExtDocSubType);
      IF ExternalDocSubTypeRec.FINDFIRST THEN
        EXIT(ExternalDocSubTypeRec."NAV Doc Sub Type");

      EXIT('');
    END;

    LOCAL PROCEDURE GetDocType@100000003(ExtDoctype@1000000000 : Text[150]) : Text;
    VAR
      CorrespondenceDocType@100000000 : Record 9068657;
    BEGIN
      CorrespondenceDocType.RESET;
      CorrespondenceDocType.SETRANGE(Type,ExtDoctype);
      IF CorrespondenceDocType.FINDFIRST THEN
        EXIT(CorrespondenceDocType.Type);

      EXIT('');
    END;

    LOCAL PROCEDURE GetDocSubType@100000002(ExtDocType@1000000000 : Text[150];ExtDocSubType@1000000001 : Text[150]) : Text;
    VAR
      DocumentTypeSubType@100000000 : Record 9068463;
    BEGIN
      DocumentTypeSubType.RESET;
      DocumentTypeSubType.SETRANGE("Document Type Description",ExtDocType);
      DocumentTypeSubType.SETRANGE("Document Sub Type Description",ExtDocSubType);
      IF DocumentTypeSubType.FINDFIRST THEN
        EXIT(DocumentTypeSubType."Document Sub Type Description");

      EXIT('');
    END;

    [External]
    PROCEDURE LinkDocument@1000000000(AttachedToType@1000000017 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@1000000004 : Code[20];LFEntryID@1000000003 : Integer;LinkType@1000000016 : Text;NAVAttribute@1000000005 : Text);
    VAR
      CorrespondenceStoreLink@1000000002 : Record 9069078;
      CorrespondenceStoreLink2@1000000001 : Record 9069078;
      CorrespondenceStore@1000000000 : Record 9068660;
      LinkTypeFilter@1000000006 : Text;
      LinkCodeFilter@1000000007 : Text;
      NoFilter@1000000008 : Text;
      StrCon@1000000010 : Text;
      ClientAccount@1000000009 : Record 9068624;
      ClientAsset@1000000011 : Record 9068546;
      ClientPortfolio@1000000012 : Record 9068565;
      ClientInvestment@1000000013 : Record 9068542;
      ClientCustomer@1000000014 : Record 9068602;
      ClientVendor@1000000015 : Record 9068604;
      LinkCode@100000000 : Text;
    BEGIN
      IF NAVAttribute <> '' THEN BEGIN
        IF LinkType <> '' THEN
        BEGIN

          CASE AttachedToType OF
          AttachedToType::Client :
            CorrespondenceStore.SETFILTER(Type,'Client');
          AttachedToType::Entity:
            CorrespondenceStore.SETFILTER(Type,'Entity');
          AttachedToType::Intermediary:
            CorrespondenceStore.SETFILTER(Type,'Intermediary');
          AttachedToType::"Client Owner" :
            CorrespondenceStore.SETFILTER(Type,'Client Owner');
          AttachedToType::"Potential Client":
            CorrespondenceStore.SETFILTER(Type,'Potential Client');
          AttachedToType::Prospect :
            CorrespondenceStore.SETFILTER(Type,'Prospect');
          AttachedToType::Resource :
            CorrespondenceStore.SETFILTER(Type,'Resource');
          END;

          CorrespondenceStore.SETFILTER("No.",AttachedToNo);
          CorrespondenceStore.SETRANGE("Temporary",FALSE);

          StrCon := CONVERTSTR(NAVAttribute,'-',',');
          LinkCodeFilter := SELECTSTR(1,StrCon);


           IF LinkType = 'Account' THEN BEGIN
             LinkCode := DELSTR(LinkCodeFilter,3);
             IF LinkCode = 'BK' THEN
               LinkTypeFilter := 'Bank'
             ELSE IF LinkCode = 'LN' THEN
               LinkTypeFilter := 'Loan'
          END ELSE
              LinkTypeFilter := LinkType;

          //CorrespondenceStore.SETRANGE("Corresp. Store Link Exists",FALSE);
          CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
          CorrespondenceStore.FILTERGROUP(0);

          IF CorrespondenceStore.FINDFIRST THEN BEGIN

            IF CorrespondenceStore.ID <> '' THEN BEGIN
              CorrespondenceStoreLink2.INIT;
              CorrespondenceStoreLink2.Type        := CorrespondenceStore.Type;
              CorrespondenceStoreLink2."No."       := CorrespondenceStore."No.";

              IF (LinkTypeFilter = 'Yacht') OR (LinkTypeFilter = 'Property') OR (LinkTypeFilter = 'Aviation') OR (LinkTypeFilter = 'Intellectual Property')
              OR (LinkTypeFilter = 'Life Assurance') OR (LinkTypeFilter = 'Miscellaneous Asset') THEN BEGIN
                  EVALUATE(CorrespondenceStoreLink2."Link Type",'Asset');
              END ELSE
              EVALUATE(CorrespondenceStoreLink2."Link Type",LinkTypeFilter);

              CorrespondenceStoreLink2."Link Code" := LinkCodeFilter;
              CorrespondenceStoreLink2.VALIDATE(ID,CorrespondenceStore.ID);
              CorrespondenceStoreLink2."External DMS Status" := CorrespondenceStoreLink2."External DMS Status"::Processed;
              CorrespondenceStoreLink2.INSERT(TRUE);

      END;
      END
      END ELSE
            ERROR('Link Type is Empty');
          END ELSE
          ERROR('NAVAttribute is Empty');
    END;

    [External]
    PROCEDURE HandShakeStatus@1000000002(LFEntryID@1000000000 : Integer;Status@1000000002 : Text);
    VAR
      CorrespondenceStore@1000000001 : Record 9068660;
    BEGIN
      CorrespondenceStore.RESET;
      CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
      IF CorrespondenceStore.FINDFIRST THEN BEGIN
        CorrespondenceStore."Additional Information" := Status;
        IF CorrespondenceStore."Additional Information" <> 'Processed' THEN
          CorrespondenceStore.MODIFY
        ELSE IF CorrespondenceStore."Additional Information" = 'Processed' THEN
          ERROR('Entry already processed');
      END
    END;

    [External]
    PROCEDURE UnlinkDocument@100000001(AttachedToType@100000005 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@100000004 : Code[20];LFEntryID@100000011 : Integer;LinkType@100000002 : Text;NAVAttribute@100000001 : Text);
    VAR
      CorrespondenceStoreLink@100000000 : Record 9069078;
      LinkTypeFilter@100000008 : Text;
      LinkCodeFilter@100000007 : Text;
      LinkCode@100000006 : Text;
      StrCon@100000009 : Text;
      LinkTypeOption@100000010 : ' ,Asset,Safe Custody,Bank,Loan,Agent,Investment,Client Entity,Client Entity History,Customer,Vendor,Portfolio,Transaction Monitoring,Interaction,Activity,Business Rule,Client Invoice,Meeting';
      CorrespondenceStore@100000003 : Record 9068660;
      ID@100000012 : Code[10];
    BEGIN
      //IF AttachedToType = AttachedToType::Client THEN
      IF NAVAttribute <> '' THEN BEGIN
        IF LinkType <> '' THEN
        BEGIN
          StrCon := CONVERTSTR(NAVAttribute,'-',',');
          LinkCodeFilter := SELECTSTR(1,StrCon);


          IF LinkType = 'Account' THEN BEGIN
            LinkCode := DELSTR(LinkCodeFilter,3);
            IF LinkCode = 'BK' THEN
              LinkTypeFilter := 'Bank'
            ELSE IF LinkCode = 'LN' THEN
               LinkTypeFilter := 'Loan'
          END ELSE
            LinkTypeFilter := LinkType;

          CASE LinkTypeFilter OF
            'Bank' :
              LinkTypeOption := LinkTypeOption::Bank;
            'Asset' :
              LinkTypeOption := LinkTypeOption::Asset;
            'Loan':
              LinkTypeOption := LinkTypeOption::Loan;
            'Portfolio' :
              LinkTypeOption := LinkTypeOption::Portfolio;
            'Investment' :
              LinkTypeOption := LinkTypeOption::Investment;
            'Agent' :
              LinkTypeOption := LinkTypeOption::Agent;
            'Meeting' :
              LinkTypeOption := LinkTypeOption::Meeting;
          END;

          CorrespondenceStore.RESET;

          CASE AttachedToType OF
          AttachedToType::Client :
            CorrespondenceStore.SETFILTER(Type,'Client');
          AttachedToType::Entity:
            CorrespondenceStore.SETFILTER(Type,'Entity');
          AttachedToType::Intermediary:
            CorrespondenceStore.SETFILTER(Type,'Intermediary');
          AttachedToType::"Client Owner" :
            CorrespondenceStore.SETFILTER(Type,'Client Owner');
          AttachedToType::"Potential Client" :
            CorrespondenceStore.SETFILTER(Type,'Potential Client');
          AttachedToType::Prospect :
            CorrespondenceStore.SETFILTER(Type,'Prospect');
          AttachedToType::Resource :
            CorrespondenceStore.SETFILTER(Type,'Resource');
          END;

          CorrespondenceStore.SETFILTER("No.",AttachedToNo);
          CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
          IF CorrespondenceStore.FINDFIRST THEN
            ID := CorrespondenceStore.ID;

          CorrespondenceStoreLink.RESET;
          CorrespondenceStoreLink.SETRANGE("No.",AttachedToNo);
          CorrespondenceStoreLink.SETRANGE(Type,CorrespondenceStoreLink.Type::Client);
          CorrespondenceStoreLink.SETRANGE("Link Type",LinkTypeOption);
          CorrespondenceStoreLink.SETRANGE("Link Code",LinkCodeFilter);
         // CorrespondenceStoreLink.SETRANGE("Correspondence Store Type",CorrespondenceStoreLink."Correspondence Store Type"::"0");
          CorrespondenceStoreLink.SETRANGE(ID,ID);
          IF CorrespondenceStoreLink.FINDFIRST THEN
            CorrespondenceStoreLink.DELETE
          ELSE
            ERROR('Record not found');
        END ELSE
            ERROR('Link Type is Empty');
          END ELSE
          ERROR('NAVAttribute is Empty');
    END;

    LOCAL PROCEDURE CheckEntryIDExist@100000000(AttachedToType@100000003 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@100000002 : Code[20];LFEntryID@100000001 : Integer) Exists : Boolean;
    VAR
      CorrespondenceStore@100000000 : Record 9068660;
      ID@100000004 : Text;
    BEGIN
      CorrespondenceStore.RESET;
      CorrespondenceStore.SETFILTER(Type,'Client');
      CorrespondenceStore.SETFILTER("No.",AttachedToNo);
      CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
      IF CorrespondenceStore.FINDFIRST THEN
        ID := CorrespondenceStore.ID;

      IF ID <> '' THEN
        Exists := TRUE
      ELSE
        Exists := FALSE;

      EXIT(Exists);
    END;

    LOCAL PROCEDURE Unlink@100000008(AttachedToType@1000000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@1000000000 : Code[20];ID@100000001 : Text);
    VAR
      CorrespondenceStoreLink@100000000 : Record 9069078;
    BEGIN
      CorrespondenceStoreLink.RESET;
      CorrespondenceStoreLink.SETFILTER(Type,'Client');
      CorrespondenceStoreLink.SETFILTER("No.",AttachedToNo);
      CorrespondenceStoreLink.SETRANGE(ID,ID);
      IF CorrespondenceStoreLink.FINDFIRST THEN
        CorrespondenceStoreLink.DELETE
      //ELSE
       //ERROR('Record not found');
    END;

    LOCAL PROCEDURE EntityOwnerLink_Create@100000004(AttachedToNo@100000006 : Code[20];LFEntryID@100000005 : Integer);
    VAR
      Owner@100000000 : Record 9068443;
      Entity@100000002 : Record 9068505;
      AttachedToType@100000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000007 : Record 9068660;
      CorrespondenceStore2@100000008 : Record 9068660;
    BEGIN

      Entity.GET(AttachedToNo);
      //Owner.GET(Entity."Owner No.");
      Owner.RESET;
      Owner.SETRANGE("No.",Entity."Owner No.");
      IF Owner.FINDFIRST THEN BEGIN
        CorrespondenceStore.RESET;
        CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
        IF CorrespondenceStore.FINDFIRST THEN BEGIN
          CorrespondenceStore2.INIT;
          CorrespondenceStore2."No." := Owner."No.";
          CorrespondenceStore2."LaserFiche Entry ID" := CorrespondenceStore."LaserFiche Entry ID";
          CorrespondenceStore2."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
          CorrespondenceStore2."Document Inserted By" := CorrespondenceStore."Document Inserted By";
          CorrespondenceStore2.FilePath := CorrespondenceStore.FilePath;
          CorrespondenceStore2.FileName := CorrespondenceStore.FileName;
          CorrespondenceStore2."MS Office Doc Type" := CorrespondenceStore."MS Office Doc Type";
          CorrespondenceStore2.Subject := CorrespondenceStore.Subject;
          CorrespondenceStore2."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
          CorrespondenceStore2."Document Date" := CorrespondenceStore."Document Date";
          CorrespondenceStore2."Additional Information" := CorrespondenceStore."Additional Information";//[To be determined] in migration
          CorrespondenceStore2.Meta_Date_1 := CorrespondenceStore.Meta_Date_1;
          CorrespondenceStore2.Type := CorrespondenceStore.Type::"Client Owner";
          CorrespondenceStore2."Document Type" := CorrespondenceStore."Document Type";
          CorrespondenceStore2."Document Sub Type" := CorrespondenceStore."Document Sub Type";

          CorrespondenceStore2.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore2.Type, CorrespondenceStore2."No.");
          CorrespondenceStore2.INSERT(TRUE);
        END
      END;
    END;

    LOCAL PROCEDURE EntityOwnerLink_Update@100000017(AttachedToNo@100000006 : Code[20];LFEntryID@100000005 : Integer);
    VAR
      Owner@100000000 : Record 9068443;
      Entity@100000002 : Record 9068505;
      AttachedToType@100000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000007 : Record 9068660;
      CorrespondenceStore2@100000008 : Record 9068660;
    BEGIN
      Entity.GET(AttachedToNo);
      //Owner.GET(Entity."Owner No.")
      Owner.RESET;
      Owner.SETRANGE("No.",Entity."Owner No.");
      IF Owner.FINDFIRST THEN BEGIN
         CorrespondenceStore2.SETRANGE("LaserFiche Entry ID",LFEntryID);
        CorrespondenceStore2.FINDFIRST;
        CorrespondenceStore.RESET;
        CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
        IF CorrespondenceStore.FINDFIRST THEN BEGIN
          CorrespondenceStore2."No." := Owner."No.";
          CorrespondenceStore2."LaserFiche Entry ID" := CorrespondenceStore."LaserFiche Entry ID";
          CorrespondenceStore2."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
          CorrespondenceStore2."Document Inserted By" := CorrespondenceStore."Document Inserted By";
          CorrespondenceStore2."Document Inserted Date" := CorrespondenceStore."Document Inserted Date";
          CorrespondenceStore2.FilePath := CorrespondenceStore.FilePath;
          CorrespondenceStore2.FileName := CorrespondenceStore.FileName;
          CorrespondenceStore2."MS Office Doc Type" := CorrespondenceStore."MS Office Doc Type";
          CorrespondenceStore2.Subject := CorrespondenceStore.Subject;
          CorrespondenceStore2."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
          CorrespondenceStore2."Document Date" := CorrespondenceStore."Document Date";
          CorrespondenceStore2."Additional Information" := CorrespondenceStore."Additional Information";//[To be determined] in migration
          CorrespondenceStore2.Meta_Date_1 := CorrespondenceStore.Meta_Date_1;
          CorrespondenceStore2.Type := CorrespondenceStore.Type::"Client Owner";
          CorrespondenceStore2."Document Type" := CorrespondenceStore."Document Type";
          CorrespondenceStore2."Document Sub Type" := CorrespondenceStore."Document Sub Type";
          CorrespondenceStore2.ID := CorrespondenceStore2.ID;

          CorrespondenceStore2.MODIFY(TRUE);
        END
      END;
    END;

    LOCAL PROCEDURE IntermediaryOwnerLink_Create@100000015(AttachedToNo@100000006 : Code[20];LFEntryID@100000005 : Integer);
    VAR
      Entity@100000002 : Record 9068505;
      AttachedToType@100000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000007 : Record 9068660;
      CorrespondenceStore2@100000008 : Record 9068660;
      Intermediary@100000000 : Record 9068447;
    BEGIN

      Entity.GET(AttachedToNo);
      //Owner.GET(Entity."Owner No.");
      Intermediary.RESET;
      Intermediary.SETRANGE("No.",Entity."Intermediary No.");
      IF Intermediary.FINDFIRST THEN BEGIN
      CorrespondenceStore.RESET;
      CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
      IF CorrespondenceStore.FINDFIRST THEN BEGIN
        CorrespondenceStore2.INIT;
        CorrespondenceStore2."No." := Intermediary."No.";
        CorrespondenceStore2."LaserFiche Entry ID" := CorrespondenceStore."LaserFiche Entry ID";
        CorrespondenceStore2."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
        CorrespondenceStore2."Document Inserted By" := CorrespondenceStore."Document Inserted By";
        CorrespondenceStore2.FilePath := CorrespondenceStore.FilePath;
        CorrespondenceStore2.FileName := CorrespondenceStore.FileName;
        CorrespondenceStore2."MS Office Doc Type" := CorrespondenceStore."MS Office Doc Type";
        CorrespondenceStore2.Subject := CorrespondenceStore.Subject;
        CorrespondenceStore2."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
        CorrespondenceStore2."Document Date" := CorrespondenceStore."Document Date";
        CorrespondenceStore2."Additional Information" := CorrespondenceStore."Additional Information";//[To be determined] in migration
        CorrespondenceStore2.Meta_Date_1 := CorrespondenceStore.Meta_Date_1;
        CorrespondenceStore2.Type := CorrespondenceStore.Type::Intermediary;
        CorrespondenceStore2."Document Type" := CorrespondenceStore."Document Type";
        CorrespondenceStore2."Document Sub Type" := CorrespondenceStore."Document Sub Type";

        CorrespondenceStore2.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore2.Type, CorrespondenceStore2."No.");
        CorrespondenceStore2.INSERT(TRUE);
      END
      END;
    END;

    LOCAL PROCEDURE IntermediaryOwnerLink_Update@100000014(AttachedToNo@100000006 : Code[20];LFEntryID@100000005 : Integer);
    VAR
      Intermediary@100000000 : Record 9068447;
      Entity@100000002 : Record 9068505;
      AttachedToType@100000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000007 : Record 9068660;
      CorrespondenceStore2@100000008 : Record 9068660;
    BEGIN
      Entity.GET(AttachedToNo);
      //Owner.GET(Entity."Owner No.")
      Intermediary.RESET;
      Intermediary.SETRANGE("No.",Entity."Intermediary No.");
      IF Intermediary.FINDFIRST THEN BEGIN
        CorrespondenceStore2.SETRANGE("LaserFiche Entry ID",LFEntryID);
        CorrespondenceStore2.FINDFIRST;
        CorrespondenceStore.RESET;
        CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
        IF CorrespondenceStore.FINDFIRST THEN BEGIN
          CorrespondenceStore2."No." := Intermediary."No.";
          CorrespondenceStore2."LaserFiche Entry ID" := CorrespondenceStore."LaserFiche Entry ID";
          CorrespondenceStore2."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
          CorrespondenceStore2."Document Inserted By" := CorrespondenceStore."Document Inserted By";
          CorrespondenceStore2."Document Inserted Date" := CorrespondenceStore."Document Inserted Date";
          CorrespondenceStore2.FilePath := CorrespondenceStore.FilePath;
          CorrespondenceStore2.FileName := CorrespondenceStore.FileName;
          CorrespondenceStore2."MS Office Doc Type" := CorrespondenceStore."MS Office Doc Type";
          CorrespondenceStore2.Subject := CorrespondenceStore.Subject;
          CorrespondenceStore2."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
          CorrespondenceStore2."Document Date" := CorrespondenceStore."Document Date";
          CorrespondenceStore2."Additional Information" := CorrespondenceStore."Additional Information";//[To be determined] in migration
          CorrespondenceStore2.Meta_Date_1 := CorrespondenceStore.Meta_Date_1;
          CorrespondenceStore2.Type := CorrespondenceStore.Type::Intermediary;
          CorrespondenceStore2."Document Type" := CorrespondenceStore."Document Type";
          CorrespondenceStore2."Document Sub Type" := CorrespondenceStore."Document Sub Type";
          CorrespondenceStore2.ID := CorrespondenceStore2.ID;

          CorrespondenceStore2.MODIFY(TRUE);
        END
      END;
    END;

    LOCAL PROCEDURE ProspectOwnerLink_Create@100000007(AttachedToNo@100000006 : Code[20];LFEntryID@100000005 : Integer);
    VAR
      Entity@100000002 : Record 9068505;
      AttachedToType@100000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000007 : Record 9068660;
      CorrespondenceStore2@100000008 : Record 9068660;
      Prospect@100000000 : Record 9068440;
    BEGIN

      Entity.GET(AttachedToNo);
      //Owner.GET(Entity."Owner No.");
      Prospect.RESET;
      Prospect.SETRANGE("No.",Entity."Prospect No.");
      IF Prospect.FINDFIRST THEN BEGIN
      CorrespondenceStore.RESET;
      CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
      IF CorrespondenceStore.FINDFIRST THEN BEGIN
        CorrespondenceStore2.INIT;
        CorrespondenceStore2."No." := Prospect."No.";
        CorrespondenceStore2."LaserFiche Entry ID" := CorrespondenceStore."LaserFiche Entry ID";
        CorrespondenceStore2."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
        CorrespondenceStore2."Document Inserted By" := CorrespondenceStore."Document Inserted By";
        CorrespondenceStore2.FilePath := CorrespondenceStore.FilePath;
        CorrespondenceStore2.FileName := CorrespondenceStore.FileName;
        CorrespondenceStore2."MS Office Doc Type" := CorrespondenceStore."MS Office Doc Type";
        CorrespondenceStore2.Subject := CorrespondenceStore.Subject;
        CorrespondenceStore2."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
        CorrespondenceStore2."Document Date" := CorrespondenceStore."Document Date";
        CorrespondenceStore2."Additional Information" := CorrespondenceStore."Additional Information";//[To be determined] in migration
        CorrespondenceStore2.Meta_Date_1 := CorrespondenceStore.Meta_Date_1;
        CorrespondenceStore2.Type := CorrespondenceStore.Type::Prospect;
        CorrespondenceStore2."Document Type" := CorrespondenceStore."Document Type";
        CorrespondenceStore2."Document Sub Type" := CorrespondenceStore."Document Sub Type";

        CorrespondenceStore2.ID := DocMgmntCU."Get Next Document Number"(CorrespondenceStore2.Type, CorrespondenceStore2."No.");
        CorrespondenceStore2.INSERT(TRUE);
      END
      END;
    END;

    LOCAL PROCEDURE ProspectOwnerLink_Update@100000006(AttachedToNo@100000006 : Code[20];LFEntryID@100000005 : Integer);
    VAR
      Prospect@100000000 : Record 9068440;
      Entity@100000002 : Record 9068505;
      AttachedToType@100000001 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';
      CorrespondenceStore@100000007 : Record 9068660;
      CorrespondenceStore2@100000008 : Record 9068660;
    BEGIN
      Entity.GET(AttachedToNo);
      //Owner.GET(Entity."Owner No.")
      Prospect.RESET;
      Prospect.SETRANGE("No.",Entity."Prospect No.");
      IF Prospect.FINDFIRST THEN BEGIN
        CorrespondenceStore2.SETRANGE("LaserFiche Entry ID",LFEntryID);
        CorrespondenceStore2.FINDFIRST;
        CorrespondenceStore.RESET;
        CorrespondenceStore.SETRANGE("LaserFiche Entry ID",LFEntryID);
        IF CorrespondenceStore.FINDFIRST THEN BEGIN
          CorrespondenceStore2."No." := Prospect."No.";
          CorrespondenceStore2."LaserFiche Entry ID" := CorrespondenceStore."LaserFiche Entry ID";
          CorrespondenceStore2."Source of Document" := CorrespondenceStore."Source of Document"::Imported;
          CorrespondenceStore2."Document Inserted By" := CorrespondenceStore."Document Inserted By";
          CorrespondenceStore2."Document Inserted Date" := CorrespondenceStore."Document Inserted Date";
          CorrespondenceStore2.FilePath := CorrespondenceStore.FilePath;
          CorrespondenceStore2.FileName := CorrespondenceStore.FileName;
          CorrespondenceStore2."MS Office Doc Type" := CorrespondenceStore."MS Office Doc Type";
          CorrespondenceStore2.Subject := CorrespondenceStore.Subject;
          CorrespondenceStore2."External DMS Status" := CorrespondenceStore."External DMS Status"::Processed;
          CorrespondenceStore2."Document Date" := CorrespondenceStore."Document Date";
          CorrespondenceStore2."Additional Information" := CorrespondenceStore."Additional Information";//[To be determined] in migration
          CorrespondenceStore2.Meta_Date_1 := CorrespondenceStore.Meta_Date_1;
          CorrespondenceStore2.Type := CorrespondenceStore.Type::Prospect;
          CorrespondenceStore2."Document Type" := CorrespondenceStore."Document Type";
          CorrespondenceStore2."Document Sub Type" := CorrespondenceStore."Document Sub Type";
          CorrespondenceStore2.ID := CorrespondenceStore2.ID;

          CorrespondenceStore2.MODIFY(TRUE);
        END
      END;
    END;

    LOCAL PROCEDURE CustomValidation@100000010(pDocSetup@1000000000 : Record 9068662);
    VAR
      ApplicationSetup@100000000 : Record 9068230;
    BEGIN
      IF
        ApplicationSetup.CheckClientReference('C090') THEN;
        //C090CustomValidation;
    END;

    LOCAL PROCEDURE AddLFMessageRecord@1000000015(LaserFicheTemp@1000000000 : Record 9069241;CorrespondenceStore@100000000 : Record 9068660;Function@1000000002 : Code[20]);
    VAR
      LFMessages@1000000001 : Record 9069241;
    BEGIN
      LFMessages.INIT;
      LFMessages.TRANSFERFIELDS(LaserFicheTemp);
      LFMessages."Company Name" := COMPANYNAME;
      LFMessages."Inserted By" := USERID;
      LFMessages."Inserted Date" := TODAY;
      LFMessages."Document Type" := CorrespondenceStore."Document Type";
      LFMessages."Document Sub Type" := CorrespondenceStore."Document Sub Type";

       IF CorrespondenceStore.Type = CorrespondenceStore.Type::Client THEN
              LFMessages."Attached To Type" := LFMessages."Attached To Type"::Client;
            IF CorrespondenceStore.Type = CorrespondenceStore.Type::Entity THEN
              LFMessages."Attached To Type" := LFMessages."Attached To Type"::Entity;
            IF CorrespondenceStore.Type = CorrespondenceStore.Type::Resource THEN
              LFMessages."Attached To Type" := LFMessages."Attached To Type"::Resource;
            IF CorrespondenceStore.Type = CorrespondenceStore.Type::"Client Owner" THEN
              LFMessages."Attached To Type" := LFMessages."Attached To Type"::"Client Owner";

      LFMessages."Attached To No" := CorrespondenceStore."No.";
      LFMessages."NAV Document GUID" := CorrespondenceStore."Document GUID";
      LFMessages."File Name" := CorrespondenceStore.FileName;
      LFMessages."Original File Path" := CorrespondenceStore.FilePath;
      LFMessages."Document Description" := CorrespondenceStore.Subject;

      CASE "Function" OF
          'CREATENEW' : LFMessages."LaserFiche Status" := LFMessages."LaserFiche Status"::New;
          'UPDATE'    : LFMessages."LaserFiche Status" := LFMessages."LaserFiche Status"::Update;
          'DELETE'    : LFMessages."LaserFiche Status" := LFMessages."LaserFiche Status"::Deleted;
        END;

      IF LFMessages.INSERT(TRUE) THEN;
         // InsertIntoCorrespondenceStore(LFMessages);
    END;

    [EventSubscriber(Page,9069346,OnAfterActionEvent,LinkFile)]
    PROCEDURE SUBOnInsertCorrespondenceStore@100000009(VAR Rec@100000000 : Record 9068660);
    VAR
      CorrespondenceStore@100000001 : Record 9068660;
      LaserFicheMessages@100000002 : Record 9069241;
    BEGIN
      CorrespondenceStore.COPY(Rec);
      CorrespondenceStore.SETFILTER("LaserFiche Entry ID",'%1',0);
      IF CorrespondenceStore.FINDSET THEN
        REPEAT
          AddLFMessageRecord(LaserFicheMessages,CorrespondenceStore,'Create');
        UNTIL CorrespondenceStore.NEXT = 0;
    END;

    PROCEDURE HandShake@100000020(AttachedToType@100000002 : ' ,Prospect,Client Owner,Intermediary,Resource,Entity,Potential Client,Client';AttachedToNo@100000001 : Code[50];NAme@100000005 : Text;FileName@100000000 : Text;LFEntyId@100000003 : Integer) Success : Boolean;
    VAR
      CorrespondenceStore@100000004 : Record 9068660;
    BEGIN
      CASE AttachedToType OF
          AttachedToType::Client :
            CorrespondenceStore.SETFILTER(Type,'Client');
          AttachedToType::Entity:
            CorrespondenceStore.SETFILTER(Type,'Entity');
          AttachedToType::Intermediary:
            CorrespondenceStore.SETFILTER(Type,'Intermediary');
          AttachedToType::"Client Owner" :
            CorrespondenceStore.SETFILTER(Type,'Client Owner');
          AttachedToType::"Potential Client":
            CorrespondenceStore.SETFILTER(Type,'Potential Client');
          AttachedToType::Prospect :
            CorrespondenceStore.SETFILTER(Type,'Prospect');
          AttachedToType::Resource :
            CorrespondenceStore.SETFILTER(Type,'Resource');
          END;

      CorrespondenceStore.SETRANGE("No.",AttachedToNo);
      CorrespondenceStore.SETRANGE(FileName,FileName);
      CorrespondenceStore.FINDFIRST;
      IF CorrespondenceStore."LaserFiche Entry ID" = 0 THEN BEGIN
        CorrespondenceStore."LaserFiche Entry ID" := LFEntyId;
        IF CorrespondenceStore.MODIFY THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;


    END;

    LOCAL PROCEDURE ElasticSearch3@100000028();
    VAR
      HttpClient@100000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      HttpContent@100000001 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      Uri@100000000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      BaseURL@100000003 : Text;
      RequestHeaders@100000005 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpRequestHeaders";
      user@100000004 : Text;
      Password@100000006 : Text;
      payload@100000007 : Text;
      contentHeaders@100000008 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpContentHeaders";
      HttpResponseMessage@100000009 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      String@100000010 : Text;
      HttpWebReq@100000011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.
    System.Net.HttpWebRequest";
      RequestStr@100000013 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      StreamWriter@100000012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      Encoding@100000014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      HttpWebResponse@100000015 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      Streamwtr@100000016 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      JSONManagement@100000017 : Codeunit 5459;
      success@100000018 : Boolean;
      JsonObject@100000020 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Responsetxt@100000019 : Text;
      Requesttxt@100000021 : Text;
    BEGIN
      BaseURL := 'https://dfxdemo.datafabricx.com/DFXDMSLiteV2/DFXApi/DMS/Documents/Query';

      CLEARLASTERROR;

      user := 'demouser';
      Password := 'DFX@123';


      payload := '{' +
                '"Repository":"DEMOREPO",' +
                '"Columns":' +
                '[' +
                    '[' +
                        '{' +
                            '"SearchFieldType":l0,' +
                            '"BaseField":"Text",' +
                            '"Value":"sample text",' +
                            '"Condition":0' +
                        '}' +
                    ']' +
                '],' +
                '"Page":1,' +
                '"No":100,' +
                '"ColumnSortType":1,' +
                '"ColumnName":"Client Name",' +
                '"ColumnSortOrder":0' +
            '}';


      CLEAR(HttpWebReq);
      //HttpClieNT := HttpClient.

      HttpWebReq := HttpWebReq.Create(BaseURL);
      HttpWebReq.Method := 'POST';
      HttpWebReq.Accept := 'application/json';
      HttpWebReq.ContentType := 'application/json';
      HttpWebReq.Headers.Add('Authorization',CreateNTLMAuthHeader(user,Password));
      HttpWebReq.KeepAlive;
      HttpWebReq.PreAuthenticate := TRUE;
      HttpWebReq.UnsafeAuthenticatedConnectionSharing := TRUE;


      //MESSAGE(FORMAT(HttpWebReq.Headers));

      {JSONManagement.InitializeObject(payload);
      success := JSONManagement.ReadProperties;
      MESSAGE(FORMAT(success));
      }

      RequestStr := HttpWebReq.GetRequestStream;
      //StreamWriter := StreamWriter.StreamWriter(RequestStr,Encoding);
      Streamwtr := Streamwtr.StreamWriter(RequestStr);
      Streamwtr.Write(payload);
      Streamwtr.Flush();
      Streamwtr.Close();
      Streamwtr.Dispose;

      //JSONManagement.GetJSONObject(JsonObject);

      //MESSAGE(FORMAT(HttpWebReq.GetResponseAsync));

      //MESSAGE(Requesttxt);

      CLEAR(HttpWebResponse);
      HttpWebResponse := HttpWebResponse.HttpWebResponse;

      MESSAGE(GETLASTERRORTEXT);

      HttpWebResponse := HttpWebReq.GetResponse;


      //Responsetxt := HttpWebResponse.GetResponseHeader('Content-Type');

      //MESSAGE(Format(HttpWebResponse.StatusCode));

      //MESSAGE(FORMAT(Responsetxt));
    END;

    LOCAL PROCEDURE ElasticSearch2@100000030();
    VAR
      HttpClient@100000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      HttpContent@100000001 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      Uri@100000000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      BaseURL@100000003 : Text;
      RequestHeaders@100000005 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpRequestHeaders";
      user@100000004 : Text;
      Password@100000006 : Text;
      payload@100000007 : Text;
      contentHeaders@100000008 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpContentHeaders";
      HttpResponseMessage@100000009 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      String@100000010 : Text;
      HttpWebReq@100000011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.
    System.Net.HttpWebRequest";
      RequestStr@100000013 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      StreamWriter@100000012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      Encoding@100000014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      HttpWebResponse@100000015 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      Streamwtr@100000016 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      JSONManagement@100000017 : Codeunit 5459;
      success@100000018 : Boolean;
      JsonObject@100000020 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      BaseURL := 'https://laserfichedemo.datafabricx.com/DFXDMSLiteV3/dfxapi/DMS/Documents/Query';

      user := 'dfxadmin';
      Password := 'Welcome@123';


      payload := '{' +
                '"Repository":"DEMOREPO",' +
                '"Columns":' +
                '[' +
                    '[' +
                        '{' +
                            '"SearchFieldType":l0,' +
                            '"BaseField":"Text",' +
                            '"Value":"sample text",' +
                            '"Condition":0' +
                        '}' +
                    ']' +
                '],' +
                '"Page":1,' +
                '"No":100,' +
                '"ColumnSortType":1,' +
                '"ColumnName":"Client Name",' +
                '"ColumnSortOrder":0' +
            '}';




      HttpWebReq := HttpWebReq.Create(BaseURL);
      HttpWebReq.Method := 'POST';
      HttpWebReq.Accept := 'application/json';
      HttpWebReq.ContentType := 'application/json';
      HttpWebReq.Headers.Add('Authorization',CreateNTLMAuthHeader(user,Password));
      HttpWebReq.KeepAlive;
      HttpWebReq.PreAuthenticate := TRUE;
      HttpWebReq.UnsafeAuthenticatedConnectionSharing := TRUE;


      MESSAGE(FORMAT(HttpWebReq.Headers));

      {JSONManagement.InitializeObject(payload);
      success := JSONManagement.ReadProperties;
      MESSAGE(FORMAT(success));
      }

      RequestStr := HttpWebReq.GetRequestStream;
      //StreamWriter := StreamWriter.StreamWriter(RequestStr,Encoding);
      Streamwtr := Streamwtr.StreamWriter(RequestStr);
      Streamwtr.Write(payload);
      Streamwtr.Flush();
      Streamwtr.Close();


      //JSONManagement.GetJSONObject(JsonObject);

      HttpWebReq.Connection(FORMAT(RequestStr));


      HttpWebResponse := HttpWebResponse.HttpWebResponse;

      HttpResponseMessage := HttpWebResponse.GetResponseStream;

      MESSAGE(FORMAT(HttpResponseMessage));
    END;

    LOCAL PROCEDURE ElasticSearch@100000005();
    VAR
      HttpWebRequest@100000000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@100000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      HttpStatusCode@100000002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      Stream@100000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      TextEncoding@100000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      ResStreamReader@100000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      ResStream@100000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      Response@100000007 : Text;
      RequestData@100000008 : Text;
      HttpResStatus@100000009 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      OStream@100000010 : OutStream;
      Tempblob@100000011 : Record 99008535;
      HttpClient@100000012 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      HttpContent@100000013 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      Uri@100000014 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      BaseURL@100000015 : Text;
      HttpResponseMessage@100000016 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      RestMethod@100000017 : Text;
      Method@100000018 : Text;
      String@100000019 : Text;
      user@100000020 : Text;
      password@100000021 : Text;
      usernamePassword@100000023 : Text;
      Convert@100000024 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Auth@100000022 : Text;
      Certificates@100000025 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.ClientCertificateOption";
      Credential@100000026 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      HttpHeadersContent@100000027 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpContentHeaders";
      RequestHeaders@100000028 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpRequestHeaders";
      CacheCredentials@100000029 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.CacheControlHeaderValue";
      MSG@100000030 : Text;
    BEGIN
      {HttpWebRequest:=HttpWebRequest.HttpWebRequest;
      HttpWebRequest.ContentType('application/Json');
      HttpWebRequest.Method:='POST';
      HttpWebRequest.Create('https://laserfichedemo.datafabricx.com/DFXDMSLiteV2/dfxapi/DMS/Documents/Query');
      //HttpWebRequest:=WebRequest.Create('http://API_URL');


      HttpWebResponse:=HttpWebResponse.HttpWebResponse;
      HttpWebResponse:=HttpWebRequest.GetResponse();
      HttpResStatus:=HttpWebResponse.StatusCode();
      CLEAR(Response);
      IF HttpResStatus=200 THEN BEGIN
      ResStream:=HttpWebResponse.GetResponseStream();
      ResStreamReader:=ResStreamReader.StreamReader(ResStream,TextEncoding.Unicode);
      Response:=ResStreamReader.ReadToEnd();
      END ELSE BEGIN
      ResStream:=HttpWebResponse.GetResponseStream();
      ResStreamReader:=ResStreamReader.StreamReader(ResStream,TextEncoding.Unicode);
      Response:=HttpWebResponse.StatusDescription;
      END;



      Tempblob.Blob.CREATEOUTSTREAM(OStream);
      OStream.WRITETEXT('{');
      OStream.WRITETEXT('"Repository":"DEMOREPO",');
      OStream.WRITETEXT('"Columns":');
      OStream.WRITETEXT('[');
      OStream.WRITETEXT('[');
      OStream.WRITETEXT('{');
      OStream.WRITETEXT('"SearchFieldType":0,');
      OStream.WRITETEXT('"BaseField":"Text",');
      OStream.WRITETEXT('"Value":"Sample",');
      OStream.WRITETEXT('"Condition":0');
      OStream.WRITETEXT('}');
      OStream.WRITETEXT(']');
      OStream.WRITETEXT('],');
      OStream.WRITETEXT('"Page":1,');
      OStream.WRITETEXT('"No":100,');
      OStream.WRITETEXT('"ColumnSortType":1,');
      OStream.WRITETEXT('"ColumnName":"Client Name",');
      OStream.WRITETEXT('"ColumnSortOrder":0');
      OStream.WRITE('}');
      }
      //BaseURL := 'https://www.thunderclient.io/welcome';

      //BaseURL := 'https://reqbin.com/echo/post/json';

      BaseURL := 'https://laserfichedemo.datafabricx.com/DFXDMSLiteV3/dfxapi/DMS/Documents/Query';

      //HttpContent.ReadAsStreamAsync();

      user := 'dfxadmin';
      password := 'Welcome@123';
      //base64String := Convert.ToBase64String( Encoding.ASCII.GetBytes($"{user}:{password}"));

      usernamePassword := user + ':' + password;
      //Encoding := New-Object System.Text.ASCIIEncoding
      Auth := 'NTLM ' + usernamePassword;

      //'Basic ' + dfxadmin + ':' + Welcome@123

      MSG := '{\' +
                '"Repository":"DEMOREPO",\' +
                '"Columns":\' +
                '[\' +
                    '[\' +
                        '{\' +
                            '"SearchFieldType":0,\' +
                            '"BaseField":"Text",\' +
                            '"Value":"sample text",\' +
                            '"Condition":0\' +
                        '}\' +
                    ']\' +
                '],\' +
                '"Page":1,\' +
                '"No":100,\' +
                '"ColumnSortType":1,\' +
                '"ColumnName":"Client Name",\' +
                '"ColumnSortOrder":0\' +
            '}';



      HttpClient := HttpClient.HttpClient();
      HttpResponseMessage := HttpResponseMessage.HttpResponseMessage();
      HttpWebResponse := HttpWebResponse.HttpWebResponse;

      HttpWebRequest := HttpWebRequest.Create(BaseURL);

      HttpWebRequest.Method := 'POST';
      HttpWebRequest.Accept := 'application/json';
      HttpWebRequest.ContentType := 'application/json';
      HttpWebRequest.KeepAlive;
      HttpWebRequest.SendChunked;

      HttpWebRequest.Credentials := Credential.NetworkCredential(user,password);
      AddBodyAsText(MSG);
      HttpWebRequest.PreAuthenticate := TRUE;
      HttpWebRequest.UnsafeAuthenticatedConnectionSharing := TRUE;

      HttpResponseMessage := HttpWebResponse.GetResponseStream;

      MESSAGE(FORMAT(HttpResponseMessage));

      ///String := HttpResponseMessage.Content.ReadAsStringAsync.Result;

      //Credential.

      //RequestHeaders.Add('Authorization',CreateNTLMAuthHeader(user,password));
      //RequestHeaders.Add('Content-Type','application/json');
      //RequestHeaders.Add('Accept','application/json');
      {
      var credential = new NetworkCredential(username, password, domain);
      var credentialCache = new CredentialCache();
      credentialCache.Add(new Uri(url), "NTLM", credential);
      request.Credentials = credentialCache;

      HttpResponseMessage := HttpClient.PostAsync(Method,HttpContent).Result;
      }





      //HttpClient.DefaultRequestHeaders.Add('Authorization','ZGZ4YWRtaW46V2VsY29tZUAxMjM=');

      //}
      //HttpResponseMessage.EnsureSuccessStatusCode();
      //String := HttpResponseMessage.Content.ReadAsStringAsync.Result;
      MESSAGE(String);
      //}
      {
      HttpContent.CopyToAsync(OStream);
       //HttpContent.WriteFrom(OStream);
        // HttpContent.Headers(HttpHeadersContent);
         HttpHeadersContent.Remove('Content-Type');
         HttpHeadersContent.Add('Content-Type', 'application/json;charset=utf-8');
        // HttpHeadersContent.Add('SOAPAction', SoapAction);
         HttpClient.BaseAddress(Uri);
         HttpClient.DefaultRequestHeaders.Add('User-Agent', 'Dynamics 365');
         HttpClient.PostAsync(Uri, HttpContent);

      }
    END;

    LOCAL PROCEDURE TestAPI@100000032();
    VAR
      TempBlob@100000000 : Record 99008535;
      ReqBodyOutStream@100000001 : OutStream;
      Url@100000002 : Text;
      reqText@100000003 : Text;
      ReqBodyInStream@100000004 : InStream;
    BEGIN
      Url := 'http://www.w3schools.com/webservices/tempconvert.asmx';
      reqText := ' +10+';


      // save request text in instream
      TempBlob."Primary Key" := 1;
      TempBlob.Blob.CREATEOUTSTREAM(ReqBodyOutStream);

      ReqBodyOutStream.WRITE(reqText);
      TempBlob.Blob.CREATEINSTREAM(ReqBodyInStream);
      {
      // run the WebServReqMgt functions to send the request
      WebServReqMgt.SetGlobals(ReqBodyInStream,Url,Username,Password);
      WebServReqMgt.DisableHttpsCheck;
      WebServReqMgt.RUN;

      // get the response
      WebServReqMgt.GetResponseContent(RespBodyInStream);
      ResponseXmlDoc := ResponseXmlDoc.XmlDocument;
      ResponseXmlDoc.Load(RespBodyInStream);
      MESSAGE(ResponseXmlDoc.InnerXml);
      }
    END;

    LOCAL PROCEDURE CreateNTLMAuthHeader@100000011(Username@100000000 : Text;Password@100000001 : Text) : Text;
    VAR
      TempBlob@100000002 : Record 99008535;
    BEGIN

      TempBlob.WriteAsText(STRSUBSTNO('%1:%2', Username, Password), TEXTENCODING::Windows);
      EXIT(STRSUBSTNO('NTLM Authentication [Beta] %1', TempBlob.ToBase64String()));

      //EXIT(STRSUBSTNO('NTLM Authentication %1:%2',Username, Password));
    END;

    LOCAL PROCEDURE ElasticSearch1@100000012();
    VAR
      HttpWebRequestMgt@100000000 : Codeunit 1297;
      URL1@100000001 : Text;
      MSG@100000002 : Text;
      TempBlob@100000003 : Record 99008535;
      instr@100000004 : InStream;
      HttpStatusCode@100000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@100000006 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpResponseHeaders";
      APIRESULT@100000007 : Text;
      User@100000008 : Text;
      PassWord@100000009 : Text;
      Auth@100000010 : Text;
      SOAPWebServiceRequestMgt@100000012 : Codeunit 1290;
    BEGIN
      User := 'dfxadmin';
      PassWord := 'Welcome@123';

      MSG := '{\' +
                '"Repository":"DEMOREPO",\' +
                '"Columns":\' +
                '[\' +
                    '[\' +
                        '{\' +
                            '"SearchFieldType":0,\' +
                            '"BaseField":"Text",\' +
                            '"Value":"sample text",\' +
                            '"Condition":0\' +
                        '}' +
                    ']\' +
                '],\' +
                '"Page":1,\' +
                '"No":100,\' +
                '"ColumnSortType":1,\' +
                '"ColumnName":"Client Name",\' +
                '"ColumnSortOrder":0\' +
            '}';

      URL1:='https://laserfichedemo.datafabricx.com/DFXDMSLiteV3/dfxapi/DMS/Documents/Query';

      HttpWebRequestMgt.Initialize(URL1);
      HttpWebRequestMgt.DisableUI;
      HttpWebRequestMgt.SetMethod('POST');
      HttpWebRequestMgt.SetContentType('application/json');
      HttpWebRequestMgt.SetReturnType('application/json');
      //Auth := CreateNTLMAuthHeader(User,PassWord);
      //HttpWebRequestMgt.AddHeader('Authorization',Auth);

      //Auth := CreateNTLMAuthHeader(User,PassWord);
      HttpWebRequestMgt.AddHeader('Authorization',Auth);
      //HttpWebRequestMgt.AddBasicAuthentication(User,PassWord);



      HttpWebRequestMgt.AddBodyAsText(MSG);
      MESSAGE(MSG);

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(instr);
      IF HttpWebRequestMgt.GetResponse(instr,HttpStatusCode,ResponseHeaders) THEN BEGIN
      MESSAGE('httpstatuscode : '+HttpStatusCode.ToString);
      MESSAGE(ResponseHeaders.ToString);
      APIRESULT := TempBlob.ReadAsText('',TEXTENCODING::UTF8);
      MESSAGE(APIRESULT);
      END;
    END;

    [External]
    PROCEDURE DisableUI@18();
    BEGIN
      GlobalProgressDialogEnabled := FALSE;
    END;

    [Internal]
    PROCEDURE Initialize@11(URL@1000 : Text);
    VAR
      PermissionManager@1002 : Codeunit 9002;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        OnOverrideUrl(URL);

      HttpWebReq1 := HttpWebReq.Create(URL);
      //SetDefaults;
    END;

    [Internal]
    PROCEDURE SetTimeout@7(NewTimeout@1000 : Integer);
    BEGIN
      HttpWebReq1.Timeout := NewTimeout;
    END;

    [Internal]
    PROCEDURE SetMethod@4(Method@1000 : Text);
    BEGIN
      HttpWebReq1.Method := Method;
    END;

    [Internal]
    PROCEDURE SetDecompresionMethod@9(DecompressionMethod@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.DecompressionMethods");
    BEGIN
      HttpWebReq1.AutomaticDecompression := DecompressionMethod;
    END;

    [Internal]
    PROCEDURE SetContentType@5(ContentType@1000 : Text);
    BEGIN
      HttpWebReq1.ContentType := ContentType;
    END;

    [Internal]
    PROCEDURE SetReturnType@2(ReturnType@1000 : Text);
    BEGIN
      HttpWebReq1.Accept := ReturnType;
    END;

    [Internal]
    PROCEDURE AddBodyAsText@26(BodyText@1001 : Text);
    VAR
      Encoding@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      // Assume UTF8
      AddBodyAsTextWithEncoding(BodyText,Encoding.UTF8);
    END;

    [Internal]
    PROCEDURE GetResponse@6(VAR ResponseInStream@1005 : InStream;VAR HttpStatusCode@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";VAR ResponseHeaders@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection") : Boolean;
    VAR
      WebRequestHelper@1001 : Codeunit 1299;
      HttpWebResponse@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
    BEGIN
      EXIT(WebRequestHelper.GetWebResponse(HttpWebReq1,HttpWebResponse,ResponseInStream,HttpStatusCode,
          ResponseHeaders,GlobalProgressDialogEnabled));
    END;

    [Integration]
    PROCEDURE OnOverrideUrl@36(VAR Url@1000 : Text);
    BEGIN
      // Provides an option to rewrite URL in non SaaS environments.
    END;

    LOCAL PROCEDURE SetDefaults@12();
    VAR
      CookieContainer@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.CookieContainer";
      User@100000000 : Text;
      PassWord@100000001 : Text;
    BEGIN
      User := 'dfxadmin';
      PassWord := 'Welcome@123';

      HttpWebReq1.Method := 'Post';
      HttpWebReq1.KeepAlive := TRUE;
      HttpWebReq1.AllowAutoRedirect := TRUE;
      HttpWebReq1.UseDefaultCredentials := TRUE;
      HttpWebReq1.Timeout := 60000;
      HttpWebReq1.Accept('application/json');
      HttpWebReq1.ContentType('application/json');
      CookieContainer := CookieContainer.CookieContainer;
      HttpWebReq1.CookieContainer := CookieContainer;
      HttpWebReq1.Headers.Add('Authorization',CreateNTLMAuthHeader(User,PassWord));

      GlobalSkipCheckHttps := TRUE;
      GlobalProgressDialogEnabled := GUIALLOWED;
      TraceLogEnabled := TRUE;
    END;

    LOCAL PROCEDURE AddBodyAsTextWithEncoding@20(BodyText@1001 : Text;Encoding@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding");
    VAR
      RequestStr@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      StreamWriter@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
    BEGIN
      RequestStr := HttpWebReq1.GetRequestStream;
      StreamWriter := StreamWriter.StreamWriter(RequestStr,Encoding);
      StreamWriter.Write(BodyText);
      StreamWriter.Flush;
      StreamWriter.Close;
      StreamWriter.Dispose;
    END;

    [Internal]
    PROCEDURE AddBodyBlob@19(VAR TempBlob@1000 : Record 99008535);
    VAR
      RequestStr@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      BlobStr@1001 : InStream;
    BEGIN
      IF NOT TempBlob.Blob.HASVALUE THEN
        EXIT;

      RequestStr := HttpWebReq.GetRequestStream;
      TempBlob.Blob.CREATEINSTREAM(BlobStr);
      COPYSTREAM(RequestStr,BlobStr);
      RequestStr.Flush;
      RequestStr.Close;
      RequestStr.Dispose;
    END;

    [TryFunction]
    [Internal]
    PROCEDURE GetWebResponse@1(VAR HttpWebRequest@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";VAR HttpWebResponse@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";VAR ResponseInStream@1002 : InStream;VAR HttpStatusCode@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";VAR ResponseHeaders@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";ProgressDialogEnabled@1003 : Boolean);
    VAR
      ProcessingWindow@1000 : Dialog;
    BEGIN
      IF ProgressDialogEnabled THEN
        ProcessingWindow.OPEN(ProcessingWindowMsg);

      CLEARLASTERROR;
      HttpWebResponse := HttpWebRequest.GetResponse;
      HttpWebResponse.GetResponseStream.CopyTo(ResponseInStream);
      HttpStatusCode := HttpWebResponse.StatusCode;
      ResponseHeaders := HttpWebResponse.Headers;

      IF ProgressDialogEnabled THEN
        ProcessingWindow.CLOSE;
    END;

    BEGIN
    {
      //Create functionality When a document is created in External system it will create,update,delete a entry in Correspondance store
      //NAV attribute is now on one - one.. 14-09-2021 checked if entry exxists
      //checked if entry exxists
      //IF Yes then unlink and link
      //IF No then Link only
    }
    END.
  }
}

